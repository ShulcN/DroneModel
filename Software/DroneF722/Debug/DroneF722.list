
DroneF722.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015240  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d0c  08015420  08015420  00016420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801612c  0801612c  00018338  2**0
                  CONTENTS
  4 .ARM          00000008  0801612c  0801612c  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016134  08016134  00018338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016134  08016134  00017134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016138  08016138  00017138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000338  20000000  0801613c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f50  20000338  08016474  00018338  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002288  08016474  00019288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018338  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3a2  00000000  00000000  00018368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004365  00000000  00000000  0003670a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  0003aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001323  00000000  00000000  0003c338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027214  00000000  00000000  0003d65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f038  00000000  00000000  0006486f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4cae  00000000  00000000  000838a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168555  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000845c  00000000  00000000  00168598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  001709f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000338 	.word	0x20000338
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015408 	.word	0x08015408

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000033c 	.word	0x2000033c
 800021c:	08015408 	.word	0x08015408

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <ICM_WriteReg>:

// Глобальная переменная для хранения смещения гироскопа
static float gyro_bias[3] = {0.0f, 0.0f, 0.0f}; // смещение гироскопа в град/с
static int is_calibrated = 0; // флаг, показывающий выполнена ли калибровка

static HAL_StatusTypeDef ICM_WriteReg(uint8_t reg, uint8_t val) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	460a      	mov	r2, r1
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	4613      	mov	r3, r2
 8001062:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { reg & 0x7F, val };  // MSB=0 для записи
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800106a:	b2db      	uxtb	r3, r3
 800106c:	733b      	strb	r3, [r7, #12]
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8001072:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <ICM_WriteReg+0x5c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a0f      	ldr	r2, [pc, #60]	@ (80010b4 <ICM_WriteReg+0x60>)
 8001078:	8811      	ldrh	r1, [r2, #0]
 800107a:	2200      	movs	r2, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f004 f84d 	bl	800511c <HAL_GPIO_WritePin>
    HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8001082:	f107 010c 	add.w	r1, r7, #12
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800108a:	2202      	movs	r2, #2
 800108c:	480a      	ldr	r0, [pc, #40]	@ (80010b8 <ICM_WriteReg+0x64>)
 800108e:	f006 fc10 	bl	80078b2 <HAL_SPI_Transmit>
 8001092:	4603      	mov	r3, r0
 8001094:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <ICM_WriteReg+0x5c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a06      	ldr	r2, [pc, #24]	@ (80010b4 <ICM_WriteReg+0x60>)
 800109c:	8811      	ldrh	r1, [r2, #0]
 800109e:	2201      	movs	r2, #1
 80010a0:	4618      	mov	r0, r3
 80010a2:	f004 f83b 	bl	800511c <HAL_GPIO_WritePin>
    return ret;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000010 	.word	0x20000010
 80010b4:	20000014 	.word	0x20000014
 80010b8:	20000418 	.word	0x20000418

080010bc <ICM_ReadRegs>:


HAL_StatusTypeDef ICM_ReadRegs(uint8_t reg, uint8_t *pdata, uint16_t len) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	80bb      	strh	r3, [r7, #4]
    uint8_t addr = reg | 0x80; // Устанавливаем бит чтения (MSB=1)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 80010d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <ICM_ReadRegs+0x84>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a1a      	ldr	r2, [pc, #104]	@ (8001144 <ICM_ReadRegs+0x88>)
 80010dc:	8811      	ldrh	r1, [r2, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f004 f81b 	bl	800511c <HAL_GPIO_WritePin>

    HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 80010e6:	f107 010e 	add.w	r1, r7, #14
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ee:	2201      	movs	r2, #1
 80010f0:	4815      	ldr	r0, [pc, #84]	@ (8001148 <ICM_ReadRegs+0x8c>)
 80010f2:	f006 fbde 	bl	80078b2 <HAL_SPI_Transmit>
 80010f6:	4603      	mov	r3, r0
 80010f8:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d009      	beq.n	8001114 <ICM_ReadRegs+0x58>
        HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <ICM_ReadRegs+0x84>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0f      	ldr	r2, [pc, #60]	@ (8001144 <ICM_ReadRegs+0x88>)
 8001106:	8811      	ldrh	r1, [r2, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	4618      	mov	r0, r3
 800110c:	f004 f806 	bl	800511c <HAL_GPIO_WritePin>
        return ret;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	e011      	b.n	8001138 <ICM_ReadRegs+0x7c>
    }

    ret = HAL_SPI_Receive(&hspi1, pdata, len, HAL_MAX_DELAY);
 8001114:	88ba      	ldrh	r2, [r7, #4]
 8001116:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800111a:	6839      	ldr	r1, [r7, #0]
 800111c:	480a      	ldr	r0, [pc, #40]	@ (8001148 <ICM_ReadRegs+0x8c>)
 800111e:	f006 fd3d 	bl	8007b9c <HAL_SPI_Receive>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <ICM_ReadRegs+0x84>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <ICM_ReadRegs+0x88>)
 800112c:	8811      	ldrh	r1, [r2, #0]
 800112e:	2201      	movs	r2, #1
 8001130:	4618      	mov	r0, r3
 8001132:	f003 fff3 	bl	800511c <HAL_GPIO_WritePin>
    return ret;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000010 	.word	0x20000010
 8001144:	20000014 	.word	0x20000014
 8001148:	20000418 	.word	0x20000418

0800114c <ICM_Init>:

HAL_StatusTypeDef ICM_Init(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
    uint8_t who = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	70fb      	strb	r3, [r7, #3]

    if (ICM_WriteReg(ICM_REG_PWR_MGMT0, 0x0F) != HAL_OK) {
 8001156:	210f      	movs	r1, #15
 8001158:	204e      	movs	r0, #78	@ 0x4e
 800115a:	f7ff ff7b 	bl	8001054 <ICM_WriteReg>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <ICM_Init+0x22>
        printf("Failed to write PWR_MGMT0\r\n");
 8001164:	482d      	ldr	r0, [pc, #180]	@ (800121c <ICM_Init+0xd0>)
 8001166:	f00f f91d 	bl	80103a4 <puts>
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e051      	b.n	8001212 <ICM_Init+0xc6>
    }
    HAL_Delay(50);
 800116e:	2032      	movs	r0, #50	@ 0x32
 8001170:	f003 f90e 	bl	8004390 <HAL_Delay>

    if (ICM_ReadRegs(ICM_REG_WHO_AM_I, &who, 1) != HAL_OK) {
 8001174:	1cfb      	adds	r3, r7, #3
 8001176:	2201      	movs	r2, #1
 8001178:	4619      	mov	r1, r3
 800117a:	2075      	movs	r0, #117	@ 0x75
 800117c:	f7ff ff9e 	bl	80010bc <ICM_ReadRegs>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d004      	beq.n	8001190 <ICM_Init+0x44>
        printf("Failed to read WHO_AM_I\r\n");
 8001186:	4826      	ldr	r0, [pc, #152]	@ (8001220 <ICM_Init+0xd4>)
 8001188:	f00f f90c 	bl	80103a4 <puts>
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e040      	b.n	8001212 <ICM_Init+0xc6>
    }

    if (who != 0x47) {
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	2b47      	cmp	r3, #71	@ 0x47
 8001194:	d006      	beq.n	80011a4 <ICM_Init+0x58>
        printf("ICM WHO_AM_I = 0x%02X (expected 0x47)\r\n", who);
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	4619      	mov	r1, r3
 800119a:	4822      	ldr	r0, [pc, #136]	@ (8001224 <ICM_Init+0xd8>)
 800119c:	f00f f89a 	bl	80102d4 <iprintf>
        return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e036      	b.n	8001212 <ICM_Init+0xc6>
    }
//
//    if (ICM_WriteReg(ICM_REG_ACCEL_CONFIG0, 0x46) != HAL_OK) return HAL_ERROR;
//    if (ICM_WriteReg(ICM_REG_GYRO_CONFIG0,  0xE6) != HAL_OK) return HAL_ERROR;
	if (ICM_WriteReg(ICM_REG_ACCEL_CONFIG0, 0x05) != HAL_OK) return HAL_ERROR;
 80011a4:	2105      	movs	r1, #5
 80011a6:	2050      	movs	r0, #80	@ 0x50
 80011a8:	f7ff ff54 	bl	8001054 <ICM_WriteReg>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <ICM_Init+0x6a>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e02d      	b.n	8001212 <ICM_Init+0xc6>
	if (ICM_WriteReg(ICM_REG_GYRO_CONFIG0,  0x07) != HAL_OK) return HAL_ERROR;
 80011b6:	2107      	movs	r1, #7
 80011b8:	2054      	movs	r0, #84	@ 0x54
 80011ba:	f7ff ff4b 	bl	8001054 <ICM_WriteReg>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <ICM_Init+0x7c>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e024      	b.n	8001212 <ICM_Init+0xc6>

    HAL_Delay(50);
 80011c8:	2032      	movs	r0, #50	@ 0x32
 80011ca:	f003 f8e1 	bl	8004390 <HAL_Delay>

    uint8_t sts;
    if (ICM_ReadRegs(0x53, &sts, 1) == HAL_OK)
 80011ce:	1cbb      	adds	r3, r7, #2
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	2053      	movs	r0, #83	@ 0x53
 80011d6:	f7ff ff71 	bl	80010bc <ICM_ReadRegs>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d104      	bne.n	80011ea <ICM_Init+0x9e>
        printf("INT_STATUS=0x%02X\r\n", sts);
 80011e0:	78bb      	ldrb	r3, [r7, #2]
 80011e2:	4619      	mov	r1, r3
 80011e4:	4810      	ldr	r0, [pc, #64]	@ (8001228 <ICM_Init+0xdc>)
 80011e6:	f00f f875 	bl	80102d4 <iprintf>

    // Сброс флага калибровки при инициализации
    is_calibrated = 0;
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <ICM_Init+0xe0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	e009      	b.n	800120a <ICM_Init+0xbe>
        gyro_bias[i] = 0.0f;
 80011f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001230 <ICM_Init+0xe4>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3301      	adds	r3, #1
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b02      	cmp	r3, #2
 800120e:	ddf2      	ble.n	80011f6 <ICM_Init+0xaa>
    }

    return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	08015420 	.word	0x08015420
 8001220:	0801543c 	.word	0x0801543c
 8001224:	08015458 	.word	0x08015458
 8001228:	08015480 	.word	0x08015480
 800122c:	20000360 	.word	0x20000360
 8001230:	20000354 	.word	0x20000354

08001234 <ICM_ReadAccel_RAW>:



HAL_StatusTypeDef ICM_ReadAccel_RAW(int16_t accel_data[3]) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    HAL_StatusTypeDef ret = ICM_ReadRegs(ICM_REG_ACCEL_XOUT_H, buf, 6);
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2206      	movs	r2, #6
 8001242:	4619      	mov	r1, r3
 8001244:	201f      	movs	r0, #31
 8001246:	f7ff ff39 	bl	80010bc <ICM_ReadRegs>
 800124a:	4603      	mov	r3, r0
 800124c:	74fb      	strb	r3, [r7, #19]
    if (ret != HAL_OK) return ret;
 800124e:	7cfb      	ldrb	r3, [r7, #19]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <ICM_ReadAccel_RAW+0x24>
 8001254:	7cfb      	ldrb	r3, [r7, #19]
 8001256:	e020      	b.n	800129a <ICM_ReadAccel_RAW+0x66>
    // преобразование в int16
    for (int i = 0; i < 3; i++) {
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	e019      	b.n	8001292 <ICM_ReadAccel_RAW+0x5e>
        accel_data[i] = ((int16_t)buf[2*i] << 8) | buf[2*i + 1];
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	3318      	adds	r3, #24
 8001264:	443b      	add	r3, r7
 8001266:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	b219      	sxth	r1, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	3301      	adds	r3, #1
 8001274:	3318      	adds	r3, #24
 8001276:	443b      	add	r3, r7
 8001278:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800127c:	b21a      	sxth	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	4403      	add	r3, r0
 8001286:	430a      	orrs	r2, r1
 8001288:	b212      	sxth	r2, r2
 800128a:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3301      	adds	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2b02      	cmp	r3, #2
 8001296:	dde2      	ble.n	800125e <ICM_ReadAccel_RAW+0x2a>
    }
    return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <ICM_ReadGyro_RAW>:

HAL_StatusTypeDef ICM_ReadGyro_RAW(int16_t gyro_data[3]) {
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    HAL_StatusTypeDef ret = ICM_ReadRegs(ICM_REG_GYRO_XOUT_H, buf, 6);
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2206      	movs	r2, #6
 80012b0:	4619      	mov	r1, r3
 80012b2:	2025      	movs	r0, #37	@ 0x25
 80012b4:	f7ff ff02 	bl	80010bc <ICM_ReadRegs>
 80012b8:	4603      	mov	r3, r0
 80012ba:	74fb      	strb	r3, [r7, #19]
    if (ret != HAL_OK) return ret;
 80012bc:	7cfb      	ldrb	r3, [r7, #19]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <ICM_ReadGyro_RAW+0x24>
 80012c2:	7cfb      	ldrb	r3, [r7, #19]
 80012c4:	e020      	b.n	8001308 <ICM_ReadGyro_RAW+0x66>
    for (int i = 0; i < 3; i++) {
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e019      	b.n	8001300 <ICM_ReadGyro_RAW+0x5e>
        gyro_data[i] = ((int16_t)buf[2*i] << 8) | buf[2*i + 1];
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	3318      	adds	r3, #24
 80012d2:	443b      	add	r3, r7
 80012d4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b219      	sxth	r1, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	3301      	adds	r3, #1
 80012e2:	3318      	adds	r3, #24
 80012e4:	443b      	add	r3, r7
 80012e6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	4403      	add	r3, r0
 80012f4:	430a      	orrs	r2, r1
 80012f6:	b212      	sxth	r2, r2
 80012f8:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3301      	adds	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2b02      	cmp	r3, #2
 8001304:	dde2      	ble.n	80012cc <ICM_ReadGyro_RAW+0x2a>
    }
    return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <normalizeQuaternion>:
uint32_t last_update = 0; // время последнего обновления

/**
 * Нормализация кватерниона
 */
void normalizeQuaternion(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
    float norm = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8001316:	4b34      	ldr	r3, [pc, #208]	@ (80013e8 <normalizeQuaternion+0xd8>)
 8001318:	ed93 7a00 	vldr	s14, [r3]
 800131c:	4b32      	ldr	r3, [pc, #200]	@ (80013e8 <normalizeQuaternion+0xd8>)
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001326:	4b30      	ldr	r3, [pc, #192]	@ (80013e8 <normalizeQuaternion+0xd8>)
 8001328:	edd3 6a01 	vldr	s13, [r3, #4]
 800132c:	4b2e      	ldr	r3, [pc, #184]	@ (80013e8 <normalizeQuaternion+0xd8>)
 800132e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001336:	ee37 7a27 	vadd.f32	s14, s14, s15
 800133a:	4b2b      	ldr	r3, [pc, #172]	@ (80013e8 <normalizeQuaternion+0xd8>)
 800133c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001340:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <normalizeQuaternion+0xd8>)
 8001342:	edd3 7a02 	vldr	s15, [r3, #8]
 8001346:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800134a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800134e:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <normalizeQuaternion+0xd8>)
 8001350:	edd3 6a03 	vldr	s13, [r3, #12]
 8001354:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <normalizeQuaternion+0xd8>)
 8001356:	edd3 7a03 	vldr	s15, [r3, #12]
 800135a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001362:	eeb0 0a67 	vmov.f32	s0, s15
 8001366:	f013 f845 	bl	80143f4 <sqrtf>
 800136a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (norm > 0.0f) {
 800136e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137a:	dc00      	bgt.n	800137e <normalizeQuaternion+0x6e>
        q[0] *= norm;
        q[1] *= norm;
        q[2] *= norm;
        q[3] *= norm;
    }
}
 800137c:	e02f      	b.n	80013de <normalizeQuaternion+0xce>
        norm = 1.0f / norm;
 800137e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001382:	ed97 7a01 	vldr	s14, [r7, #4]
 8001386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138a:	edc7 7a01 	vstr	s15, [r7, #4]
        q[0] *= norm;
 800138e:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <normalizeQuaternion+0xd8>)
 8001390:	ed93 7a00 	vldr	s14, [r3]
 8001394:	edd7 7a01 	vldr	s15, [r7, #4]
 8001398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139c:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <normalizeQuaternion+0xd8>)
 800139e:	edc3 7a00 	vstr	s15, [r3]
        q[1] *= norm;
 80013a2:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <normalizeQuaternion+0xd8>)
 80013a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80013a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b0:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <normalizeQuaternion+0xd8>)
 80013b2:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] *= norm;
 80013b6:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <normalizeQuaternion+0xd8>)
 80013b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80013bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80013c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <normalizeQuaternion+0xd8>)
 80013c6:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] *= norm;
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <normalizeQuaternion+0xd8>)
 80013cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80013d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <normalizeQuaternion+0xd8>)
 80013da:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000000 	.word	0x20000000

080013ec <quaternionToEuler>:
 * Преобразование кватерниона в углы Эйлера
 * euler_angles[0] = roll (крен) - вращение вокруг X
 * euler_angles[1] = pitch (тангаж) - вращение вокруг Y
 * euler_angles[2] = yaw (рыскание) - вращение вокруг Z
 */
void quaternionToEuler(void) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
    // Преобразование кватерниона в углы Эйлера
    // roll (x-axis rotation)
    float sinr_cosp = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 80013f2:	4b58      	ldr	r3, [pc, #352]	@ (8001554 <quaternionToEuler+0x168>)
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	4b56      	ldr	r3, [pc, #344]	@ (8001554 <quaternionToEuler+0x168>)
 80013fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80013fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001402:	4b54      	ldr	r3, [pc, #336]	@ (8001554 <quaternionToEuler+0x168>)
 8001404:	edd3 6a02 	vldr	s13, [r3, #8]
 8001408:	4b52      	ldr	r3, [pc, #328]	@ (8001554 <quaternionToEuler+0x168>)
 800140a:	edd3 7a03 	vldr	s15, [r3, #12]
 800140e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800141a:	edc7 7a05 	vstr	s15, [r7, #20]
    float cosr_cosp = 1.0f - 2.0f * (q[1] * q[1] + q[2] * q[2]);
 800141e:	4b4d      	ldr	r3, [pc, #308]	@ (8001554 <quaternionToEuler+0x168>)
 8001420:	ed93 7a01 	vldr	s14, [r3, #4]
 8001424:	4b4b      	ldr	r3, [pc, #300]	@ (8001554 <quaternionToEuler+0x168>)
 8001426:	edd3 7a01 	vldr	s15, [r3, #4]
 800142a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800142e:	4b49      	ldr	r3, [pc, #292]	@ (8001554 <quaternionToEuler+0x168>)
 8001430:	edd3 6a02 	vldr	s13, [r3, #8]
 8001434:	4b47      	ldr	r3, [pc, #284]	@ (8001554 <quaternionToEuler+0x168>)
 8001436:	edd3 7a02 	vldr	s15, [r3, #8]
 800143a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001442:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001446:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800144a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144e:	edc7 7a04 	vstr	s15, [r7, #16]
    euler_angles[0] = atan2f(sinr_cosp, cosr_cosp);
 8001452:	edd7 0a04 	vldr	s1, [r7, #16]
 8001456:	ed97 0a05 	vldr	s0, [r7, #20]
 800145a:	f012 ffc9 	bl	80143f0 <atan2f>
 800145e:	eef0 7a40 	vmov.f32	s15, s0
 8001462:	4b3d      	ldr	r3, [pc, #244]	@ (8001558 <quaternionToEuler+0x16c>)
 8001464:	edc3 7a00 	vstr	s15, [r3]

    // pitch (y-axis rotation)
    float sinp = 2.0f * (q[0] * q[2] - q[3] * q[1]);
 8001468:	4b3a      	ldr	r3, [pc, #232]	@ (8001554 <quaternionToEuler+0x168>)
 800146a:	ed93 7a00 	vldr	s14, [r3]
 800146e:	4b39      	ldr	r3, [pc, #228]	@ (8001554 <quaternionToEuler+0x168>)
 8001470:	edd3 7a02 	vldr	s15, [r3, #8]
 8001474:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001478:	4b36      	ldr	r3, [pc, #216]	@ (8001554 <quaternionToEuler+0x168>)
 800147a:	edd3 6a03 	vldr	s13, [r3, #12]
 800147e:	4b35      	ldr	r3, [pc, #212]	@ (8001554 <quaternionToEuler+0x168>)
 8001480:	edd3 7a01 	vldr	s15, [r3, #4]
 8001484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001490:	edc7 7a03 	vstr	s15, [r7, #12]
    if (fabsf(sinp) >= 1.0f)
 8001494:	edd7 7a03 	vldr	s15, [r7, #12]
 8001498:	eef0 7ae7 	vabs.f32	s15, s15
 800149c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a8:	db0b      	blt.n	80014c2 <quaternionToEuler+0xd6>
        euler_angles[1] = copysignf(M_PI / 2.0f, sinp); // использовать 90 градусов, если sinp = ±1
 80014aa:	edd7 0a03 	vldr	s1, [r7, #12]
 80014ae:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800155c <quaternionToEuler+0x170>
 80014b2:	f00f f98d 	bl	80107d0 <copysignf>
 80014b6:	eef0 7a40 	vmov.f32	s15, s0
 80014ba:	4b27      	ldr	r3, [pc, #156]	@ (8001558 <quaternionToEuler+0x16c>)
 80014bc:	edc3 7a01 	vstr	s15, [r3, #4]
 80014c0:	e008      	b.n	80014d4 <quaternionToEuler+0xe8>
    else
        euler_angles[1] = asinf(sinp);
 80014c2:	ed97 0a03 	vldr	s0, [r7, #12]
 80014c6:	f012 ff67 	bl	8014398 <asinf>
 80014ca:	eef0 7a40 	vmov.f32	s15, s0
 80014ce:	4b22      	ldr	r3, [pc, #136]	@ (8001558 <quaternionToEuler+0x16c>)
 80014d0:	edc3 7a01 	vstr	s15, [r3, #4]

    // yaw (z-axis rotation)
    float siny_cosp = 2.0f * (q[0] * q[3] + q[1] * q[2]);
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <quaternionToEuler+0x168>)
 80014d6:	ed93 7a00 	vldr	s14, [r3]
 80014da:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <quaternionToEuler+0x168>)
 80014dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80014e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <quaternionToEuler+0x168>)
 80014e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <quaternionToEuler+0x168>)
 80014ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80014f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014fc:	edc7 7a02 	vstr	s15, [r7, #8]
    float cosy_cosp = 1.0f - 2.0f * (q[2] * q[2] + q[3] * q[3]);
 8001500:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <quaternionToEuler+0x168>)
 8001502:	ed93 7a02 	vldr	s14, [r3, #8]
 8001506:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <quaternionToEuler+0x168>)
 8001508:	edd3 7a02 	vldr	s15, [r3, #8]
 800150c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001510:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <quaternionToEuler+0x168>)
 8001512:	edd3 6a03 	vldr	s13, [r3, #12]
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <quaternionToEuler+0x168>)
 8001518:	edd3 7a03 	vldr	s15, [r3, #12]
 800151c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001528:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800152c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001530:	edc7 7a01 	vstr	s15, [r7, #4]
    euler_angles[2] = atan2f(siny_cosp, cosy_cosp);
 8001534:	edd7 0a01 	vldr	s1, [r7, #4]
 8001538:	ed97 0a02 	vldr	s0, [r7, #8]
 800153c:	f012 ff58 	bl	80143f0 <atan2f>
 8001540:	eef0 7a40 	vmov.f32	s15, s0
 8001544:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <quaternionToEuler+0x16c>)
 8001546:	edc3 7a02 	vstr	s15, [r3, #8]

    // Преобразование из радиан в градусы
//    euler_angles[0] *= RAD_TO_DEG;
//    euler_angles[1] *= RAD_TO_DEG;
//    euler_angles[2] *= RAD_TO_DEG;
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000000 	.word	0x20000000
 8001558:	20000364 	.word	0x20000364
 800155c:	3fc90fdb 	.word	0x3fc90fdb

08001560 <MadgwickAHRSupdate>:
 * Алгоритм фильтра Madgwick для объединения данных акселерометра и гироскопа
 * и обновления кватерниона ориентации
 * ax, ay, az - ускорения по осям X, Y, Z в g
 * gx, gy, gz - угловые скорости по осям X, Y, Z в рад/с
 */
void MadgwickAHRSupdate(float ax, float ay, float az, float gx, float gy, float gz) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b09e      	sub	sp, #120	@ 0x78
 8001564:	af00      	add	r7, sp, #0
 8001566:	ed87 0a05 	vstr	s0, [r7, #20]
 800156a:	edc7 0a04 	vstr	s1, [r7, #16]
 800156e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001572:	edc7 1a02 	vstr	s3, [r7, #8]
 8001576:	ed87 2a01 	vstr	s4, [r7, #4]
 800157a:	edc7 2a00 	vstr	s5, [r7]
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

    // Расчет дельты времени для интегрирования
    uint32_t now = HAL_GetTick();
 800157e:	f002 fefb 	bl	8004378 <HAL_GetTick>
 8001582:	6778      	str	r0, [r7, #116]	@ 0x74
    if (last_update == 0) {
 8001584:	4b03      	ldr	r3, [pc, #12]	@ (8001594 <MadgwickAHRSupdate+0x34>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <MadgwickAHRSupdate+0x38>
        last_update = now;
 800158c:	4a01      	ldr	r2, [pc, #4]	@ (8001594 <MadgwickAHRSupdate+0x34>)
 800158e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001590:	6013      	str	r3, [r2, #0]
        return;
 8001592:	e2d3      	b.n	8001b3c <MadgwickAHRSupdate+0x5dc>
 8001594:	20000374 	.word	0x20000374
    }
    //deltat = (now - last_update) / 1000.0f; // в секундах
    //deltat = (now - last_update) / 2160000.0f; // в секундах
    deltat = (now - last_update) / 1000.0f;
 8001598:	4be8      	ldr	r3, [pc, #928]	@ (800193c <MadgwickAHRSupdate+0x3dc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	ee07 3a90 	vmov	s15, r3
 80015a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015a8:	eddf 6ae5 	vldr	s13, [pc, #916]	@ 8001940 <MadgwickAHRSupdate+0x3e0>
 80015ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b0:	4be4      	ldr	r3, [pc, #912]	@ (8001944 <MadgwickAHRSupdate+0x3e4>)
 80015b2:	edc3 7a00 	vstr	s15, [r3]
    last_update = now;
 80015b6:	4ae1      	ldr	r2, [pc, #900]	@ (800193c <MadgwickAHRSupdate+0x3dc>)
 80015b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80015ba:	6013      	str	r3, [r2, #0]

    if ((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)) {
 80015bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80015c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c8:	d10e      	bne.n	80015e8 <MadgwickAHRSupdate+0x88>
 80015ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80015ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d6:	d107      	bne.n	80015e8 <MadgwickAHRSupdate+0x88>
 80015d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e4:	f000 82a9 	beq.w	8001b3a <MadgwickAHRSupdate+0x5da>
        return; // Предотвращение деления на ноль
    }

    // Скорость изменения кватерниона из угловой скорости
    qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 80015e8:	4bd7      	ldr	r3, [pc, #860]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 80015ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ee:	eeb1 7a67 	vneg.f32	s14, s15
 80015f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015fa:	4bd3      	ldr	r3, [pc, #844]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 80015fc:	edd3 6a02 	vldr	s13, [r3, #8]
 8001600:	edd7 7a01 	vldr	s15, [r7, #4]
 8001604:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001608:	ee37 7a67 	vsub.f32	s14, s14, s15
 800160c:	4bce      	ldr	r3, [pc, #824]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 800160e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001612:	edd7 7a00 	vldr	s15, [r7]
 8001616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800161a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001626:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    qDot2 = 0.5f * (q[0] * gx + q[2] * gz - q[3] * gy);
 800162a:	4bc7      	ldr	r3, [pc, #796]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 800162c:	ed93 7a00 	vldr	s14, [r3]
 8001630:	edd7 7a02 	vldr	s15, [r7, #8]
 8001634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001638:	4bc3      	ldr	r3, [pc, #780]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 800163a:	edd3 6a02 	vldr	s13, [r3, #8]
 800163e:	edd7 7a00 	vldr	s15, [r7]
 8001642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800164a:	4bbf      	ldr	r3, [pc, #764]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 800164c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001650:	edd7 7a01 	vldr	s15, [r7, #4]
 8001654:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001664:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    qDot3 = 0.5f * (q[0] * gy - q[1] * gz + q[3] * gx);
 8001668:	4bb7      	ldr	r3, [pc, #732]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 800166a:	ed93 7a00 	vldr	s14, [r3]
 800166e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001676:	4bb4      	ldr	r3, [pc, #720]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 8001678:	edd3 6a01 	vldr	s13, [r3, #4]
 800167c:	edd7 7a00 	vldr	s15, [r7]
 8001680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001688:	4baf      	ldr	r3, [pc, #700]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 800168a:	edd3 6a03 	vldr	s13, [r3, #12]
 800168e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800169e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a2:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    qDot4 = 0.5f * (q[0] * gz + q[1] * gy - q[2] * gx);
 80016a6:	4ba8      	ldr	r3, [pc, #672]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 80016a8:	ed93 7a00 	vldr	s14, [r3]
 80016ac:	edd7 7a00 	vldr	s15, [r7]
 80016b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016b4:	4ba4      	ldr	r3, [pc, #656]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 80016b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80016ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80016be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c6:	4ba0      	ldr	r3, [pc, #640]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 80016c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80016cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80016d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80016dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e0:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64

    // Вычисление градиента
    // Вспомогательные переменные для избежания повторных вычислений
    _2q0 = 2.0f * q[0];
 80016e4:	4b98      	ldr	r3, [pc, #608]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ee:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    _2q1 = 2.0f * q[1];
 80016f2:	4b95      	ldr	r3, [pc, #596]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 80016f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80016f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016fc:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    _2q2 = 2.0f * q[2];
 8001700:	4b91      	ldr	r3, [pc, #580]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 8001702:	edd3 7a02 	vldr	s15, [r3, #8]
 8001706:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800170a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    _2q3 = 2.0f * q[3];
 800170e:	4b8e      	ldr	r3, [pc, #568]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 8001710:	edd3 7a03 	vldr	s15, [r3, #12]
 8001714:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001718:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    _4q0 = 4.0f * q[0];
 800171c:	4b8a      	ldr	r3, [pc, #552]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    _4q1 = 4.0f * q[1];
 800172e:	4b86      	ldr	r3, [pc, #536]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 8001730:	edd3 7a01 	vldr	s15, [r3, #4]
 8001734:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    _4q2 = 4.0f * q[2];
 8001740:	4b81      	ldr	r3, [pc, #516]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 8001742:	edd3 7a02 	vldr	s15, [r3, #8]
 8001746:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800174a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800174e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    _8q1 = 8.0f * q[1];
 8001752:	4b7d      	ldr	r3, [pc, #500]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 8001754:	edd3 7a01 	vldr	s15, [r3, #4]
 8001758:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800175c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001760:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    _8q2 = 8.0f * q[2];
 8001764:	4b78      	ldr	r3, [pc, #480]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 8001766:	edd3 7a02 	vldr	s15, [r3, #8]
 800176a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800176e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001772:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    q0q0 = q[0] * q[0];
 8001776:	4b74      	ldr	r3, [pc, #464]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 8001778:	ed93 7a00 	vldr	s14, [r3]
 800177c:	4b72      	ldr	r3, [pc, #456]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001786:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    q1q1 = q[1] * q[1];
 800178a:	4b6f      	ldr	r3, [pc, #444]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 800178c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001790:	4b6d      	ldr	r3, [pc, #436]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 8001792:	edd3 7a01 	vldr	s15, [r3, #4]
 8001796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    q2q2 = q[2] * q[2];
 800179e:	4b6a      	ldr	r3, [pc, #424]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 80017a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80017a4:	4b68      	ldr	r3, [pc, #416]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 80017a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    q3q3 = q[3] * q[3];
 80017b2:	4b65      	ldr	r3, [pc, #404]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 80017b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80017b8:	4b63      	ldr	r3, [pc, #396]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 80017ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80017be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Нормализация ускорения
    recipNorm = 1.0f / sqrtf(ax * ax + ay * ay + az * az);
 80017c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80017ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80017d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017da:	edd7 7a03 	vldr	s15, [r7, #12]
 80017de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ea:	f012 fe03 	bl	80143f4 <sqrtf>
 80017ee:	eeb0 7a40 	vmov.f32	s14, s0
 80017f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    ax *= recipNorm;
 80017fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001802:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180a:	edc7 7a05 	vstr	s15, [r7, #20]
    ay *= recipNorm;
 800180e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001812:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181a:	edc7 7a04 	vstr	s15, [r7, #16]
    az *= recipNorm;
 800181e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001822:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182a:	edc7 7a03 	vstr	s15, [r7, #12]

    // Градиент функции ошибки
    s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800182e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001832:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800183a:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800183e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001846:	ee37 7a27 	vadd.f32	s14, s14, s15
 800184a:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800184e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001856:	ee37 7a27 	vadd.f32	s14, s14, s15
 800185a:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800185e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001862:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800186a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q[1] - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800186e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001872:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800187a:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800187e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001886:	ee37 7a67 	vsub.f32	s14, s14, s15
 800188a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800188e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001892:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001896:	4b2c      	ldr	r3, [pc, #176]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 8001898:	edd3 7a01 	vldr	s15, [r3, #4]
 800189c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018a4:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80018a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018b4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80018b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018bc:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80018c0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80018c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018cc:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80018d0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018dc:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80018e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    s2 = 4.0f * q0q0 * q[2] + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80018f0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80018f4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80018f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <MadgwickAHRSupdate+0x3e8>)
 80018fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001906:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800190a:	edd7 7a05 	vldr	s15, [r7, #20]
 800190e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001912:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001916:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 800191a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800191e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001926:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800192a:	edd7 7a04 	vldr	s15, [r7, #16]
 800192e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001932:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001936:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800193a:	e007      	b.n	800194c <MadgwickAHRSupdate+0x3ec>
 800193c:	20000374 	.word	0x20000374
 8001940:	447a0000 	.word	0x447a0000
 8001944:	20000370 	.word	0x20000370
 8001948:	20000000 	.word	0x20000000
 800194c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001950:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001954:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001960:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001964:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001970:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001974:	edd7 7a03 	vldr	s15, [r7, #12]
 8001978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001980:	edc7 7a08 	vstr	s15, [r7, #32]
    s3 = 4.0f * q1q1 * q[3] - _2q1 * ax + 4.0f * q2q2 * q[3] - _2q2 * ay;
 8001984:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001988:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800198c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001990:	4b6c      	ldr	r3, [pc, #432]	@ (8001b44 <MadgwickAHRSupdate+0x5e4>)
 8001992:	edd3 7a03 	vldr	s15, [r3, #12]
 8001996:	ee27 7a27 	vmul.f32	s14, s14, s15
 800199a:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800199e:	edd7 7a05 	vldr	s15, [r7, #20]
 80019a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019aa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019ae:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80019b2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80019b6:	4b63      	ldr	r3, [pc, #396]	@ (8001b44 <MadgwickAHRSupdate+0x5e4>)
 80019b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80019bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019c4:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80019c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80019cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d4:	edc7 7a07 	vstr	s15, [r7, #28]

    // Нормализация градиента
    recipNorm = 1.0f / sqrtf(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 80019d8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80019dc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019e0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80019e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80019f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80019fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a04:	eeb0 0a67 	vmov.f32	s0, s15
 8001a08:	f012 fcf4 	bl	80143f4 <sqrtf>
 8001a0c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a18:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    s0 *= recipNorm;
 8001a1c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001a20:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a28:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    s1 *= recipNorm;
 8001a2c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001a30:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a38:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    s2 *= recipNorm;
 8001a3c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a40:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a48:	edc7 7a08 	vstr	s15, [r7, #32]
    s3 *= recipNorm;
 8001a4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a50:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	edc7 7a07 	vstr	s15, [r7, #28]

    // Применение обратной связи
    qDot1 -= BETA * s0;
 8001a5c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001a60:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001b48 <MadgwickAHRSupdate+0x5e8>
 8001a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a68:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a70:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    qDot2 -= BETA * s1;
 8001a74:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a78:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001b48 <MadgwickAHRSupdate+0x5e8>
 8001a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a80:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a88:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    qDot3 -= BETA * s2;
 8001a8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a90:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001b48 <MadgwickAHRSupdate+0x5e8>
 8001a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a98:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa0:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    qDot4 -= BETA * s3;
 8001aa4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aa8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001b48 <MadgwickAHRSupdate+0x5e8>
 8001aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab0:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab8:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64

    // Интегрирование для получения кватерниона
    q[0] += qDot1 * deltat;
 8001abc:	4b21      	ldr	r3, [pc, #132]	@ (8001b44 <MadgwickAHRSupdate+0x5e4>)
 8001abe:	ed93 7a00 	vldr	s14, [r3]
 8001ac2:	4b22      	ldr	r3, [pc, #136]	@ (8001b4c <MadgwickAHRSupdate+0x5ec>)
 8001ac4:	edd3 6a00 	vldr	s13, [r3]
 8001ac8:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b44 <MadgwickAHRSupdate+0x5e4>)
 8001ad6:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * deltat;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <MadgwickAHRSupdate+0x5e4>)
 8001adc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <MadgwickAHRSupdate+0x5ec>)
 8001ae2:	edd3 6a00 	vldr	s13, [r3]
 8001ae6:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af2:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <MadgwickAHRSupdate+0x5e4>)
 8001af4:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * deltat;
 8001af8:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <MadgwickAHRSupdate+0x5e4>)
 8001afa:	ed93 7a02 	vldr	s14, [r3, #8]
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <MadgwickAHRSupdate+0x5ec>)
 8001b00:	edd3 6a00 	vldr	s13, [r3]
 8001b04:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b10:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <MadgwickAHRSupdate+0x5e4>)
 8001b12:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * deltat;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <MadgwickAHRSupdate+0x5e4>)
 8001b18:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <MadgwickAHRSupdate+0x5ec>)
 8001b1e:	edd3 6a00 	vldr	s13, [r3]
 8001b22:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001b26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2e:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <MadgwickAHRSupdate+0x5e4>)
 8001b30:	edc3 7a03 	vstr	s15, [r3, #12]

    // Нормализация кватерниона
    normalizeQuaternion();
 8001b34:	f7ff fbec 	bl	8001310 <normalizeQuaternion>
 8001b38:	e000      	b.n	8001b3c <MadgwickAHRSupdate+0x5dc>
        return; // Предотвращение деления на ноль
 8001b3a:	bf00      	nop
}
 8001b3c:	3778      	adds	r7, #120	@ 0x78
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000
 8001b48:	3dcccccd 	.word	0x3dcccccd
 8001b4c:	20000370 	.word	0x20000370

08001b50 <ICM_ReadAccel>:

/**
 * Чтение данных акселерометра в физических единицах (g)
 */
HAL_StatusTypeDef ICM_ReadAccel(float accel_data[3]) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
    int16_t raw[3];
    HAL_StatusTypeDef ret = ICM_ReadAccel_RAW(raw);
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fb69 	bl	8001234 <ICM_ReadAccel_RAW>
 8001b62:	4603      	mov	r3, r0
 8001b64:	76fb      	strb	r3, [r7, #27]
    if (ret != HAL_OK) return ret;
 8001b66:	7efb      	ldrb	r3, [r7, #27]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <ICM_ReadAccel+0x20>
 8001b6c:	7efb      	ldrb	r3, [r7, #27]
 8001b6e:	e020      	b.n	8001bb2 <ICM_ReadAccel+0x62>

    // Масштабный коэффициент для ±16g (согласно документации ICM-42688-P)
    // При настройке ACCEL_CONFIG0 = 0x05 (диапазон ±16g)
    const float accel_scale = 1.0f / 2048.0f; // 16g / 32768 LSB
 8001b70:	f04f 5368 	mov.w	r3, #973078528	@ 0x3a000000
 8001b74:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < 3; i++) {
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e016      	b.n	8001baa <ICM_ReadAccel+0x5a>
        accel_data[i] = raw[i] * accel_scale;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	3320      	adds	r3, #32
 8001b82:	443b      	add	r3, r7
 8001b84:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	dde5      	ble.n	8001b7c <ICM_ReadAccel+0x2c>
    }

    return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <ICM_ReadGyro>:

/**
 * Чтение данных гироскопа в физических единицах (радиан/с)
 * С учетом калибровки, если она была выполнена
 */
HAL_StatusTypeDef ICM_ReadGyro(float gyro_data[3]) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
    int16_t raw[3];
    HAL_StatusTypeDef ret = ICM_ReadGyro_RAW(raw);
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fb6a 	bl	80012a2 <ICM_ReadGyro_RAW>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) return ret;
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <ICM_ReadGyro+0x20>
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	e037      	b.n	8001c4c <ICM_ReadGyro+0x90>

    // Масштабный коэффициент для ±2000dps (градусов в секунду)
    // При настройке GYRO_CONFIG0 = 0x07 (диапазон ±2000dps)
    const float gyro_scale = 1.0f / 16.384f; // в градусах/с
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <ICM_ReadGyro+0x98>)
 8001bde:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < 3; i++) {
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	e02e      	b.n	8001c44 <ICM_ReadGyro+0x88>
        // Преобразуем в град/с и вычитаем смещение (если калибровка выполнена)
        float gyro_deg_s = raw[i] * gyro_scale;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	3320      	adds	r3, #32
 8001bec:	443b      	add	r3, r7
 8001bee:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfa:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c02:	edc7 7a06 	vstr	s15, [r7, #24]
        if (is_calibrated) {
 8001c06:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <ICM_ReadGyro+0x9c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <ICM_ReadGyro+0x6a>
            gyro_deg_s -= gyro_bias[i]; // вычитаем смещение, рассчитанное при калибровке
 8001c0e:	4a13      	ldr	r2, [pc, #76]	@ (8001c5c <ICM_ReadGyro+0xa0>)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c22:	edc7 7a06 	vstr	s15, [r7, #24]
        }
        // Преобразуем в рад/с
        gyro_data[i] = gyro_deg_s * DEG_TO_RAD;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c32:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001c60 <ICM_ReadGyro+0xa4>
 8001c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3301      	adds	r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	ddcd      	ble.n	8001be6 <ICM_ReadGyro+0x2a>
    }

    return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3720      	adds	r7, #32
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	3d79ffff 	.word	0x3d79ffff
 8001c58:	20000360 	.word	0x20000360
 8001c5c:	20000354 	.word	0x20000354
 8001c60:	3c8efa35 	.word	0x3c8efa35

08001c64 <ICM_UpdateEulerAngles>:

/**
 * Обновление углов Эйлера на основе последних данных датчика
 */
HAL_StatusTypeDef ICM_UpdateEulerAngles(void) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
    float accel[3];
    float gyro[3];

    // Чтение данных с датчика
    if (ICM_ReadAccel(accel) != HAL_OK) return HAL_ERROR;
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff6e 	bl	8001b50 <ICM_ReadAccel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <ICM_UpdateEulerAngles+0x1a>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e025      	b.n	8001cca <ICM_UpdateEulerAngles+0x66>
    if (ICM_ReadGyro(gyro) != HAL_OK) return HAL_ERROR;
 8001c7e:	463b      	mov	r3, r7
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff9b 	bl	8001bbc <ICM_ReadGyro>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <ICM_UpdateEulerAngles+0x2c>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e01c      	b.n	8001cca <ICM_UpdateEulerAngles+0x66>

    // Обновление кватерниона с использованием фильтра Madgwick
    MadgwickAHRSupdate(accel[0], accel[1], accel[2], gyro[0], gyro[1], gyro[2]);
 8001c90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c94:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c98:	edd7 6a05 	vldr	s13, [r7, #20]
 8001c9c:	ed97 6a00 	vldr	s12, [r7]
 8001ca0:	edd7 5a01 	vldr	s11, [r7, #4]
 8001ca4:	ed97 5a02 	vldr	s10, [r7, #8]
 8001ca8:	eef0 2a45 	vmov.f32	s5, s10
 8001cac:	eeb0 2a65 	vmov.f32	s4, s11
 8001cb0:	eef0 1a46 	vmov.f32	s3, s12
 8001cb4:	eeb0 1a66 	vmov.f32	s2, s13
 8001cb8:	eef0 0a47 	vmov.f32	s1, s14
 8001cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc0:	f7ff fc4e 	bl	8001560 <MadgwickAHRSupdate>

    // Преобразование кватерниона в углы Эйлера
    quaternionToEuler();
 8001cc4:	f7ff fb92 	bl	80013ec <quaternionToEuler>

    return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <ICM_GetEulerAngles>:
 * Получение текущих углов Эйлера
 * angles[0] = roll (крен) - вращение вокруг X
 * angles[1] = pitch (тангаж) - вращение вокруг Y
 * angles[2] = yaw (рыскание) - вращение вокруг Z
 */
void ICM_GetEulerAngles(float angles[3]) {
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	e00c      	b.n	8001cfc <ICM_GetEulerAngles+0x28>
        angles[i] = euler_angles[i];
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	4909      	ldr	r1, [pc, #36]	@ (8001d10 <ICM_GetEulerAngles+0x3c>)
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	440a      	add	r2, r1
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	ddef      	ble.n	8001ce2 <ICM_GetEulerAngles+0xe>
    }
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	20000364 	.word	0x20000364

08001d14 <ICM_GetEulerAnglesDeg>:

void ICM_GetEulerAnglesDeg(float angles[3]) {
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	e012      	b.n	8001d48 <ICM_GetEulerAnglesDeg+0x34>
        angles[i] = euler_angles[i]*RAD_TO_DEG;
 8001d22:	4a0e      	ldr	r2, [pc, #56]	@ (8001d5c <ICM_GetEulerAnglesDeg+0x48>)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001d60 <ICM_GetEulerAnglesDeg+0x4c>
 8001d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3301      	adds	r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	dde9      	ble.n	8001d22 <ICM_GetEulerAnglesDeg+0xe>
    }
}
 8001d4e:	bf00      	nop
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	20000364 	.word	0x20000364
 8001d60:	42652ee1 	.word	0x42652ee1

08001d64 <ICM_ResetOrientation>:


/**
 * Сброс ориентации до исходного состояния
 */
void ICM_ResetOrientation(void) {
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
    q[0] = 1.0f;
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <ICM_ResetOrientation+0x4c>)
 8001d6a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d6e:	601a      	str	r2, [r3, #0]
    q[1] = 0.0f;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	@ (8001db0 <ICM_ResetOrientation+0x4c>)
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
    q[2] = 0.0f;
 8001d78:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <ICM_ResetOrientation+0x4c>)
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
    q[3] = 0.0f;
 8001d80:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <ICM_ResetOrientation+0x4c>)
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	60da      	str	r2, [r3, #12]

    euler_angles[0] = 0.0f;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <ICM_ResetOrientation+0x50>)
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
    euler_angles[1] = 0.0f;
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <ICM_ResetOrientation+0x50>)
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	605a      	str	r2, [r3, #4]
    euler_angles[2] = 0.0f;
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <ICM_ResetOrientation+0x50>)
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]

    last_update = 0;
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <ICM_ResetOrientation+0x54>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	20000000 	.word	0x20000000
 8001db4:	20000364 	.word	0x20000364
 8001db8:	20000374 	.word	0x20000374

08001dbc <ICM_CalibrateGyro>:
/**
 * Калибровка гироскопа - измерение и сохранение смещения (bias)
 * bias[3] - массив для возврата значений смещения в град/с
 * Также устанавливает глобальный флаг is_calibrated = 1
 */
void ICM_CalibrateGyro(float bias[3]) {
 8001dbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dc0:	b090      	sub	sp, #64	@ 0x40
 8001dc2:	af04      	add	r7, sp, #16
 8001dc4:	6078      	str	r0, [r7, #4]
    const int samples = 500;
 8001dc6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001dca:	61fb      	str	r3, [r7, #28]
    int32_t sum[3] = {0};
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]

    // Сброс текущего смещения перед калибровкой
    for (int j = 0; j < 3; j++) {
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ddc:	e009      	b.n	8001df2 <ICM_CalibrateGyro+0x36>
        gyro_bias[j] = 0.0f;
 8001dde:	4a49      	ldr	r2, [pc, #292]	@ (8001f04 <ICM_CalibrateGyro+0x148>)
 8001de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < 3; j++) {
 8001dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dee:	3301      	adds	r3, #1
 8001df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	ddf2      	ble.n	8001dde <ICM_CalibrateGyro+0x22>
    }
    is_calibrated = 0; // Временно отключаем учет калибровки
 8001df8:	4b43      	ldr	r3, [pc, #268]	@ (8001f08 <ICM_CalibrateGyro+0x14c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]

    int16_t raw[3];
    for (int i = 0; i < samples; i++) {
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e02:	e026      	b.n	8001e52 <ICM_CalibrateGyro+0x96>
        ICM_ReadGyro_RAW(raw);
 8001e04:	f107 0308 	add.w	r3, r7, #8
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fa4a 	bl	80012a2 <ICM_ReadGyro_RAW>
        for (int j = 0; j < 3; j++) {
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e12:	e015      	b.n	8001e40 <ICM_CalibrateGyro+0x84>
            sum[j] += raw[j];
 8001e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	3330      	adds	r3, #48	@ 0x30
 8001e1a:	443b      	add	r3, r7
 8001e1c:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	3330      	adds	r3, #48	@ 0x30
 8001e26:	443b      	add	r3, r7
 8001e28:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8001e2c:	441a      	add	r2, r3
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	3330      	adds	r3, #48	@ 0x30
 8001e34:	443b      	add	r3, r7
 8001e36:	f843 2c20 	str.w	r2, [r3, #-32]
        for (int j = 0; j < 3; j++) {
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	dde6      	ble.n	8001e14 <ICM_CalibrateGyro+0x58>
        }
        HAL_Delay(2);  // небольшая задержка между измерениями
 8001e46:	2002      	movs	r0, #2
 8001e48:	f002 faa2 	bl	8004390 <HAL_Delay>
    for (int i = 0; i < samples; i++) {
 8001e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e4e:	3301      	adds	r3, #1
 8001e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	dbd4      	blt.n	8001e04 <ICM_CalibrateGyro+0x48>
    }

    for (int j = 0; j < 3; j++) {
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
 8001e5e:	e027      	b.n	8001eb0 <ICM_CalibrateGyro+0xf4>
        bias[j] = sum[j] / (float)samples / 16.384f; // перевод в °/s
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	3330      	adds	r3, #48	@ 0x30
 8001e66:	443b      	add	r3, r7
 8001e68:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001f0c <ICM_CalibrateGyro+0x150>
 8001e8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e92:	edc3 7a00 	vstr	s15, [r3]
        gyro_bias[j] = bias[j]; // Сохраняем значения для использования внутри библиотеки
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4918      	ldr	r1, [pc, #96]	@ (8001f04 <ICM_CalibrateGyro+0x148>)
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < 3; j++) {
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	3301      	adds	r3, #1
 8001eae:	623b      	str	r3, [r7, #32]
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	ddd4      	ble.n	8001e60 <ICM_CalibrateGyro+0xa4>
    }

    is_calibrated = 1; // Устанавливаем флаг, что калибровка проведена
 8001eb6:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <ICM_CalibrateGyro+0x14c>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

    printf("Gyro calibration completed: bias[0]=%f, bias[1]=%f, bias[2]=%f deg/s\r\n",
           gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <ICM_CalibrateGyro+0x148>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
    printf("Gyro calibration completed: bias[0]=%f, bias[1]=%f, bias[2]=%f deg/s\r\n",
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fb79 	bl	80005b8 <__aeabi_f2d>
 8001ec6:	4680      	mov	r8, r0
 8001ec8:	4689      	mov	r9, r1
           gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <ICM_CalibrateGyro+0x148>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
    printf("Gyro calibration completed: bias[0]=%f, bias[1]=%f, bias[2]=%f deg/s\r\n",
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fb72 	bl	80005b8 <__aeabi_f2d>
 8001ed4:	4604      	mov	r4, r0
 8001ed6:	460d      	mov	r5, r1
           gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <ICM_CalibrateGyro+0x148>)
 8001eda:	689b      	ldr	r3, [r3, #8]
    printf("Gyro calibration completed: bias[0]=%f, bias[1]=%f, bias[2]=%f deg/s\r\n",
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fb6b 	bl	80005b8 <__aeabi_f2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001eea:	e9cd 4500 	strd	r4, r5, [sp]
 8001eee:	4642      	mov	r2, r8
 8001ef0:	464b      	mov	r3, r9
 8001ef2:	4807      	ldr	r0, [pc, #28]	@ (8001f10 <ICM_CalibrateGyro+0x154>)
 8001ef4:	f00e f9ee 	bl	80102d4 <iprintf>
}
 8001ef8:	bf00      	nop
 8001efa:	3730      	adds	r7, #48	@ 0x30
 8001efc:	46bd      	mov	sp, r7
 8001efe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f02:	bf00      	nop
 8001f04:	20000354 	.word	0x20000354
 8001f08:	20000360 	.word	0x20000360
 8001f0c:	4183126f 	.word	0x4183126f
 8001f10:	08015494 	.word	0x08015494

08001f14 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USB_CDC_RxHandler(uint8_t*, uint32_t);
int _write(int file, char *ptr, int len) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*) ptr, len); return len;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	4619      	mov	r1, r3
 8001f26:	68b8      	ldr	r0, [r7, #8]
 8001f28:	f00c fd1c 	bl	800e964 <CDC_Transmit_FS>
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <SetMotorOutputs>:
void SetMotorOutputs(uint16_t ch1, uint16_t ch2, uint16_t ch3, uint16_t ch4)
{
 8001f38:	b490      	push	{r4, r7}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4604      	mov	r4, r0
 8001f40:	4608      	mov	r0, r1
 8001f42:	4611      	mov	r1, r2
 8001f44:	461a      	mov	r2, r3
 8001f46:	4623      	mov	r3, r4
 8001f48:	80fb      	strh	r3, [r7, #6]
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	80bb      	strh	r3, [r7, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	807b      	strh	r3, [r7, #2]
 8001f52:	4613      	mov	r3, r2
 8001f54:	803b      	strh	r3, [r7, #0]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ch1);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <SetMotorOutputs+0x48>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	88fa      	ldrh	r2, [r7, #6]
 8001f5c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ch2);
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <SetMotorOutputs+0x48>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	88ba      	ldrh	r2, [r7, #4]
 8001f64:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ch3);
 8001f66:	4b07      	ldr	r3, [pc, #28]	@ (8001f84 <SetMotorOutputs+0x4c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ch4);
 8001f6e:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <SetMotorOutputs+0x50>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	883a      	ldrh	r2, [r7, #0]
 8001f74:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc90      	pop	{r4, r7}
 8001f7e:	4770      	bx	lr
 8001f80:	2000047c 	.word	0x2000047c
 8001f84:	200004c8 	.word	0x200004c8
 8001f88:	20000514 	.word	0x20000514

08001f8c <ArmESCs>:
void ArmESCs(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
    // Установить минимальный сигнал (обычно 1000 мкс) на все каналы
    SetMotorOutputs(1000, 1000, 1000, 1000);
 8001f90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f98:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fa0:	f7ff ffca 	bl	8001f38 <SetMotorOutputs>
    // Подождать, чтобы ESC успели проинициализироваться
    HAL_Delay(2000);  // Задержка 2 секунды
 8001fa4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001fa8:	f002 f9f2 	bl	8004390 <HAL_Delay>
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <performLanding>:
void stopMotors(void){
  //SetMotorOutputs(dc, dc, dc, dc);
	// Сбрасываем и ждём
	SetMotorOutputs(1000, 1000, 1000, 1000);
}
void performLanding(void) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
  static uint32_t landingTimer = 0;
  static uint16_t currentThrottle = 0;

  // При первом входе в режим приземления
  if (!landingInProgress) {
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8002070 <performLanding+0xc0>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10e      	bne.n	8001fde <performLanding+0x2e>
    landingInProgress = 1;
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <performLanding+0xc0>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
    landingTimer = HAL_GetTick();
 8001fc6:	f002 f9d7 	bl	8004378 <HAL_GetTick>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4a29      	ldr	r2, [pc, #164]	@ (8002074 <performLanding+0xc4>)
 8001fce:	6013      	str	r3, [r2, #0]
    // Предполагаем, что текущая мощность моторов около 1200
    currentThrottle = 1200;
 8001fd0:	4b29      	ldr	r3, [pc, #164]	@ (8002078 <performLanding+0xc8>)
 8001fd2:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8001fd6:	801a      	strh	r2, [r3, #0]
    printf("LANDING STARTED\r\n");
 8001fd8:	4828      	ldr	r0, [pc, #160]	@ (800207c <performLanding+0xcc>)
 8001fda:	f00e f9e3 	bl	80103a4 <puts>
  }

  // Постепенно уменьшаем мощность моторов в течение 5 секунд
  uint32_t elapsedTime = HAL_GetTick() - landingTimer;
 8001fde:	f002 f9cb 	bl	8004378 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	4b23      	ldr	r3, [pc, #140]	@ (8002074 <performLanding+0xc4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	607b      	str	r3, [r7, #4]
  if (elapsedTime < 5000) {
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d825      	bhi.n	8002042 <performLanding+0x92>
    // Линейное снижение от currentThrottle до 1000 за 5 секунд
    uint16_t newThrottle = 1000 + (uint16_t)((float)(currentThrottle - 1000) * (1.0f - (float)elapsedTime / 5000.0f));
 8001ff6:	4b20      	ldr	r3, [pc, #128]	@ (8002078 <performLanding+0xc8>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001ffe:	ee07 3a90 	vmov	s15, r3
 8002002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002010:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 8002080 <performLanding+0xd0>
 8002014:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002018:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800201c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002028:	ee17 3a90 	vmov	r3, s15
 800202c:	b29b      	uxth	r3, r3
 800202e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002032:	807b      	strh	r3, [r7, #2]
    SetMotorOutputs(newThrottle, newThrottle, newThrottle, newThrottle);
 8002034:	887b      	ldrh	r3, [r7, #2]
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	8879      	ldrh	r1, [r7, #2]
 800203a:	8878      	ldrh	r0, [r7, #2]
 800203c:	f7ff ff7c 	bl	8001f38 <SetMotorOutputs>
    SetMotorOutputs(1000, 1000, 1000, 1000);
    landingInProgress = 0;
    currentState = DRONE_STATE_IDLE;
    printf("LANDING COMPLETE\r\n");
  }
}
 8002040:	e012      	b.n	8002068 <performLanding+0xb8>
    SetMotorOutputs(1000, 1000, 1000, 1000);
 8002042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002046:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800204a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800204e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002052:	f7ff ff71 	bl	8001f38 <SetMotorOutputs>
    landingInProgress = 0;
 8002056:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <performLanding+0xc0>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
    currentState = DRONE_STATE_IDLE;
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <performLanding+0xd4>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
    printf("LANDING COMPLETE\r\n");
 8002062:	4809      	ldr	r0, [pc, #36]	@ (8002088 <performLanding+0xd8>)
 8002064:	f00e f99e 	bl	80103a4 <puts>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000380 	.word	0x20000380
 8002074:	20000768 	.word	0x20000768
 8002078:	2000076c 	.word	0x2000076c
 800207c:	080154dc 	.word	0x080154dc
 8002080:	459c4000 	.word	0x459c4000
 8002084:	20000378 	.word	0x20000378
 8002088:	080154f0 	.word	0x080154f0

0800208c <performTestCycle>:

// Функция выполнения тестового цикла с возможностью прерывания
void performTestCycle(void) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
  static uint16_t currentDC = 1000;
  static uint8_t increasing = 1;
  static uint32_t lastUpdate = 0;

  // Проверяем, не поступило ли запроса на смену состояния
  if (requestedState != currentState) {
 8002092:	4b2d      	ldr	r3, [pc, #180]	@ (8002148 <performTestCycle+0xbc>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b2c      	ldr	r3, [pc, #176]	@ (800214c <performTestCycle+0xc0>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	429a      	cmp	r2, r3
 80020a0:	d14d      	bne.n	800213e <performTestCycle+0xb2>
    // Прерываем текущее выполнение
    return;
  }

  uint32_t now = HAL_GetTick();
 80020a2:	f002 f969 	bl	8004378 <HAL_GetTick>
 80020a6:	6078      	str	r0, [r7, #4]
  // Обновляем сигнал с частотой примерно 12.5 Гц (80 мс)
  if (now - lastUpdate >= 80) {
 80020a8:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <performTestCycle+0xc4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b4f      	cmp	r3, #79	@ 0x4f
 80020b2:	d945      	bls.n	8002140 <performTestCycle+0xb4>
    lastUpdate = now;
 80020b4:	4a26      	ldr	r2, [pc, #152]	@ (8002150 <performTestCycle+0xc4>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6013      	str	r3, [r2, #0]

    if (increasing) {
 80020ba:	4b26      	ldr	r3, [pc, #152]	@ (8002154 <performTestCycle+0xc8>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d010      	beq.n	80020e4 <performTestCycle+0x58>
      currentDC += 2;
 80020c2:	4b25      	ldr	r3, [pc, #148]	@ (8002158 <performTestCycle+0xcc>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	3302      	adds	r3, #2
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <performTestCycle+0xcc>)
 80020cc:	801a      	strh	r2, [r3, #0]
      if (currentDC >= requested_speed)
 80020ce:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <performTestCycle+0xcc>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b21      	ldr	r3, [pc, #132]	@ (800215c <performTestCycle+0xd0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	db25      	blt.n	8002128 <performTestCycle+0x9c>
        increasing = 0;
 80020dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002154 <performTestCycle+0xc8>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
 80020e2:	e021      	b.n	8002128 <performTestCycle+0x9c>
    } else {
      currentDC -= 2;
 80020e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <performTestCycle+0xcc>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	3b02      	subs	r3, #2
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <performTestCycle+0xcc>)
 80020ee:	801a      	strh	r2, [r3, #0]
      if (currentDC <= 1020) {
 80020f0:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <performTestCycle+0xcc>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	f5b3 7f7f 	cmp.w	r3, #1020	@ 0x3fc
 80020f8:	d816      	bhi.n	8002128 <performTestCycle+0x9c>
        increasing = 1;
 80020fa:	4b16      	ldr	r3, [pc, #88]	@ (8002154 <performTestCycle+0xc8>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
        // Цикл завершен, можно перейти в режим ожидания
        currentState = DRONE_STATE_IDLE;
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <performTestCycle+0xc0>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
        requestedState = DRONE_STATE_IDLE;
 8002106:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <performTestCycle+0xbc>)
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
        SetMotorOutputs(1000, 1000, 1000, 1000);
 800210c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002110:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002114:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002118:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800211c:	f7ff ff0c 	bl	8001f38 <SetMotorOutputs>
        printf("TEST CYCLE COMPLETE\r\n");
 8002120:	480f      	ldr	r0, [pc, #60]	@ (8002160 <performTestCycle+0xd4>)
 8002122:	f00e f93f 	bl	80103a4 <puts>
        return;
 8002126:	e00b      	b.n	8002140 <performTestCycle+0xb4>
      }
    }

    SetMotorOutputs(currentDC, currentDC, currentDC, currentDC);
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <performTestCycle+0xcc>)
 800212a:	8818      	ldrh	r0, [r3, #0]
 800212c:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <performTestCycle+0xcc>)
 800212e:	8819      	ldrh	r1, [r3, #0]
 8002130:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <performTestCycle+0xcc>)
 8002132:	881a      	ldrh	r2, [r3, #0]
 8002134:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <performTestCycle+0xcc>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	f7ff fefe 	bl	8001f38 <SetMotorOutputs>
 800213c:	e000      	b.n	8002140 <performTestCycle+0xb4>
    return;
 800213e:	bf00      	nop
  }
}
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000379 	.word	0x20000379
 800214c:	20000378 	.word	0x20000378
 8002150:	20000770 	.word	0x20000770
 8002154:	20000060 	.word	0x20000060
 8002158:	20000062 	.word	0x20000062
 800215c:	20000040 	.word	0x20000040
 8002160:	08015504 	.word	0x08015504

08002164 <performLQRStable>:


void performLQRStable(void) {
 8002164:	b580      	push	{r7, lr}
 8002166:	ed2d 8b02 	vpush	{d8}
 800216a:	b09c      	sub	sp, #112	@ 0x70
 800216c:	af02      	add	r7, sp, #8
  float LQR_SPEED[4] = {0, 0, 0, 0};
 800216e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	60da      	str	r2, [r3, #12]

  // Проверяем, не поступило ли запроса на смену состояния
  if (requestedState != currentState) {
 800217c:	4b81      	ldr	r3, [pc, #516]	@ (8002384 <performLQRStable+0x220>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b81      	ldr	r3, [pc, #516]	@ (8002388 <performLQRStable+0x224>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	429a      	cmp	r2, r3
 800218a:	f040 82f6 	bne.w	800277a <performLQRStable+0x616>
    // Прерываем текущее выполнение
    return;
  }
  uint32_t now = HAL_GetTick();
 800218e:	f002 f8f3 	bl	8004378 <HAL_GetTick>
 8002192:	65f8      	str	r0, [r7, #92]	@ 0x5c
  //if (timer_lqr<now){
  if (timer_lqr<now && now < timer_lqr + 60000){
 8002194:	4b7d      	ldr	r3, [pc, #500]	@ (800238c <performLQRStable+0x228>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800219a:	429a      	cmp	r2, r3
 800219c:	f240 82e2 	bls.w	8002764 <performLQRStable+0x600>
 80021a0:	4b7a      	ldr	r3, [pc, #488]	@ (800238c <performLQRStable+0x228>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80021a8:	4413      	add	r3, r2
 80021aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80021ac:	429a      	cmp	r2, r3
 80021ae:	f080 82d9 	bcs.w	8002764 <performLQRStable+0x600>
  //if (timer_lqr<now){
	  float nu[6];
	  float g = 1.81f;
 80021b2:	4b77      	ldr	r3, [pc, #476]	@ (8002390 <performLQRStable+0x22c>)
 80021b4:	65bb      	str	r3, [r7, #88]	@ 0x58
	  nu[0] = -k1*(pos[0]-pos_req[0])-k2*speed[0];
 80021b6:	4b77      	ldr	r3, [pc, #476]	@ (8002394 <performLQRStable+0x230>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	eeb1 7a67 	vneg.f32	s14, s15
 80021c0:	4b75      	ldr	r3, [pc, #468]	@ (8002398 <performLQRStable+0x234>)
 80021c2:	edd3 6a00 	vldr	s13, [r3]
 80021c6:	4b75      	ldr	r3, [pc, #468]	@ (800239c <performLQRStable+0x238>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021d4:	4b72      	ldr	r3, [pc, #456]	@ (80023a0 <performLQRStable+0x23c>)
 80021d6:	edd3 6a00 	vldr	s13, [r3]
 80021da:	4b72      	ldr	r3, [pc, #456]	@ (80023a4 <performLQRStable+0x240>)
 80021dc:	edd3 7a00 	vldr	s15, [r3]
 80021e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	  nu[1] = -k3*(pos[1]-pos_req[1])-k4*speed[1];
 80021ec:	4b6e      	ldr	r3, [pc, #440]	@ (80023a8 <performLQRStable+0x244>)
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	eeb1 7a67 	vneg.f32	s14, s15
 80021f6:	4b68      	ldr	r3, [pc, #416]	@ (8002398 <performLQRStable+0x234>)
 80021f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80021fc:	4b67      	ldr	r3, [pc, #412]	@ (800239c <performLQRStable+0x238>)
 80021fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002202:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800220a:	4b65      	ldr	r3, [pc, #404]	@ (80023a0 <performLQRStable+0x23c>)
 800220c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002210:	4b66      	ldr	r3, [pc, #408]	@ (80023ac <performLQRStable+0x248>)
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800221e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	  nu[2] = -k5*(pos[2]-pos_req[2])-k6*speed[2];
 8002222:	4b63      	ldr	r3, [pc, #396]	@ (80023b0 <performLQRStable+0x24c>)
 8002224:	edd3 7a00 	vldr	s15, [r3]
 8002228:	eeb1 7a67 	vneg.f32	s14, s15
 800222c:	4b5a      	ldr	r3, [pc, #360]	@ (8002398 <performLQRStable+0x234>)
 800222e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002232:	4b5a      	ldr	r3, [pc, #360]	@ (800239c <performLQRStable+0x238>)
 8002234:	edd3 7a02 	vldr	s15, [r3, #8]
 8002238:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800223c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002240:	4b57      	ldr	r3, [pc, #348]	@ (80023a0 <performLQRStable+0x23c>)
 8002242:	edd3 6a02 	vldr	s13, [r3, #8]
 8002246:	4b5b      	ldr	r3, [pc, #364]	@ (80023b4 <performLQRStable+0x250>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002254:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	  nu[5] = -k11*angles_rad[2]-k12*angles_speed[2];
 8002258:	4b57      	ldr	r3, [pc, #348]	@ (80023b8 <performLQRStable+0x254>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	eeb1 7a67 	vneg.f32	s14, s15
 8002262:	4b56      	ldr	r3, [pc, #344]	@ (80023bc <performLQRStable+0x258>)
 8002264:	edd3 7a02 	vldr	s15, [r3, #8]
 8002268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800226c:	4b54      	ldr	r3, [pc, #336]	@ (80023c0 <performLQRStable+0x25c>)
 800226e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002272:	4b54      	ldr	r3, [pc, #336]	@ (80023c4 <performLQRStable+0x260>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002280:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	  //uint32_t now = HAL_GetTick();
	  float bar_theta = atan2f(nu[0], (nu[2] + g));
 8002284:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002288:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800228c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002294:	eef0 0a67 	vmov.f32	s1, s15
 8002298:	eeb0 0a66 	vmov.f32	s0, s13
 800229c:	f012 f8a8 	bl	80143f0 <atan2f>
 80022a0:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
	  float bar_phi = atan2f(nu[1], (nu[2] + g));
 80022a4:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80022a8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80022ac:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80022b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b4:	eef0 0a67 	vmov.f32	s1, s15
 80022b8:	eeb0 0a66 	vmov.f32	s0, s13
 80022bc:	f012 f898 	bl	80143f0 <atan2f>
 80022c0:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50

	  nu[3] = -k7*(angles_rad[0]-bar_phi)-k8*angles_speed[0];
 80022c4:	4b40      	ldr	r3, [pc, #256]	@ (80023c8 <performLQRStable+0x264>)
 80022c6:	edd3 7a00 	vldr	s15, [r3]
 80022ca:	eeb1 7a67 	vneg.f32	s14, s15
 80022ce:	4b3b      	ldr	r3, [pc, #236]	@ (80023bc <performLQRStable+0x258>)
 80022d0:	edd3 6a00 	vldr	s13, [r3]
 80022d4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80022d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e0:	4b37      	ldr	r3, [pc, #220]	@ (80023c0 <performLQRStable+0x25c>)
 80022e2:	edd3 6a00 	vldr	s13, [r3]
 80022e6:	4b39      	ldr	r3, [pc, #228]	@ (80023cc <performLQRStable+0x268>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	  nu[4] = -k9*(angles_rad[1]-bar_theta)-k10*angles_speed[1];
 80022f8:	4b35      	ldr	r3, [pc, #212]	@ (80023d0 <performLQRStable+0x26c>)
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	eeb1 7a67 	vneg.f32	s14, s15
 8002302:	4b2e      	ldr	r3, [pc, #184]	@ (80023bc <performLQRStable+0x258>)
 8002304:	edd3 6a01 	vldr	s13, [r3, #4]
 8002308:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800230c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002314:	4b2a      	ldr	r3, [pc, #168]	@ (80023c0 <performLQRStable+0x25c>)
 8002316:	edd3 6a01 	vldr	s13, [r3, #4]
 800231a:	4b2e      	ldr	r3, [pc, #184]	@ (80023d4 <performLQRStable+0x270>)
 800231c:	edd3 7a00 	vldr	s15, [r3]
 8002320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002328:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	  float U[4];
	  if ((fabsf(cosf(bar_phi)) < 0.00001f) || (fabsf(cosf(bar_theta)) < 0.00001f)) {
 800232c:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 8002330:	f012 f87e 	bl	8014430 <cosf>
 8002334:	eef0 7a40 	vmov.f32	s15, s0
 8002338:	eef0 7ae7 	vabs.f32	s15, s15
 800233c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80023d8 <performLQRStable+0x274>
 8002340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002348:	d40e      	bmi.n	8002368 <performLQRStable+0x204>
 800234a:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 800234e:	f012 f86f 	bl	8014430 <cosf>
 8002352:	eef0 7a40 	vmov.f32	s15, s0
 8002356:	eef0 7ae7 	vabs.f32	s15, s15
 800235a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80023d8 <performLQRStable+0x274>
 800235e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002366:	d53b      	bpl.n	80023e0 <performLQRStable+0x27c>
	      printf("ERROR: Division by zero in U[0] calculation\r\n");
 8002368:	481c      	ldr	r0, [pc, #112]	@ (80023dc <performLQRStable+0x278>)
 800236a:	f00e f81b 	bl	80103a4 <puts>
	      SetMotorOutputs(1100, 1100, 1100, 1100);
 800236e:	f240 434c 	movw	r3, #1100	@ 0x44c
 8002372:	f240 424c 	movw	r2, #1100	@ 0x44c
 8002376:	f240 414c 	movw	r1, #1100	@ 0x44c
 800237a:	f240 404c 	movw	r0, #1100	@ 0x44c
 800237e:	f7ff fddb 	bl	8001f38 <SetMotorOutputs>
	      return;
 8002382:	e1fb      	b.n	800277c <performLQRStable+0x618>
 8002384:	20000379 	.word	0x20000379
 8002388:	20000378 	.word	0x20000378
 800238c:	20000414 	.word	0x20000414
 8002390:	3fe7ae14 	.word	0x3fe7ae14
 8002394:	20000018 	.word	0x20000018
 8002398:	200003c8 	.word	0x200003c8
 800239c:	200003e0 	.word	0x200003e0
 80023a0:	200003ec 	.word	0x200003ec
 80023a4:	2000001c 	.word	0x2000001c
 80023a8:	20000020 	.word	0x20000020
 80023ac:	20000024 	.word	0x20000024
 80023b0:	20000028 	.word	0x20000028
 80023b4:	2000002c 	.word	0x2000002c
 80023b8:	200003f8 	.word	0x200003f8
 80023bc:	20000398 	.word	0x20000398
 80023c0:	200003b0 	.word	0x200003b0
 80023c4:	200003fc 	.word	0x200003fc
 80023c8:	20000030 	.word	0x20000030
 80023cc:	20000034 	.word	0x20000034
 80023d0:	20000038 	.word	0x20000038
 80023d4:	2000003c 	.word	0x2000003c
 80023d8:	3727c5ac 	.word	0x3727c5ac
 80023dc:	0801551c 	.word	0x0801551c
	  }
	  U[0] = m*(nu[2]+g)/(cosf(bar_phi)*cosf(bar_theta));
 80023e0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80023e4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80023e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ec:	4bab      	ldr	r3, [pc, #684]	@ (800269c <performLQRStable+0x538>)
 80023ee:	edd3 7a00 	vldr	s15, [r3]
 80023f2:	ee27 8a27 	vmul.f32	s16, s14, s15
 80023f6:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 80023fa:	f012 f819 	bl	8014430 <cosf>
 80023fe:	eef0 8a40 	vmov.f32	s17, s0
 8002402:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8002406:	f012 f813 	bl	8014430 <cosf>
 800240a:	eef0 7a40 	vmov.f32	s15, s0
 800240e:	ee28 7aa7 	vmul.f32	s14, s17, s15
 8002412:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002416:	edc7 7a05 	vstr	s15, [r7, #20]
	  U[1] = Ix*nu[3]-(Iy-Iz)*angles_speed[1]*angles_speed[2];
 800241a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800241e:	4ba0      	ldr	r3, [pc, #640]	@ (80026a0 <performLQRStable+0x53c>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002428:	4b9e      	ldr	r3, [pc, #632]	@ (80026a4 <performLQRStable+0x540>)
 800242a:	edd3 6a00 	vldr	s13, [r3]
 800242e:	4b9e      	ldr	r3, [pc, #632]	@ (80026a8 <performLQRStable+0x544>)
 8002430:	edd3 7a00 	vldr	s15, [r3]
 8002434:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002438:	4b9c      	ldr	r3, [pc, #624]	@ (80026ac <performLQRStable+0x548>)
 800243a:	edd3 7a01 	vldr	s15, [r3, #4]
 800243e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002442:	4b9a      	ldr	r3, [pc, #616]	@ (80026ac <performLQRStable+0x548>)
 8002444:	edd3 7a02 	vldr	s15, [r3, #8]
 8002448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800244c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002450:	edc7 7a06 	vstr	s15, [r7, #24]
	  U[2] = Iy*nu[4]-(Ix-Iz)*angles_speed[0]*angles_speed[2];
 8002454:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002458:	4b92      	ldr	r3, [pc, #584]	@ (80026a4 <performLQRStable+0x540>)
 800245a:	edd3 7a00 	vldr	s15, [r3]
 800245e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002462:	4b8f      	ldr	r3, [pc, #572]	@ (80026a0 <performLQRStable+0x53c>)
 8002464:	edd3 6a00 	vldr	s13, [r3]
 8002468:	4b8f      	ldr	r3, [pc, #572]	@ (80026a8 <performLQRStable+0x544>)
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002472:	4b8e      	ldr	r3, [pc, #568]	@ (80026ac <performLQRStable+0x548>)
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800247c:	4b8b      	ldr	r3, [pc, #556]	@ (80026ac <performLQRStable+0x548>)
 800247e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800248a:	edc7 7a07 	vstr	s15, [r7, #28]
	  U[3] = Iz*nu[5]-(Ix-Iy)*angles_speed[0]*angles_speed[1];
 800248e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002492:	4b85      	ldr	r3, [pc, #532]	@ (80026a8 <performLQRStable+0x544>)
 8002494:	edd3 7a00 	vldr	s15, [r3]
 8002498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800249c:	4b80      	ldr	r3, [pc, #512]	@ (80026a0 <performLQRStable+0x53c>)
 800249e:	edd3 6a00 	vldr	s13, [r3]
 80024a2:	4b80      	ldr	r3, [pc, #512]	@ (80026a4 <performLQRStable+0x540>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024ac:	4b7f      	ldr	r3, [pc, #508]	@ (80026ac <performLQRStable+0x548>)
 80024ae:	edd3 7a00 	vldr	s15, [r3]
 80024b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024b6:	4b7d      	ldr	r3, [pc, #500]	@ (80026ac <performLQRStable+0x548>)
 80024b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80024bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c4:	edc7 7a08 	vstr	s15, [r7, #32]
	  //printf("T: %f, t_phi: %f, t_theta: %f, t_psi: %f\r\n", U[0], U[1], U[2], U[3]);
	  float temps[4];
	  temps[0] = kf_inv*(U[0]-k_1_2_l*U[2])-U[3];
 80024c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80024cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80024d0:	4b77      	ldr	r3, [pc, #476]	@ (80026b0 <performLQRStable+0x54c>)
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024de:	4b75      	ldr	r3, [pc, #468]	@ (80026b4 <performLQRStable+0x550>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80024ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f0:	edc7 7a01 	vstr	s15, [r7, #4]
	  temps[1] = kf_inv*(U[0]-k_1_2_l*U[1])+U[3];
 80024f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80024f8:	edd7 6a06 	vldr	s13, [r7, #24]
 80024fc:	4b6c      	ldr	r3, [pc, #432]	@ (80026b0 <performLQRStable+0x54c>)
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800250a:	4b6a      	ldr	r3, [pc, #424]	@ (80026b4 <performLQRStable+0x550>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002514:	edd7 7a08 	vldr	s15, [r7, #32]
 8002518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251c:	edc7 7a02 	vstr	s15, [r7, #8]
	  temps[2] = kf_inv*(U[0]+k_1_2_l*U[2])-U[3];
 8002520:	ed97 7a05 	vldr	s14, [r7, #20]
 8002524:	edd7 6a07 	vldr	s13, [r7, #28]
 8002528:	4b61      	ldr	r3, [pc, #388]	@ (80026b0 <performLQRStable+0x54c>)
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002532:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002536:	4b5f      	ldr	r3, [pc, #380]	@ (80026b4 <performLQRStable+0x550>)
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002540:	edd7 7a08 	vldr	s15, [r7, #32]
 8002544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002548:	edc7 7a03 	vstr	s15, [r7, #12]
	  temps[3] = kf_inv*(U[0]+k_1_2_l*U[1])+U[3];
 800254c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002550:	edd7 6a06 	vldr	s13, [r7, #24]
 8002554:	4b56      	ldr	r3, [pc, #344]	@ (80026b0 <performLQRStable+0x54c>)
 8002556:	edd3 7a00 	vldr	s15, [r3]
 800255a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800255e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002562:	4b54      	ldr	r3, [pc, #336]	@ (80026b4 <performLQRStable+0x550>)
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	ee27 7a27 	vmul.f32	s14, s14, s15
 800256c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002574:	edc7 7a04 	vstr	s15, [r7, #16]
	  for (int i = 0; i < 4; i++) {
 8002578:	2300      	movs	r3, #0
 800257a:	667b      	str	r3, [r7, #100]	@ 0x64
 800257c:	e028      	b.n	80025d0 <performLQRStable+0x46c>
		if (temps[i]<0){
 800257e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	3368      	adds	r3, #104	@ 0x68
 8002584:	443b      	add	r3, r7
 8002586:	3b64      	subs	r3, #100	@ 0x64
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002594:	d519      	bpl.n	80025ca <performLQRStable+0x466>
			printf("ERROR ZERO CROSSING IN SQRT %d = %f\r\n", i, temps[i]);
 8002596:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	3368      	adds	r3, #104	@ 0x68
 800259c:	443b      	add	r3, r7
 800259e:	3b64      	subs	r3, #100	@ 0x64
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe f808 	bl	80005b8 <__aeabi_f2d>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80025ae:	4842      	ldr	r0, [pc, #264]	@ (80026b8 <performLQRStable+0x554>)
 80025b0:	f00d fe90 	bl	80102d4 <iprintf>
			SetMotorOutputs(1100, 1100, 1100, 1100);
 80025b4:	f240 434c 	movw	r3, #1100	@ 0x44c
 80025b8:	f240 424c 	movw	r2, #1100	@ 0x44c
 80025bc:	f240 414c 	movw	r1, #1100	@ 0x44c
 80025c0:	f240 404c 	movw	r0, #1100	@ 0x44c
 80025c4:	f7ff fcb8 	bl	8001f38 <SetMotorOutputs>
			return;
 80025c8:	e0d8      	b.n	800277c <performLQRStable+0x618>
	  for (int i = 0; i < 4; i++) {
 80025ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025cc:	3301      	adds	r3, #1
 80025ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80025d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	ddd3      	ble.n	800257e <performLQRStable+0x41a>
		}
	  }
	  LQR_SPEED[0] = 0.5*sqrtf(temps[0]);
 80025d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025da:	eeb0 0a67 	vmov.f32	s0, s15
 80025de:	f011 ff09 	bl	80143f4 <sqrtf>
 80025e2:	ee10 3a10 	vmov	r3, s0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ffe6 	bl	80005b8 <__aeabi_f2d>
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	4b32      	ldr	r3, [pc, #200]	@ (80026bc <performLQRStable+0x558>)
 80025f2:	f7fe f839 	bl	8000668 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe fb2b 	bl	8000c58 <__aeabi_d2f>
 8002602:	4603      	mov	r3, r0
 8002604:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  LQR_SPEED[1] = 0.5*sqrtf(temps[1]);
 8002606:	edd7 7a02 	vldr	s15, [r7, #8]
 800260a:	eeb0 0a67 	vmov.f32	s0, s15
 800260e:	f011 fef1 	bl	80143f4 <sqrtf>
 8002612:	ee10 3a10 	vmov	r3, s0
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd ffce 	bl	80005b8 <__aeabi_f2d>
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	4b26      	ldr	r3, [pc, #152]	@ (80026bc <performLQRStable+0x558>)
 8002622:	f7fe f821 	bl	8000668 <__aeabi_dmul>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	f7fe fb13 	bl	8000c58 <__aeabi_d2f>
 8002632:	4603      	mov	r3, r0
 8002634:	643b      	str	r3, [r7, #64]	@ 0x40
	  LQR_SPEED[2] = 0.5*sqrtf(temps[2]);
 8002636:	edd7 7a03 	vldr	s15, [r7, #12]
 800263a:	eeb0 0a67 	vmov.f32	s0, s15
 800263e:	f011 fed9 	bl	80143f4 <sqrtf>
 8002642:	ee10 3a10 	vmov	r3, s0
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd ffb6 	bl	80005b8 <__aeabi_f2d>
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <performLQRStable+0x558>)
 8002652:	f7fe f809 	bl	8000668 <__aeabi_dmul>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f7fe fafb 	bl	8000c58 <__aeabi_d2f>
 8002662:	4603      	mov	r3, r0
 8002664:	647b      	str	r3, [r7, #68]	@ 0x44
	  LQR_SPEED[3] = 0.5*sqrtf(temps[3]);
 8002666:	edd7 7a04 	vldr	s15, [r7, #16]
 800266a:	eeb0 0a67 	vmov.f32	s0, s15
 800266e:	f011 fec1 	bl	80143f4 <sqrtf>
 8002672:	ee10 3a10 	vmov	r3, s0
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd ff9e 	bl	80005b8 <__aeabi_f2d>
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <performLQRStable+0x558>)
 8002682:	f7fd fff1 	bl	8000668 <__aeabi_dmul>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f7fe fae3 	bl	8000c58 <__aeabi_d2f>
 8002692:	4603      	mov	r3, r0
 8002694:	64bb      	str	r3, [r7, #72]	@ 0x48
	  for (int i = 0; i < 4; i++) {
 8002696:	2300      	movs	r3, #0
 8002698:	663b      	str	r3, [r7, #96]	@ 0x60
 800269a:	e045      	b.n	8002728 <performLQRStable+0x5c4>
 800269c:	20000044 	.word	0x20000044
 80026a0:	20000048 	.word	0x20000048
 80026a4:	2000004c 	.word	0x2000004c
 80026a8:	20000050 	.word	0x20000050
 80026ac:	200003b0 	.word	0x200003b0
 80026b0:	20000054 	.word	0x20000054
 80026b4:	20000058 	.word	0x20000058
 80026b8:	0801554c 	.word	0x0801554c
 80026bc:	3fe00000 	.word	0x3fe00000
		  // Масштабирование и смещение
		  float pwm = LQR_SPEED[i] * scale + min_pwm;
 80026c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	3368      	adds	r3, #104	@ 0x68
 80026c6:	443b      	add	r3, r7
 80026c8:	3b2c      	subs	r3, #44	@ 0x2c
 80026ca:	ed93 7a00 	vldr	s14, [r3]
 80026ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002788 <performLQRStable+0x624>)
 80026d0:	edd3 7a00 	vldr	s15, [r3]
 80026d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800278c <performLQRStable+0x628>
 80026dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026e0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

		  // Ограничение диапазона
		  pwm = fmaxf(pwm, min_pwm);
 80026e4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800278c <performLQRStable+0x628>
 80026e8:	eef0 0a67 	vmov.f32	s1, s15
 80026ec:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 80026f0:	f011 fee9 	bl	80144c6 <fmaxf>
 80026f4:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
		  pwm = fminf(pwm, max_pwm);
 80026f8:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8002790 <performLQRStable+0x62c>
 80026fc:	eef0 0a67 	vmov.f32	s1, s15
 8002700:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8002704:	f011 fefc 	bl	8014500 <fminf>
 8002708:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c

		  motorPWM[i] = (uint16_t)pwm;
 800270c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002714:	ee17 3a90 	vmov	r3, s15
 8002718:	b299      	uxth	r1, r3
 800271a:	4a1e      	ldr	r2, [pc, #120]	@ (8002794 <performLQRStable+0x630>)
 800271c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800271e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for (int i = 0; i < 4; i++) {
 8002722:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002724:	3301      	adds	r3, #1
 8002726:	663b      	str	r3, [r7, #96]	@ 0x60
 8002728:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800272a:	2b03      	cmp	r3, #3
 800272c:	ddc8      	ble.n	80026c0 <performLQRStable+0x55c>
	  }
	  printf("motors: %d, %d, %d, %d\r\n", motorPWM[0], motorPWM[1],motorPWM[2],motorPWM[3]);
 800272e:	4b19      	ldr	r3, [pc, #100]	@ (8002794 <performLQRStable+0x630>)
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	4619      	mov	r1, r3
 8002734:	4b17      	ldr	r3, [pc, #92]	@ (8002794 <performLQRStable+0x630>)
 8002736:	885b      	ldrh	r3, [r3, #2]
 8002738:	461a      	mov	r2, r3
 800273a:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <performLQRStable+0x630>)
 800273c:	889b      	ldrh	r3, [r3, #4]
 800273e:	4618      	mov	r0, r3
 8002740:	4b14      	ldr	r3, [pc, #80]	@ (8002794 <performLQRStable+0x630>)
 8002742:	88db      	ldrh	r3, [r3, #6]
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	4603      	mov	r3, r0
 8002748:	4813      	ldr	r0, [pc, #76]	@ (8002798 <performLQRStable+0x634>)
 800274a:	f00d fdc3 	bl	80102d4 <iprintf>

	  // Установка PWM для моторов
	  SetMotorOutputs(motorPWM[3],motorPWM[2],motorPWM[0], motorPWM[1]);
 800274e:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <performLQRStable+0x630>)
 8002750:	88d8      	ldrh	r0, [r3, #6]
 8002752:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <performLQRStable+0x630>)
 8002754:	8899      	ldrh	r1, [r3, #4]
 8002756:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <performLQRStable+0x630>)
 8002758:	881a      	ldrh	r2, [r3, #0]
 800275a:	4b0e      	ldr	r3, [pc, #56]	@ (8002794 <performLQRStable+0x630>)
 800275c:	885b      	ldrh	r3, [r3, #2]
 800275e:	f7ff fbeb 	bl	8001f38 <SetMotorOutputs>
  if (timer_lqr<now && now < timer_lqr + 60000){
 8002762:	e00b      	b.n	800277c <performLQRStable+0x618>
  } else {
	  SetMotorOutputs(1100, 1100, 1100, 1100);
 8002764:	f240 434c 	movw	r3, #1100	@ 0x44c
 8002768:	f240 424c 	movw	r2, #1100	@ 0x44c
 800276c:	f240 414c 	movw	r1, #1100	@ 0x44c
 8002770:	f240 404c 	movw	r0, #1100	@ 0x44c
 8002774:	f7ff fbe0 	bl	8001f38 <SetMotorOutputs>
 8002778:	e000      	b.n	800277c <performLQRStable+0x618>
    return;
 800277a:	bf00      	nop
  }

}
 800277c:	3768      	adds	r7, #104	@ 0x68
 800277e:	46bd      	mov	sp, r7
 8002780:	ecbd 8b02 	vpop	{d8}
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	2000005c 	.word	0x2000005c
 800278c:	448e8000 	.word	0x448e8000
 8002790:	44924000 	.word	0x44924000
 8002794:	20000400 	.word	0x20000400
 8002798:	08015574 	.word	0x08015574

0800279c <handleDroneState>:

// Функция обработки состояний - вызывается в основном цикле
void handleDroneState(void) {
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  // Если есть запрос на изменение состояния
  if (requestedState != currentState) {
 80027a0:	4b38      	ldr	r3, [pc, #224]	@ (8002884 <handleDroneState+0xe8>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b38      	ldr	r3, [pc, #224]	@ (8002888 <handleDroneState+0xec>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d03e      	beq.n	800282e <handleDroneState+0x92>
    // Выполняем необходимые действия при смене состояния
    switch (requestedState) {
 80027b0:	4b34      	ldr	r3, [pc, #208]	@ (8002884 <handleDroneState+0xe8>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d82d      	bhi.n	8002818 <handleDroneState+0x7c>
 80027bc:	a201      	add	r2, pc, #4	@ (adr r2, 80027c4 <handleDroneState+0x28>)
 80027be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c2:	bf00      	nop
 80027c4:	080027f9 	.word	0x080027f9
 80027c8:	080027d5 	.word	0x080027d5
 80027cc:	080027f1 	.word	0x080027f1
 80027d0:	08002801 	.word	0x08002801
      case DRONE_STATE_EMERGENCY_STOP:
        // Экстренная остановка всегда имеет приоритет
        SetMotorOutputs(1060, 1060, 1060, 1060);
 80027d4:	f240 4324 	movw	r3, #1060	@ 0x424
 80027d8:	f240 4224 	movw	r2, #1060	@ 0x424
 80027dc:	f240 4124 	movw	r1, #1060	@ 0x424
 80027e0:	f240 4024 	movw	r0, #1060	@ 0x424
 80027e4:	f7ff fba8 	bl	8001f38 <SetMotorOutputs>
        printf("EMERGENCY STOP ACTIVATED\r\n");
 80027e8:	4828      	ldr	r0, [pc, #160]	@ (800288c <handleDroneState+0xf0>)
 80027ea:	f00d fddb 	bl	80103a4 <puts>
        break;
 80027ee:	e014      	b.n	800281a <handleDroneState+0x7e>

      case DRONE_STATE_LANDING:
        // Сброс для начала процесса приземления
        landingInProgress = 0;
 80027f0:	4b27      	ldr	r3, [pc, #156]	@ (8002890 <handleDroneState+0xf4>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
        break;
 80027f6:	e010      	b.n	800281a <handleDroneState+0x7e>

      case DRONE_STATE_TEST_CYCLE:
        // Перезапуск тестового цикла
        printf("TEST CYCLE STARTED\r\n");
 80027f8:	4826      	ldr	r0, [pc, #152]	@ (8002894 <handleDroneState+0xf8>)
 80027fa:	f00d fdd3 	bl	80103a4 <puts>
        break;
 80027fe:	e00c      	b.n	800281a <handleDroneState+0x7e>

      case DRONE_STATE_LQR:
		  // Перезапуск тестового цикла
    	  timer_lqr = HAL_GetTick()+15000;
 8002800:	f001 fdba 	bl	8004378 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	f643 2398 	movw	r3, #15000	@ 0x3a98
 800280a:	4413      	add	r3, r2
 800280c:	4a22      	ldr	r2, [pc, #136]	@ (8002898 <handleDroneState+0xfc>)
 800280e:	6013      	str	r3, [r2, #0]
		  printf("STARTED LQR\r\n");
 8002810:	4822      	ldr	r0, [pc, #136]	@ (800289c <handleDroneState+0x100>)
 8002812:	f00d fdc7 	bl	80103a4 <puts>
		  break;
 8002816:	e000      	b.n	800281a <handleDroneState+0x7e>
//      case DRONE_TEST_DIRS:
//    	  printf("TEST DIRS STARTED\r\n");
//		  break;

      default:
        break;
 8002818:	bf00      	nop
    }

    // Обновляем текущее состояние
    currentState = requestedState;
 800281a:	4b1a      	ldr	r3, [pc, #104]	@ (8002884 <handleDroneState+0xe8>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <handleDroneState+0xec>)
 8002822:	701a      	strb	r2, [r3, #0]
    stateStartTime = HAL_GetTick();
 8002824:	f001 fda8 	bl	8004378 <HAL_GetTick>
 8002828:	4603      	mov	r3, r0
 800282a:	4a1d      	ldr	r2, [pc, #116]	@ (80028a0 <handleDroneState+0x104>)
 800282c:	6013      	str	r3, [r2, #0]
  }

  // Выполняем действия в соответствии с текущим состоянием
  switch (currentState) {
 800282e:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <handleDroneState+0xec>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b04      	cmp	r3, #4
 8002836:	d821      	bhi.n	800287c <handleDroneState+0xe0>
 8002838:	a201      	add	r2, pc, #4	@ (adr r2, 8002840 <handleDroneState+0xa4>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	0800287d 	.word	0x0800287d
 8002844:	08002855 	.word	0x08002855
 8002848:	08002861 	.word	0x08002861
 800284c:	0800285b 	.word	0x0800285b
 8002850:	08002877 	.word	0x08002877
    case DRONE_STATE_IDLE:
      // В режиме ожидания ничего не делаем с моторами
      break;

    case DRONE_STATE_TEST_CYCLE:
      performTestCycle();
 8002854:	f7ff fc1a 	bl	800208c <performTestCycle>
      break;
 8002858:	e011      	b.n	800287e <handleDroneState+0xe2>

    case DRONE_STATE_LANDING:
      performLanding();
 800285a:	f7ff fba9 	bl	8001fb0 <performLanding>
      break;
 800285e:	e00e      	b.n	800287e <handleDroneState+0xe2>

    case DRONE_STATE_EMERGENCY_STOP:
      // Просто поддерживаем минимальную мощность
      SetMotorOutputs(1000, 1000, 1000, 1000);
 8002860:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002864:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002868:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800286c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002870:	f7ff fb62 	bl	8001f38 <SetMotorOutputs>
      break;
 8002874:	e003      	b.n	800287e <handleDroneState+0xe2>

    case DRONE_STATE_LQR:
		// Просто поддерживаем минимальную мощность
    	performLQRStable();
 8002876:	f7ff fc75 	bl	8002164 <performLQRStable>
		break;
 800287a:	e000      	b.n	800287e <handleDroneState+0xe2>

    default:
      break;
 800287c:	bf00      	nop
  }
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000379 	.word	0x20000379
 8002888:	20000378 	.word	0x20000378
 800288c:	08015590 	.word	0x08015590
 8002890:	20000380 	.word	0x20000380
 8002894:	080155ac 	.word	0x080155ac
 8002898:	20000414 	.word	0x20000414
 800289c:	080155c0 	.word	0x080155c0
 80028a0:	2000037c 	.word	0x2000037c

080028a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80028ac:	f001 f8b6 	bl	8003a1c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028b0:	f001 fd11 	bl	80042d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028b4:	f000 f8cc 	bl	8002a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028b8:	f000 fb4e 	bl	8002f58 <MX_GPIO_Init>
  MX_DMA_Init();
 80028bc:	f000 fb16 	bl	8002eec <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80028c0:	f00b ff84 	bl	800e7cc <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80028c4:	f000 f970 	bl	8002ba8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80028c8:	f000 f9f0 	bl	8002cac <MX_TIM3_Init>
  MX_TIM4_Init();
 80028cc:	f000 fa66 	bl	8002d9c <MX_TIM4_Init>
  MX_SPI1_Init();
 80028d0:	f000 f92c 	bl	8002b2c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80028d4:	f000 fada 	bl	8002e8c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80028d8:	2100      	movs	r1, #0
 80028da:	484d      	ldr	r0, [pc, #308]	@ (8002a10 <main+0x16c>)
 80028dc:	f006 f888 	bl	80089f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80028e0:	2104      	movs	r1, #4
 80028e2:	484b      	ldr	r0, [pc, #300]	@ (8002a10 <main+0x16c>)
 80028e4:	f006 f884 	bl	80089f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80028e8:	2100      	movs	r1, #0
 80028ea:	484a      	ldr	r0, [pc, #296]	@ (8002a14 <main+0x170>)
 80028ec:	f006 f880 	bl	80089f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80028f0:	2100      	movs	r1, #0
 80028f2:	4849      	ldr	r0, [pc, #292]	@ (8002a18 <main+0x174>)
 80028f4:	f006 f87c 	bl	80089f0 <HAL_TIM_PWM_Start>
  ArmESCs();
 80028f8:	f7ff fb48 	bl	8001f8c <ArmESCs>
  //TestSPI();
  if (ICM_Init() != HAL_OK) {
 80028fc:	f7fe fc26 	bl	800114c <ICM_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <main+0x72>
	  HAL_Delay(1000);
 8002906:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800290a:	f001 fd41 	bl	8004390 <HAL_Delay>
	  printf("ERROR INIT GYRO\r\n");
 800290e:	4843      	ldr	r0, [pc, #268]	@ (8002a1c <main+0x178>)
 8002910:	f00d fd48 	bl	80103a4 <puts>
 8002914:	e023      	b.n	800295e <main+0xba>
  }
  else {
	  ICM_CalibrateGyro(bias);
 8002916:	4842      	ldr	r0, [pc, #264]	@ (8002a20 <main+0x17c>)
 8002918:	f7ff fa50 	bl	8001dbc <ICM_CalibrateGyro>
	  printf("Calibration complete: bias_x=%.2f, bias_y=%.2f, bias_z=%.2f deg/s\r\n",
			 bias[0], bias[1], bias[2]);
 800291c:	4b40      	ldr	r3, [pc, #256]	@ (8002a20 <main+0x17c>)
 800291e:	681b      	ldr	r3, [r3, #0]
	  printf("Calibration complete: bias_x=%.2f, bias_y=%.2f, bias_z=%.2f deg/s\r\n",
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fe49 	bl	80005b8 <__aeabi_f2d>
 8002926:	4680      	mov	r8, r0
 8002928:	4689      	mov	r9, r1
			 bias[0], bias[1], bias[2]);
 800292a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a20 <main+0x17c>)
 800292c:	685b      	ldr	r3, [r3, #4]
	  printf("Calibration complete: bias_x=%.2f, bias_y=%.2f, bias_z=%.2f deg/s\r\n",
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fe42 	bl	80005b8 <__aeabi_f2d>
 8002934:	4604      	mov	r4, r0
 8002936:	460d      	mov	r5, r1
			 bias[0], bias[1], bias[2]);
 8002938:	4b39      	ldr	r3, [pc, #228]	@ (8002a20 <main+0x17c>)
 800293a:	689b      	ldr	r3, [r3, #8]
	  printf("Calibration complete: bias_x=%.2f, bias_y=%.2f, bias_z=%.2f deg/s\r\n",
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fe3b 	bl	80005b8 <__aeabi_f2d>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800294a:	e9cd 4500 	strd	r4, r5, [sp]
 800294e:	4642      	mov	r2, r8
 8002950:	464b      	mov	r3, r9
 8002952:	4834      	ldr	r0, [pc, #208]	@ (8002a24 <main+0x180>)
 8002954:	f00d fcbe 	bl	80102d4 <iprintf>
	  printf("HIHIHIHA\r\n");
 8002958:	4833      	ldr	r0, [pc, #204]	@ (8002a28 <main+0x184>)
 800295a:	f00d fd23 	bl	80103a4 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_UART_Receive_IT(&huart3, &rx_buf, 1);
  //HAL_Delay(12000);
  //testMotorsDirs();
  printf("Begin main loop\r\n");
 800295e:	4833      	ldr	r0, [pc, #204]	@ (8002a2c <main+0x188>)
 8002960:	f00d fd20 	bl	80103a4 <puts>
  HAL_Delay(300);
 8002964:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002968:	f001 fd12 	bl	8004390 <HAL_Delay>
  HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 800296c:	2201      	movs	r2, #1
 800296e:	4930      	ldr	r1, [pc, #192]	@ (8002a30 <main+0x18c>)
 8002970:	4830      	ldr	r0, [pc, #192]	@ (8002a34 <main+0x190>)
 8002972:	f007 f99c 	bl	8009cae <HAL_UART_Receive_IT>
  //ICM_CalibrateAccel(accel_bias);
  //ICM_CalibrateGyro(gyro_bias);
  // Применяем калибровку при чтении:
  //accel_data[i] = (raw_value - accel_bias[i]) / 8192.0f;
  //uint32_t prev_time = HAL_GetTick();
  uint32_t last_orientation_time = HAL_GetTick()-10;
 8002976:	f001 fcff 	bl	8004378 <HAL_GetTick>
 800297a:	4603      	mov	r3, r0
 800297c:	3b0a      	subs	r3, #10
 800297e:	607b      	str	r3, [r7, #4]
  requestedState = DRONE_STATE_LQR;
 8002980:	4b2d      	ldr	r3, [pc, #180]	@ (8002a38 <main+0x194>)
 8002982:	2204      	movs	r2, #4
 8002984:	701a      	strb	r2, [r3, #0]
  //pos_req[2] = 1;
  //float euler_deg[3];
  while (1)
  {
	  HAL_Delay(10);
 8002986:	200a      	movs	r0, #10
 8002988:	f001 fd02 	bl	8004390 <HAL_Delay>
	  // Обработка состояния дрона
	  handleDroneState();
 800298c:	f7ff ff06 	bl	800279c <handleDroneState>

	  // Чтение данных ориентации каждые N мс
	  uint32_t now = HAL_GetTick();
 8002990:	f001 fcf2 	bl	8004378 <HAL_GetTick>
 8002994:	6038      	str	r0, [r7, #0]
//	  if (now - last_orientation_time >= 1) { // 10 мс = 100 Гц


		  if (ICM_UpdateEulerAngles() == HAL_OK) {
 8002996:	f7ff f965 	bl	8001c64 <ICM_UpdateEulerAngles>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d131      	bne.n	8002a04 <main+0x160>
			  memcpy(angles_rad, angles_rad_prev, 3);
 80029a0:	2203      	movs	r2, #3
 80029a2:	4926      	ldr	r1, [pc, #152]	@ (8002a3c <main+0x198>)
 80029a4:	4826      	ldr	r0, [pc, #152]	@ (8002a40 <main+0x19c>)
 80029a6:	f00d fefe 	bl	80107a6 <memcpy>
			  ICM_GetEulerAngles(angles_rad);
 80029aa:	4825      	ldr	r0, [pc, #148]	@ (8002a40 <main+0x19c>)
 80029ac:	f7ff f992 	bl	8001cd4 <ICM_GetEulerAngles>
//			  for (int i = 0; i<3; i++){
//				  angles_speed[i] = (angles_rad_prev[i] - angles_rad[i])/((now-last_orientation_time)*0.0001f);
//			  }

			  // Вывод ориентации с меньшей частотой, чтобы не перегружать UART
			  if ((now % 100) == 0) {  // каждые 100 мс = 10 Гц
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	4b24      	ldr	r3, [pc, #144]	@ (8002a44 <main+0x1a0>)
 80029b4:	fba3 1302 	umull	r1, r3, r3, r2
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	2164      	movs	r1, #100	@ 0x64
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d121      	bne.n	8002a0a <main+0x166>
				  printf("ORIENT: %.2f, %.2f, %.2f\r\n", angles_rad[0], angles_rad[1], angles_rad[2]);
 80029c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a40 <main+0x19c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fd fdf4 	bl	80005b8 <__aeabi_f2d>
 80029d0:	4680      	mov	r8, r0
 80029d2:	4689      	mov	r9, r1
 80029d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a40 <main+0x19c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fded 	bl	80005b8 <__aeabi_f2d>
 80029de:	4604      	mov	r4, r0
 80029e0:	460d      	mov	r5, r1
 80029e2:	4b17      	ldr	r3, [pc, #92]	@ (8002a40 <main+0x19c>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fde6 	bl	80005b8 <__aeabi_f2d>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80029f4:	e9cd 4500 	strd	r4, r5, [sp]
 80029f8:	4642      	mov	r2, r8
 80029fa:	464b      	mov	r3, r9
 80029fc:	4812      	ldr	r0, [pc, #72]	@ (8002a48 <main+0x1a4>)
 80029fe:	f00d fc69 	bl	80102d4 <iprintf>
 8002a02:	e002      	b.n	8002a0a <main+0x166>
			  }
		  } else {
			  printf("ERROR ANGLES\r\n");
 8002a04:	4811      	ldr	r0, [pc, #68]	@ (8002a4c <main+0x1a8>)
 8002a06:	f00d fccd 	bl	80103a4 <puts>
		  }
		  last_orientation_time = now;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	607b      	str	r3, [r7, #4]
  {
 8002a0e:	e7ba      	b.n	8002986 <main+0xe2>
 8002a10:	2000047c 	.word	0x2000047c
 8002a14:	200004c8 	.word	0x200004c8
 8002a18:	20000514 	.word	0x20000514
 8002a1c:	080155d0 	.word	0x080155d0
 8002a20:	20000408 	.word	0x20000408
 8002a24:	080155e4 	.word	0x080155e4
 8002a28:	08015628 	.word	0x08015628
 8002a2c:	08015634 	.word	0x08015634
 8002a30:	20000381 	.word	0x20000381
 8002a34:	200006e0 	.word	0x200006e0
 8002a38:	20000379 	.word	0x20000379
 8002a3c:	200003bc 	.word	0x200003bc
 8002a40:	20000398 	.word	0x20000398
 8002a44:	51eb851f 	.word	0x51eb851f
 8002a48:	08015648 	.word	0x08015648
 8002a4c:	08015664 	.word	0x08015664

08002a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b094      	sub	sp, #80	@ 0x50
 8002a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a56:	f107 0320 	add.w	r3, r7, #32
 8002a5a:	2230      	movs	r2, #48	@ 0x30
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f00d fe00 	bl	8010664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a64:	f107 030c 	add.w	r3, r7, #12
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a74:	4b2b      	ldr	r3, [pc, #172]	@ (8002b24 <SystemClock_Config+0xd4>)
 8002a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a78:	4a2a      	ldr	r2, [pc, #168]	@ (8002b24 <SystemClock_Config+0xd4>)
 8002a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a80:	4b28      	ldr	r3, [pc, #160]	@ (8002b24 <SystemClock_Config+0xd4>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a8c:	4b26      	ldr	r3, [pc, #152]	@ (8002b28 <SystemClock_Config+0xd8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a25      	ldr	r2, [pc, #148]	@ (8002b28 <SystemClock_Config+0xd8>)
 8002a92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b23      	ldr	r3, [pc, #140]	@ (8002b28 <SystemClock_Config+0xd8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002aa0:	607b      	str	r3, [r7, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002aac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ab2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ab8:	2308      	movs	r3, #8
 8002aba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002abc:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8002ac0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002ac6:	2309      	movs	r3, #9
 8002ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aca:	f107 0320 	add.w	r3, r7, #32
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 fe30 	bl	8006734 <HAL_RCC_OscConfig>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002ada:	f000 ffcb 	bl	8003a74 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002ade:	f003 fdd9 	bl	8006694 <HAL_PWREx_EnableOverDrive>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002ae8:	f000 ffc4 	bl	8003a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aec:	230f      	movs	r3, #15
 8002aee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002af0:	2302      	movs	r3, #2
 8002af2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002af8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002afc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002afe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002b04:	f107 030c 	add.w	r3, r7, #12
 8002b08:	2107      	movs	r1, #7
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 f8b6 	bl	8006c7c <HAL_RCC_ClockConfig>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002b16:	f000 ffad 	bl	8003a74 <Error_Handler>
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	3750      	adds	r7, #80	@ 0x50
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40007000 	.word	0x40007000

08002b2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <MX_SPI1_Init+0x74>)
 8002b32:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba4 <MX_SPI1_Init+0x78>)
 8002b34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b36:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba0 <MX_SPI1_Init+0x74>)
 8002b38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b3e:	4b18      	ldr	r3, [pc, #96]	@ (8002ba0 <MX_SPI1_Init+0x74>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b44:	4b16      	ldr	r3, [pc, #88]	@ (8002ba0 <MX_SPI1_Init+0x74>)
 8002b46:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ba0 <MX_SPI1_Init+0x74>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b52:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <MX_SPI1_Init+0x74>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b58:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <MX_SPI1_Init+0x74>)
 8002b5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002b60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba0 <MX_SPI1_Init+0x74>)
 8002b62:	2220      	movs	r2, #32
 8002b64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba0 <MX_SPI1_Init+0x74>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <MX_SPI1_Init+0x74>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <MX_SPI1_Init+0x74>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b78:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <MX_SPI1_Init+0x74>)
 8002b7a:	2207      	movs	r2, #7
 8002b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <MX_SPI1_Init+0x74>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <MX_SPI1_Init+0x74>)
 8002b86:	2208      	movs	r2, #8
 8002b88:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b8a:	4805      	ldr	r0, [pc, #20]	@ (8002ba0 <MX_SPI1_Init+0x74>)
 8002b8c:	f004 fde6 	bl	800775c <HAL_SPI_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b96:	f000 ff6d 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000418 	.word	0x20000418
 8002ba4:	40013000 	.word	0x40013000

08002ba8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08e      	sub	sp, #56	@ 0x38
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bc8:	463b      	mov	r3, r7
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
 8002bd4:	611a      	str	r2, [r3, #16]
 8002bd6:	615a      	str	r2, [r3, #20]
 8002bd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bda:	4b33      	ldr	r3, [pc, #204]	@ (8002ca8 <MX_TIM2_Init+0x100>)
 8002bdc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002be0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8002be2:	4b31      	ldr	r3, [pc, #196]	@ (8002ca8 <MX_TIM2_Init+0x100>)
 8002be4:	226b      	movs	r2, #107	@ 0x6b
 8002be6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be8:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca8 <MX_TIM2_Init+0x100>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2082;
 8002bee:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca8 <MX_TIM2_Init+0x100>)
 8002bf0:	f640 0222 	movw	r2, #2082	@ 0x822
 8002bf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca8 <MX_TIM2_Init+0x100>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca8 <MX_TIM2_Init+0x100>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c02:	4829      	ldr	r0, [pc, #164]	@ (8002ca8 <MX_TIM2_Init+0x100>)
 8002c04:	f005 fe3c 	bl	8008880 <HAL_TIM_Base_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002c0e:	f000 ff31 	bl	8003a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4822      	ldr	r0, [pc, #136]	@ (8002ca8 <MX_TIM2_Init+0x100>)
 8002c20:	f006 f9fc 	bl	800901c <HAL_TIM_ConfigClockSource>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002c2a:	f000 ff23 	bl	8003a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c2e:	481e      	ldr	r0, [pc, #120]	@ (8002ca8 <MX_TIM2_Init+0x100>)
 8002c30:	f005 fe7d 	bl	800892e <HAL_TIM_PWM_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002c3a:	f000 ff1b 	bl	8003a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c46:	f107 031c 	add.w	r3, r7, #28
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4816      	ldr	r0, [pc, #88]	@ (8002ca8 <MX_TIM2_Init+0x100>)
 8002c4e:	f006 feab 	bl	80099a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002c58:	f000 ff0c 	bl	8003a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c5c:	2360      	movs	r3, #96	@ 0x60
 8002c5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8002c60:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002c64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c6e:	463b      	mov	r3, r7
 8002c70:	2200      	movs	r2, #0
 8002c72:	4619      	mov	r1, r3
 8002c74:	480c      	ldr	r0, [pc, #48]	@ (8002ca8 <MX_TIM2_Init+0x100>)
 8002c76:	f006 f8bd 	bl	8008df4 <HAL_TIM_PWM_ConfigChannel>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002c80:	f000 fef8 	bl	8003a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c84:	463b      	mov	r3, r7
 8002c86:	2204      	movs	r2, #4
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4807      	ldr	r0, [pc, #28]	@ (8002ca8 <MX_TIM2_Init+0x100>)
 8002c8c:	f006 f8b2 	bl	8008df4 <HAL_TIM_PWM_ConfigChannel>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8002c96:	f000 feed 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c9a:	4803      	ldr	r0, [pc, #12]	@ (8002ca8 <MX_TIM2_Init+0x100>)
 8002c9c:	f001 f898 	bl	8003dd0 <HAL_TIM_MspPostInit>

}
 8002ca0:	bf00      	nop
 8002ca2:	3738      	adds	r7, #56	@ 0x38
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	2000047c 	.word	0x2000047c

08002cac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08e      	sub	sp, #56	@ 0x38
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc0:	f107 031c 	add.w	r3, r7, #28
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ccc:	463b      	mov	r3, r7
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	60da      	str	r2, [r3, #12]
 8002cd8:	611a      	str	r2, [r3, #16]
 8002cda:	615a      	str	r2, [r3, #20]
 8002cdc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cde:	4b2d      	ldr	r3, [pc, #180]	@ (8002d94 <MX_TIM3_Init+0xe8>)
 8002ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8002d98 <MX_TIM3_Init+0xec>)
 8002ce2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8002ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d94 <MX_TIM3_Init+0xe8>)
 8002ce6:	226b      	movs	r2, #107	@ 0x6b
 8002ce8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cea:	4b2a      	ldr	r3, [pc, #168]	@ (8002d94 <MX_TIM3_Init+0xe8>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2082;
 8002cf0:	4b28      	ldr	r3, [pc, #160]	@ (8002d94 <MX_TIM3_Init+0xe8>)
 8002cf2:	f640 0222 	movw	r2, #2082	@ 0x822
 8002cf6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf8:	4b26      	ldr	r3, [pc, #152]	@ (8002d94 <MX_TIM3_Init+0xe8>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cfe:	4b25      	ldr	r3, [pc, #148]	@ (8002d94 <MX_TIM3_Init+0xe8>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d04:	4823      	ldr	r0, [pc, #140]	@ (8002d94 <MX_TIM3_Init+0xe8>)
 8002d06:	f005 fdbb 	bl	8008880 <HAL_TIM_Base_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002d10:	f000 feb0 	bl	8003a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d18:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d1e:	4619      	mov	r1, r3
 8002d20:	481c      	ldr	r0, [pc, #112]	@ (8002d94 <MX_TIM3_Init+0xe8>)
 8002d22:	f006 f97b 	bl	800901c <HAL_TIM_ConfigClockSource>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002d2c:	f000 fea2 	bl	8003a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d30:	4818      	ldr	r0, [pc, #96]	@ (8002d94 <MX_TIM3_Init+0xe8>)
 8002d32:	f005 fdfc 	bl	800892e <HAL_TIM_PWM_Init>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002d3c:	f000 fe9a 	bl	8003a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d48:	f107 031c 	add.w	r3, r7, #28
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4811      	ldr	r0, [pc, #68]	@ (8002d94 <MX_TIM3_Init+0xe8>)
 8002d50:	f006 fe2a 	bl	80099a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002d5a:	f000 fe8b 	bl	8003a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d5e:	2360      	movs	r3, #96	@ 0x60
 8002d60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8002d62:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002d66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d70:	463b      	mov	r3, r7
 8002d72:	2200      	movs	r2, #0
 8002d74:	4619      	mov	r1, r3
 8002d76:	4807      	ldr	r0, [pc, #28]	@ (8002d94 <MX_TIM3_Init+0xe8>)
 8002d78:	f006 f83c 	bl	8008df4 <HAL_TIM_PWM_ConfigChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002d82:	f000 fe77 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d86:	4803      	ldr	r0, [pc, #12]	@ (8002d94 <MX_TIM3_Init+0xe8>)
 8002d88:	f001 f822 	bl	8003dd0 <HAL_TIM_MspPostInit>

}
 8002d8c:	bf00      	nop
 8002d8e:	3738      	adds	r7, #56	@ 0x38
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	200004c8 	.word	0x200004c8
 8002d98:	40000400 	.word	0x40000400

08002d9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08e      	sub	sp, #56	@ 0x38
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002da2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	609a      	str	r2, [r3, #8]
 8002dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db0:	f107 031c 	add.w	r3, r7, #28
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dbc:	463b      	mov	r3, r7
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	60da      	str	r2, [r3, #12]
 8002dc8:	611a      	str	r2, [r3, #16]
 8002dca:	615a      	str	r2, [r3, #20]
 8002dcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002dce:	4b2d      	ldr	r3, [pc, #180]	@ (8002e84 <MX_TIM4_Init+0xe8>)
 8002dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8002e88 <MX_TIM4_Init+0xec>)
 8002dd2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 107;
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002e84 <MX_TIM4_Init+0xe8>)
 8002dd6:	226b      	movs	r2, #107	@ 0x6b
 8002dd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dda:	4b2a      	ldr	r3, [pc, #168]	@ (8002e84 <MX_TIM4_Init+0xe8>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2082;
 8002de0:	4b28      	ldr	r3, [pc, #160]	@ (8002e84 <MX_TIM4_Init+0xe8>)
 8002de2:	f640 0222 	movw	r2, #2082	@ 0x822
 8002de6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de8:	4b26      	ldr	r3, [pc, #152]	@ (8002e84 <MX_TIM4_Init+0xe8>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dee:	4b25      	ldr	r3, [pc, #148]	@ (8002e84 <MX_TIM4_Init+0xe8>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002df4:	4823      	ldr	r0, [pc, #140]	@ (8002e84 <MX_TIM4_Init+0xe8>)
 8002df6:	f005 fd43 	bl	8008880 <HAL_TIM_Base_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002e00:	f000 fe38 	bl	8003a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e0e:	4619      	mov	r1, r3
 8002e10:	481c      	ldr	r0, [pc, #112]	@ (8002e84 <MX_TIM4_Init+0xe8>)
 8002e12:	f006 f903 	bl	800901c <HAL_TIM_ConfigClockSource>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002e1c:	f000 fe2a 	bl	8003a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e20:	4818      	ldr	r0, [pc, #96]	@ (8002e84 <MX_TIM4_Init+0xe8>)
 8002e22:	f005 fd84 	bl	800892e <HAL_TIM_PWM_Init>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002e2c:	f000 fe22 	bl	8003a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e38:	f107 031c 	add.w	r3, r7, #28
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4811      	ldr	r0, [pc, #68]	@ (8002e84 <MX_TIM4_Init+0xe8>)
 8002e40:	f006 fdb2 	bl	80099a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002e4a:	f000 fe13 	bl	8003a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e4e:	2360      	movs	r3, #96	@ 0x60
 8002e50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e60:	463b      	mov	r3, r7
 8002e62:	2200      	movs	r2, #0
 8002e64:	4619      	mov	r1, r3
 8002e66:	4807      	ldr	r0, [pc, #28]	@ (8002e84 <MX_TIM4_Init+0xe8>)
 8002e68:	f005 ffc4 	bl	8008df4 <HAL_TIM_PWM_ConfigChannel>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8002e72:	f000 fdff 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002e76:	4803      	ldr	r0, [pc, #12]	@ (8002e84 <MX_TIM4_Init+0xe8>)
 8002e78:	f000 ffaa 	bl	8003dd0 <HAL_TIM_MspPostInit>

}
 8002e7c:	bf00      	nop
 8002e7e:	3738      	adds	r7, #56	@ 0x38
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000514 	.word	0x20000514
 8002e88:	40000800 	.word	0x40000800

08002e8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e90:	4b14      	ldr	r3, [pc, #80]	@ (8002ee4 <MX_USART3_UART_Init+0x58>)
 8002e92:	4a15      	ldr	r2, [pc, #84]	@ (8002ee8 <MX_USART3_UART_Init+0x5c>)
 8002e94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002e96:	4b13      	ldr	r3, [pc, #76]	@ (8002ee4 <MX_USART3_UART_Init+0x58>)
 8002e98:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002e9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <MX_USART3_UART_Init+0x58>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee4 <MX_USART3_UART_Init+0x58>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee4 <MX_USART3_UART_Init+0x58>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee4 <MX_USART3_UART_Init+0x58>)
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <MX_USART3_UART_Init+0x58>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ebc:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <MX_USART3_UART_Init+0x58>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ec2:	4b08      	ldr	r3, [pc, #32]	@ (8002ee4 <MX_USART3_UART_Init+0x58>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ec8:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <MX_USART3_UART_Init+0x58>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ece:	4805      	ldr	r0, [pc, #20]	@ (8002ee4 <MX_USART3_UART_Init+0x58>)
 8002ed0:	f006 fe16 	bl	8009b00 <HAL_UART_Init>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002eda:	f000 fdcb 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200006e0 	.word	0x200006e0
 8002ee8:	40004800 	.word	0x40004800

08002eec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ef2:	4b18      	ldr	r3, [pc, #96]	@ (8002f54 <MX_DMA_Init+0x68>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	4a17      	ldr	r2, [pc, #92]	@ (8002f54 <MX_DMA_Init+0x68>)
 8002ef8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002efe:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <MX_DMA_Init+0x68>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f06:	607b      	str	r3, [r7, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	200b      	movs	r0, #11
 8002f10:	f001 fb3d 	bl	800458e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002f14:	200b      	movs	r0, #11
 8002f16:	f001 fb56 	bl	80045c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	200f      	movs	r0, #15
 8002f20:	f001 fb35 	bl	800458e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002f24:	200f      	movs	r0, #15
 8002f26:	f001 fb4e 	bl	80045c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	2010      	movs	r0, #16
 8002f30:	f001 fb2d 	bl	800458e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002f34:	2010      	movs	r0, #16
 8002f36:	f001 fb46 	bl	80045c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	2011      	movs	r0, #17
 8002f40:	f001 fb25 	bl	800458e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002f44:	2011      	movs	r0, #17
 8002f46:	f001 fb3e 	bl	80045c6 <HAL_NVIC_EnableIRQ>

}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800

08002f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08a      	sub	sp, #40	@ 0x28
 8002f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	60da      	str	r2, [r3, #12]
 8002f6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003028 <MX_GPIO_Init+0xd0>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f72:	4a2d      	ldr	r2, [pc, #180]	@ (8003028 <MX_GPIO_Init+0xd0>)
 8002f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003028 <MX_GPIO_Init+0xd0>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f86:	4b28      	ldr	r3, [pc, #160]	@ (8003028 <MX_GPIO_Init+0xd0>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	4a27      	ldr	r2, [pc, #156]	@ (8003028 <MX_GPIO_Init+0xd0>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f92:	4b25      	ldr	r3, [pc, #148]	@ (8003028 <MX_GPIO_Init+0xd0>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f9e:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <MX_GPIO_Init+0xd0>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	4a21      	ldr	r2, [pc, #132]	@ (8003028 <MX_GPIO_Init+0xd0>)
 8002fa4:	f043 0304 	orr.w	r3, r3, #4
 8002fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002faa:	4b1f      	ldr	r3, [pc, #124]	@ (8003028 <MX_GPIO_Init+0xd0>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003028 <MX_GPIO_Init+0xd0>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	4a1b      	ldr	r2, [pc, #108]	@ (8003028 <MX_GPIO_Init+0xd0>)
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fc2:	4b19      	ldr	r3, [pc, #100]	@ (8003028 <MX_GPIO_Init+0xd0>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2104      	movs	r1, #4
 8002fd2:	4816      	ldr	r0, [pc, #88]	@ (800302c <MX_GPIO_Init+0xd4>)
 8002fd4:	f002 f8a2 	bl	800511c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fd8:	2310      	movs	r3, #16
 8002fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fdc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe6:	f107 0314 	add.w	r3, r7, #20
 8002fea:	4619      	mov	r1, r3
 8002fec:	4810      	ldr	r0, [pc, #64]	@ (8003030 <MX_GPIO_Init+0xd8>)
 8002fee:	f001 fef9 	bl	8004de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ff2:	2304      	movs	r3, #4
 8002ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffe:	2303      	movs	r3, #3
 8003000:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003002:	f107 0314 	add.w	r3, r7, #20
 8003006:	4619      	mov	r1, r3
 8003008:	4808      	ldr	r0, [pc, #32]	@ (800302c <MX_GPIO_Init+0xd4>)
 800300a:	f001 feeb 	bl	8004de4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2100      	movs	r1, #0
 8003012:	200a      	movs	r0, #10
 8003014:	f001 fabb 	bl	800458e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003018:	200a      	movs	r0, #10
 800301a:	f001 fad4 	bl	80045c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800301e:	bf00      	nop
 8003020:	3728      	adds	r7, #40	@ 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	40020400 	.word	0x40020400
 8003030:	40020800 	.word	0x40020800

08003034 <ParseCommand>:

/* USER CODE BEGIN 4 */
uint8_t ParseCommand(const char* buf, uint32_t Len) {
 8003034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003038:	b0ec      	sub	sp, #432	@ 0x1b0
 800303a:	af18      	add	r7, sp, #96	@ 0x60
 800303c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003040:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003044:	6018      	str	r0, [r3, #0]
 8003046:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800304a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800304e:	6019      	str	r1, [r3, #0]
    char cmd[64] = {0};
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003056:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800305a:	223c      	movs	r2, #60	@ 0x3c
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f00d fb00 	bl	8010664 <memset>
    if (Len >= sizeof(cmd)) Len = sizeof(cmd)-1;
 8003064:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003068:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003070:	d905      	bls.n	800307e <ParseCommand+0x4a>
 8003072:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003076:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800307a:	223f      	movs	r2, #63	@ 0x3f
 800307c:	601a      	str	r2, [r3, #0]
    memcpy(cmd, buf, Len);
 800307e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003082:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8003086:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800308a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800308e:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	6819      	ldr	r1, [r3, #0]
 8003096:	f00d fb86 	bl	80107a6 <memcpy>

    // Удаляем терминаторы
    for (int i = 0; i < Len; i++) {
 800309a:	2300      	movs	r3, #0
 800309c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80030a0:	e024      	b.n	80030ec <ParseCommand+0xb8>
        if (cmd[i]=='\r' || cmd[i]=='\n' || cmd[i]==';') {
 80030a2:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 80030a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030aa:	4413      	add	r3, r2
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b0d      	cmp	r3, #13
 80030b0:	d00f      	beq.n	80030d2 <ParseCommand+0x9e>
 80030b2:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 80030b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030ba:	4413      	add	r3, r2
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b0a      	cmp	r3, #10
 80030c0:	d007      	beq.n	80030d2 <ParseCommand+0x9e>
 80030c2:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 80030c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030ca:	4413      	add	r3, r2
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b3b      	cmp	r3, #59	@ 0x3b
 80030d0:	d107      	bne.n	80030e2 <ParseCommand+0xae>
            cmd[i] = '\0';
 80030d2:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 80030d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030da:	4413      	add	r3, r2
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
            break;
 80030e0:	e00d      	b.n	80030fe <ParseCommand+0xca>
    for (int i = 0; i < Len; i++) {
 80030e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030e6:	3301      	adds	r3, #1
 80030e8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80030ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030f0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80030f4:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d8d1      	bhi.n	80030a2 <ParseCommand+0x6e>
        }
    }
    if (strncmp(cmd, "SP", 2) == 0) {
 80030fe:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003102:	2202      	movs	r2, #2
 8003104:	49a8      	ldr	r1, [pc, #672]	@ (80033a8 <ParseCommand+0x374>)
 8003106:	4618      	mov	r0, r3
 8003108:	f00d fab4 	bl	8010674 <strncmp>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d132      	bne.n	8003178 <ParseCommand+0x144>
		float x, y, z;
		if (sscanf(cmd + 2, "%f,%f,%f", &x, &y, &z) == 3) {
 8003112:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8003116:	3002      	adds	r0, #2
 8003118:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800311c:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 8003120:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	460b      	mov	r3, r1
 8003128:	49a0      	ldr	r1, [pc, #640]	@ (80033ac <ParseCommand+0x378>)
 800312a:	f00d f997 	bl	801045c <siscanf>
 800312e:	4603      	mov	r3, r0
 8003130:	2b03      	cmp	r3, #3
 8003132:	d118      	bne.n	8003166 <ParseCommand+0x132>
			memcpy(prev_pos, pos, 3*sizeof( float ) );
 8003134:	4b9e      	ldr	r3, [pc, #632]	@ (80033b0 <ParseCommand+0x37c>)
 8003136:	4a9f      	ldr	r2, [pc, #636]	@ (80033b4 <ParseCommand+0x380>)
 8003138:	ca07      	ldmia	r2, {r0, r1, r2}
 800313a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			pos[0] = x;
 800313e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003142:	4a9c      	ldr	r2, [pc, #624]	@ (80033b4 <ParseCommand+0x380>)
 8003144:	6013      	str	r3, [r2, #0]
			pos[1] = y;
 8003146:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800314a:	4a9a      	ldr	r2, [pc, #616]	@ (80033b4 <ParseCommand+0x380>)
 800314c:	6053      	str	r3, [r2, #4]
			pos[2] = z;
 800314e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003152:	4a98      	ldr	r2, [pc, #608]	@ (80033b4 <ParseCommand+0x380>)
 8003154:	6093      	str	r3, [r2, #8]

			HAL_UART_Transmit(&huart3, (uint8_t*)"POS_SET\r\n", 9, HAL_MAX_DELAY);
 8003156:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800315a:	2209      	movs	r2, #9
 800315c:	4996      	ldr	r1, [pc, #600]	@ (80033b8 <ParseCommand+0x384>)
 800315e:	4897      	ldr	r0, [pc, #604]	@ (80033bc <ParseCommand+0x388>)
 8003160:	f006 fd1c 	bl	8009b9c <HAL_UART_Transmit>
 8003164:	e006      	b.n	8003174 <ParseCommand+0x140>
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*)"POS_ERR\r\n", 10, HAL_MAX_DELAY);
 8003166:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800316a:	220a      	movs	r2, #10
 800316c:	4994      	ldr	r1, [pc, #592]	@ (80033c0 <ParseCommand+0x38c>)
 800316e:	4893      	ldr	r0, [pc, #588]	@ (80033bc <ParseCommand+0x388>)
 8003170:	f006 fd14 	bl	8009b9c <HAL_UART_Transmit>
		}
		return 0;
 8003174:	2300      	movs	r3, #0
 8003176:	e3c9      	b.n	800390c <ParseCommand+0x8d8>
	}// ECHO
    if (strcmp(cmd, "STOP") == 0) {
 8003178:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800317c:	4991      	ldr	r1, [pc, #580]	@ (80033c4 <ParseCommand+0x390>)
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd f84e 	bl	8000220 <strcmp>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10b      	bne.n	80031a2 <ParseCommand+0x16e>
		requestedState = DRONE_STATE_EMERGENCY_STOP;
 800318a:	4b8f      	ldr	r3, [pc, #572]	@ (80033c8 <ParseCommand+0x394>)
 800318c:	2202      	movs	r2, #2
 800318e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*)"EMERGENCY STOP REQUESTED\r\n", 26, HAL_MAX_DELAY);
 8003190:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003194:	221a      	movs	r2, #26
 8003196:	498d      	ldr	r1, [pc, #564]	@ (80033cc <ParseCommand+0x398>)
 8003198:	4888      	ldr	r0, [pc, #544]	@ (80033bc <ParseCommand+0x388>)
 800319a:	f006 fcff 	bl	8009b9c <HAL_UART_Transmit>
		return 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	e3b4      	b.n	800390c <ParseCommand+0x8d8>
	}

	if (strcmp(cmd, "LAND") == 0) {
 80031a2:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80031a6:	498a      	ldr	r1, [pc, #552]	@ (80033d0 <ParseCommand+0x39c>)
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd f839 	bl	8000220 <strcmp>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10b      	bne.n	80031cc <ParseCommand+0x198>
		requestedState = DRONE_STATE_LANDING;
 80031b4:	4b84      	ldr	r3, [pc, #528]	@ (80033c8 <ParseCommand+0x394>)
 80031b6:	2203      	movs	r2, #3
 80031b8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*)"LANDING REQUESTED\r\n", 19, HAL_MAX_DELAY);
 80031ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031be:	2213      	movs	r2, #19
 80031c0:	4984      	ldr	r1, [pc, #528]	@ (80033d4 <ParseCommand+0x3a0>)
 80031c2:	487e      	ldr	r0, [pc, #504]	@ (80033bc <ParseCommand+0x388>)
 80031c4:	f006 fcea 	bl	8009b9c <HAL_UART_Transmit>
		return 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e39f      	b.n	800390c <ParseCommand+0x8d8>
	}
    if (strcmp(cmd, "ECHO") == 0) {
 80031cc:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80031d0:	4981      	ldr	r1, [pc, #516]	@ (80033d8 <ParseCommand+0x3a4>)
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f824 	bl	8000220 <strcmp>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d108      	bne.n	80031f0 <ParseCommand+0x1bc>
        HAL_UART_Transmit(&huart3, (uint8_t*)"ECHO\r\n", 6, HAL_MAX_DELAY);
 80031de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031e2:	2206      	movs	r2, #6
 80031e4:	497d      	ldr	r1, [pc, #500]	@ (80033dc <ParseCommand+0x3a8>)
 80031e6:	4875      	ldr	r0, [pc, #468]	@ (80033bc <ParseCommand+0x388>)
 80031e8:	f006 fcd8 	bl	8009b9c <HAL_UART_Transmit>
        return 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e38d      	b.n	800390c <ParseCommand+0x8d8>
    }
    // ARM
    if (strcmp(cmd, "ARM") == 0) {
 80031f0:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80031f4:	497a      	ldr	r1, [pc, #488]	@ (80033e0 <ParseCommand+0x3ac>)
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd f812 	bl	8000220 <strcmp>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <ParseCommand+0x1e4>
        ArmESCs();
 8003202:	f7fe fec3 	bl	8001f8c <ArmESCs>
        HAL_UART_Transmit(&huart3, (uint8_t*)"ARMED\r\n", 7, HAL_MAX_DELAY);
 8003206:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800320a:	2207      	movs	r2, #7
 800320c:	4975      	ldr	r1, [pc, #468]	@ (80033e4 <ParseCommand+0x3b0>)
 800320e:	486b      	ldr	r0, [pc, #428]	@ (80033bc <ParseCommand+0x388>)
 8003210:	f006 fcc4 	bl	8009b9c <HAL_UART_Transmit>
        return 0;
 8003214:	2300      	movs	r3, #0
 8003216:	e379      	b.n	800390c <ParseCommand+0x8d8>
    }
    // DISARM
    if (strcmp(cmd, "DISARM") == 0) {
 8003218:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800321c:	4972      	ldr	r1, [pc, #456]	@ (80033e8 <ParseCommand+0x3b4>)
 800321e:	4618      	mov	r0, r3
 8003220:	f7fc fffe 	bl	8000220 <strcmp>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d108      	bne.n	800323c <ParseCommand+0x208>
        HAL_UART_Transmit(&huart3, (uint8_t*)"DISARMED\r\n", 10, HAL_MAX_DELAY);
 800322a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800322e:	220a      	movs	r2, #10
 8003230:	496e      	ldr	r1, [pc, #440]	@ (80033ec <ParseCommand+0x3b8>)
 8003232:	4862      	ldr	r0, [pc, #392]	@ (80033bc <ParseCommand+0x388>)
 8003234:	f006 fcb2 	bl	8009b9c <HAL_UART_Transmit>
        return 0;
 8003238:	2300      	movs	r3, #0
 800323a:	e367      	b.n	800390c <ParseCommand+0x8d8>
    }
    // TEST-M
    if (strcmp(cmd, "TEST-M") == 0) {
 800323c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003240:	496b      	ldr	r1, [pc, #428]	@ (80033f0 <ParseCommand+0x3bc>)
 8003242:	4618      	mov	r0, r3
 8003244:	f7fc ffec 	bl	8000220 <strcmp>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10f      	bne.n	800326e <ParseCommand+0x23a>
    	requested_speed=1220;
 800324e:	4b69      	ldr	r3, [pc, #420]	@ (80033f4 <ParseCommand+0x3c0>)
 8003250:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 8003254:	601a      	str	r2, [r3, #0]
    	requestedState = DRONE_STATE_TEST_CYCLE;
 8003256:	4b5c      	ldr	r3, [pc, #368]	@ (80033c8 <ParseCommand+0x394>)
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart3, (uint8_t*)"TEST CYCLE\r\n", 12, HAL_MAX_DELAY);
 800325c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003260:	220c      	movs	r2, #12
 8003262:	4965      	ldr	r1, [pc, #404]	@ (80033f8 <ParseCommand+0x3c4>)
 8003264:	4855      	ldr	r0, [pc, #340]	@ (80033bc <ParseCommand+0x388>)
 8003266:	f006 fc99 	bl	8009b9c <HAL_UART_Transmit>
        return 0;
 800326a:	2300      	movs	r3, #0
 800326c:	e34e      	b.n	800390c <ParseCommand+0x8d8>
    }
    if (strncmp(cmd, "ST", 2) == 0) {
 800326e:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003272:	2202      	movs	r2, #2
 8003274:	4961      	ldr	r1, [pc, #388]	@ (80033fc <ParseCommand+0x3c8>)
 8003276:	4618      	mov	r0, r3
 8003278:	f00d f9fc 	bl	8010674 <strncmp>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d120      	bne.n	80032c4 <ParseCommand+0x290>
    	sscanf(cmd + 2, "%d", &requested_speed);
 8003282:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003286:	3302      	adds	r3, #2
 8003288:	4a5a      	ldr	r2, [pc, #360]	@ (80033f4 <ParseCommand+0x3c0>)
 800328a:	495d      	ldr	r1, [pc, #372]	@ (8003400 <ParseCommand+0x3cc>)
 800328c:	4618      	mov	r0, r3
 800328e:	f00d f8e5 	bl	801045c <siscanf>
		requestedState = DRONE_STATE_TEST_CYCLE;
 8003292:	4b4d      	ldr	r3, [pc, #308]	@ (80033c8 <ParseCommand+0x394>)
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
		char out[32];
		int n = snprintf(out, sizeof(out),"START in %d\r\n", requested_speed);
 8003298:	4b56      	ldr	r3, [pc, #344]	@ (80033f4 <ParseCommand+0x3c0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80032a0:	4a58      	ldr	r2, [pc, #352]	@ (8003404 <ParseCommand+0x3d0>)
 80032a2:	2120      	movs	r1, #32
 80032a4:	f00d f886 	bl	80103b4 <sniprintf>
 80032a8:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
		HAL_UART_Transmit(&huart3, (uint8_t*)out, n, HAL_MAX_DELAY);
 80032ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032ba:	4840      	ldr	r0, [pc, #256]	@ (80033bc <ParseCommand+0x388>)
 80032bc:	f006 fc6e 	bl	8009b9c <HAL_UART_Transmit>
		return 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e323      	b.n	800390c <ParseCommand+0x8d8>
	}
    // CALB
    if (strcmp(cmd, "CALB") == 0) {
 80032c4:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80032c8:	494f      	ldr	r1, [pc, #316]	@ (8003408 <ParseCommand+0x3d4>)
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fc ffa8 	bl	8000220 <strcmp>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <ParseCommand+0x2be>
        ICM_CalibrateGyro(bias);
 80032d6:	484d      	ldr	r0, [pc, #308]	@ (800340c <ParseCommand+0x3d8>)
 80032d8:	f7fe fd70 	bl	8001dbc <ICM_CalibrateGyro>
    	ICM_ResetOrientation();
 80032dc:	f7fe fd42 	bl	8001d64 <ICM_ResetOrientation>
        HAL_UART_Transmit(&huart3, (uint8_t*)"Reset Successfully\r\n", 20, HAL_MAX_DELAY);
 80032e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032e4:	2214      	movs	r2, #20
 80032e6:	494a      	ldr	r1, [pc, #296]	@ (8003410 <ParseCommand+0x3dc>)
 80032e8:	4834      	ldr	r0, [pc, #208]	@ (80033bc <ParseCommand+0x388>)
 80032ea:	f006 fc57 	bl	8009b9c <HAL_UART_Transmit>
        return 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e30c      	b.n	800390c <ParseCommand+0x8d8>
    }
    // GET_ACC-POS
    if (strcmp(cmd, "GET_ACC-POS") == 0) {
 80032f2:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80032f6:	4947      	ldr	r1, [pc, #284]	@ (8003414 <ParseCommand+0x3e0>)
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fc ff91 	bl	8000220 <strcmp>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	f040 808d 	bne.w	8003420 <ParseCommand+0x3ec>
    	ICM_GetEulerAnglesDeg(angles_deg);
 8003306:	4844      	ldr	r0, [pc, #272]	@ (8003418 <ParseCommand+0x3e4>)
 8003308:	f7fe fd04 	bl	8001d14 <ICM_GetEulerAnglesDeg>
        char out[128];
        int n = snprintf(out, sizeof(out),
            "ANG: %.2f,%.2f,%.2f; POS: %.2f,%.2f,%.2f\r\n",
			angles_deg[0], angles_deg[1], angles_deg[2], pos[0], pos[1], pos[2]);
 800330c:	4b42      	ldr	r3, [pc, #264]	@ (8003418 <ParseCommand+0x3e4>)
 800330e:	681b      	ldr	r3, [r3, #0]
        int n = snprintf(out, sizeof(out),
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd f951 	bl	80005b8 <__aeabi_f2d>
 8003316:	4604      	mov	r4, r0
 8003318:	460d      	mov	r5, r1
			angles_deg[0], angles_deg[1], angles_deg[2], pos[0], pos[1], pos[2]);
 800331a:	4b3f      	ldr	r3, [pc, #252]	@ (8003418 <ParseCommand+0x3e4>)
 800331c:	685b      	ldr	r3, [r3, #4]
        int n = snprintf(out, sizeof(out),
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd f94a 	bl	80005b8 <__aeabi_f2d>
 8003324:	4680      	mov	r8, r0
 8003326:	4689      	mov	r9, r1
			angles_deg[0], angles_deg[1], angles_deg[2], pos[0], pos[1], pos[2]);
 8003328:	4b3b      	ldr	r3, [pc, #236]	@ (8003418 <ParseCommand+0x3e4>)
 800332a:	689b      	ldr	r3, [r3, #8]
        int n = snprintf(out, sizeof(out),
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd f943 	bl	80005b8 <__aeabi_f2d>
 8003332:	4682      	mov	sl, r0
 8003334:	468b      	mov	fp, r1
			angles_deg[0], angles_deg[1], angles_deg[2], pos[0], pos[1], pos[2]);
 8003336:	4b1f      	ldr	r3, [pc, #124]	@ (80033b4 <ParseCommand+0x380>)
 8003338:	681b      	ldr	r3, [r3, #0]
        int n = snprintf(out, sizeof(out),
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd f93c 	bl	80005b8 <__aeabi_f2d>
 8003340:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
			angles_deg[0], angles_deg[1], angles_deg[2], pos[0], pos[1], pos[2]);
 8003344:	4b1b      	ldr	r3, [pc, #108]	@ (80033b4 <ParseCommand+0x380>)
 8003346:	685b      	ldr	r3, [r3, #4]
        int n = snprintf(out, sizeof(out),
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd f935 	bl	80005b8 <__aeabi_f2d>
 800334e:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
			angles_deg[0], angles_deg[1], angles_deg[2], pos[0], pos[1], pos[2]);
 8003352:	4b18      	ldr	r3, [pc, #96]	@ (80033b4 <ParseCommand+0x380>)
 8003354:	689b      	ldr	r3, [r3, #8]
        int n = snprintf(out, sizeof(out),
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd f92e 	bl	80005b8 <__aeabi_f2d>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003364:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8003368:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800336c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003370:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8003374:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003378:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800337c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003380:	e9cd 4500 	strd	r4, r5, [sp]
 8003384:	4a25      	ldr	r2, [pc, #148]	@ (800341c <ParseCommand+0x3e8>)
 8003386:	2180      	movs	r1, #128	@ 0x80
 8003388:	f00d f814 	bl	80103b4 <sniprintf>
 800338c:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
        HAL_UART_Transmit(&huart3, (uint8_t*)out, n, HAL_MAX_DELAY);
 8003390:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003394:	b29a      	uxth	r2, r3
 8003396:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800339a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800339e:	4807      	ldr	r0, [pc, #28]	@ (80033bc <ParseCommand+0x388>)
 80033a0:	f006 fbfc 	bl	8009b9c <HAL_UART_Transmit>
        return 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e2b1      	b.n	800390c <ParseCommand+0x8d8>
 80033a8:	08015674 	.word	0x08015674
 80033ac:	08015678 	.word	0x08015678
 80033b0:	200003d4 	.word	0x200003d4
 80033b4:	200003c8 	.word	0x200003c8
 80033b8:	08015684 	.word	0x08015684
 80033bc:	200006e0 	.word	0x200006e0
 80033c0:	08015690 	.word	0x08015690
 80033c4:	0801569c 	.word	0x0801569c
 80033c8:	20000379 	.word	0x20000379
 80033cc:	080156a4 	.word	0x080156a4
 80033d0:	080156c0 	.word	0x080156c0
 80033d4:	080156c8 	.word	0x080156c8
 80033d8:	080156dc 	.word	0x080156dc
 80033dc:	080156e4 	.word	0x080156e4
 80033e0:	080156ec 	.word	0x080156ec
 80033e4:	080156f0 	.word	0x080156f0
 80033e8:	080156f8 	.word	0x080156f8
 80033ec:	08015700 	.word	0x08015700
 80033f0:	0801570c 	.word	0x0801570c
 80033f4:	20000040 	.word	0x20000040
 80033f8:	08015714 	.word	0x08015714
 80033fc:	08015724 	.word	0x08015724
 8003400:	08015728 	.word	0x08015728
 8003404:	0801572c 	.word	0x0801572c
 8003408:	0801573c 	.word	0x0801573c
 800340c:	20000408 	.word	0x20000408
 8003410:	08015744 	.word	0x08015744
 8003414:	0801575c 	.word	0x0801575c
 8003418:	200003a4 	.word	0x200003a4
 800341c:	08015768 	.word	0x08015768
    }
    if (strncmp(cmd, "LQR", 3) == 0){
 8003420:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003424:	2203      	movs	r2, #3
 8003426:	49a6      	ldr	r1, [pc, #664]	@ (80036c0 <ParseCommand+0x68c>)
 8003428:	4618      	mov	r0, r3
 800342a:	f00d f923 	bl	8010674 <strncmp>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d153      	bne.n	80034dc <ParseCommand+0x4a8>
    	requestedState = DRONE_STATE_LQR;
 8003434:	4ba3      	ldr	r3, [pc, #652]	@ (80036c4 <ParseCommand+0x690>)
 8003436:	2204      	movs	r2, #4
 8003438:	701a      	strb	r2, [r3, #0]
    	float x, y, z;
		if (sscanf(cmd + 3, "%f,%f,%f", &x, &y, &z) == 3) {
 800343a:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 800343e:	3003      	adds	r0, #3
 8003440:	f107 01dc 	add.w	r1, r7, #220	@ 0xdc
 8003444:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8003448:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	460b      	mov	r3, r1
 8003450:	499d      	ldr	r1, [pc, #628]	@ (80036c8 <ParseCommand+0x694>)
 8003452:	f00d f803 	bl	801045c <siscanf>
 8003456:	4603      	mov	r3, r0
 8003458:	2b03      	cmp	r3, #3
 800345a:	d110      	bne.n	800347e <ParseCommand+0x44a>
			memcpy(prev_pos, pos, 3*sizeof( float ) );
 800345c:	4b9b      	ldr	r3, [pc, #620]	@ (80036cc <ParseCommand+0x698>)
 800345e:	4a9c      	ldr	r2, [pc, #624]	@ (80036d0 <ParseCommand+0x69c>)
 8003460:	ca07      	ldmia	r2, {r0, r1, r2}
 8003462:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			pos_req[0] = x;
 8003466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800346a:	4a9a      	ldr	r2, [pc, #616]	@ (80036d4 <ParseCommand+0x6a0>)
 800346c:	6013      	str	r3, [r2, #0]
			pos_req[1] = y;
 800346e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003472:	4a98      	ldr	r2, [pc, #608]	@ (80036d4 <ParseCommand+0x6a0>)
 8003474:	6053      	str	r3, [r2, #4]
			pos_req[2] = z;
 8003476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800347a:	4a96      	ldr	r2, [pc, #600]	@ (80036d4 <ParseCommand+0x6a0>)
 800347c:	6093      	str	r3, [r2, #8]

			//HAL_UART_Transmit(&huart3, (uint8_t*)"POS_SET\r\n", 9, HAL_MAX_DELAY);
		}
    	//sscanf(cmd + 3, "%f,%f,%f", &pos_req[0],&pos_req[1],pos_req[2]);
    	char out[64];
    	int n = snprintf(out, sizeof(out),"POS REQ: %.2f,%.2f,%.2f\r\n", pos_req[0], pos_req[1], pos_req[2]);
 800347e:	4b95      	ldr	r3, [pc, #596]	@ (80036d4 <ParseCommand+0x6a0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd f898 	bl	80005b8 <__aeabi_f2d>
 8003488:	4604      	mov	r4, r0
 800348a:	460d      	mov	r5, r1
 800348c:	4b91      	ldr	r3, [pc, #580]	@ (80036d4 <ParseCommand+0x6a0>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd f891 	bl	80005b8 <__aeabi_f2d>
 8003496:	4680      	mov	r8, r0
 8003498:	4689      	mov	r9, r1
 800349a:	4b8e      	ldr	r3, [pc, #568]	@ (80036d4 <ParseCommand+0x6a0>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd f88a 	bl	80005b8 <__aeabi_f2d>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80034ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80034b0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80034b4:	e9cd 4500 	strd	r4, r5, [sp]
 80034b8:	4a87      	ldr	r2, [pc, #540]	@ (80036d8 <ParseCommand+0x6a4>)
 80034ba:	2140      	movs	r1, #64	@ 0x40
 80034bc:	f00c ff7a 	bl	80103b4 <sniprintf>
 80034c0:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
    	HAL_UART_Transmit(&huart3, (uint8_t*)out, n, HAL_MAX_DELAY);
 80034c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80034ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034d2:	4882      	ldr	r0, [pc, #520]	@ (80036dc <ParseCommand+0x6a8>)
 80034d4:	f006 fb62 	bl	8009b9c <HAL_UART_Transmit>
		//HAL_Delay(4000);
		return 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	e217      	b.n	800390c <ParseCommand+0x8d8>
//            "GYRO: %.2f,%.2f,%.2f\r\n",
//            gyro[0], gyro[1], gyro[2]);
//        HAL_UART_Transmit(&huart3, (uint8_t*)out, n, HAL_MAX_DELAY);
//        return 0;
//    }
    if (strcmp(cmd, "GET_POS") == 0) {
 80034dc:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80034e0:	497f      	ldr	r1, [pc, #508]	@ (80036e0 <ParseCommand+0x6ac>)
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fc fe9c 	bl	8000220 <strcmp>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d14d      	bne.n	800358a <ParseCommand+0x556>
		char out[128];
		int n = snprintf(out, sizeof(out),
			"POS: %.2f,%.2f,%.2f; PREV: %.2f,%.2f,%.2f\r\n",
			pos[0], pos[1], pos[2], prev_pos[0], prev_pos[1], prev_pos[2]);
 80034ee:	4b78      	ldr	r3, [pc, #480]	@ (80036d0 <ParseCommand+0x69c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
		int n = snprintf(out, sizeof(out),
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd f860 	bl	80005b8 <__aeabi_f2d>
 80034f8:	4604      	mov	r4, r0
 80034fa:	460d      	mov	r5, r1
			pos[0], pos[1], pos[2], prev_pos[0], prev_pos[1], prev_pos[2]);
 80034fc:	4b74      	ldr	r3, [pc, #464]	@ (80036d0 <ParseCommand+0x69c>)
 80034fe:	685b      	ldr	r3, [r3, #4]
		int n = snprintf(out, sizeof(out),
 8003500:	4618      	mov	r0, r3
 8003502:	f7fd f859 	bl	80005b8 <__aeabi_f2d>
 8003506:	4680      	mov	r8, r0
 8003508:	4689      	mov	r9, r1
			pos[0], pos[1], pos[2], prev_pos[0], prev_pos[1], prev_pos[2]);
 800350a:	4b71      	ldr	r3, [pc, #452]	@ (80036d0 <ParseCommand+0x69c>)
 800350c:	689b      	ldr	r3, [r3, #8]
		int n = snprintf(out, sizeof(out),
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd f852 	bl	80005b8 <__aeabi_f2d>
 8003514:	4682      	mov	sl, r0
 8003516:	468b      	mov	fp, r1
			pos[0], pos[1], pos[2], prev_pos[0], prev_pos[1], prev_pos[2]);
 8003518:	4b6c      	ldr	r3, [pc, #432]	@ (80036cc <ParseCommand+0x698>)
 800351a:	681b      	ldr	r3, [r3, #0]
		int n = snprintf(out, sizeof(out),
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd f84b 	bl	80005b8 <__aeabi_f2d>
 8003522:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
			pos[0], pos[1], pos[2], prev_pos[0], prev_pos[1], prev_pos[2]);
 8003526:	4b69      	ldr	r3, [pc, #420]	@ (80036cc <ParseCommand+0x698>)
 8003528:	685b      	ldr	r3, [r3, #4]
		int n = snprintf(out, sizeof(out),
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd f844 	bl	80005b8 <__aeabi_f2d>
 8003530:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
			pos[0], pos[1], pos[2], prev_pos[0], prev_pos[1], prev_pos[2]);
 8003534:	4b65      	ldr	r3, [pc, #404]	@ (80036cc <ParseCommand+0x698>)
 8003536:	689b      	ldr	r3, [r3, #8]
		int n = snprintf(out, sizeof(out),
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd f83d 	bl	80005b8 <__aeabi_f2d>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003546:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800354a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800354e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003552:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8003556:	ed8d 7b06 	vstr	d7, [sp, #24]
 800355a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800355e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003562:	e9cd 4500 	strd	r4, r5, [sp]
 8003566:	4a5f      	ldr	r2, [pc, #380]	@ (80036e4 <ParseCommand+0x6b0>)
 8003568:	2180      	movs	r1, #128	@ 0x80
 800356a:	f00c ff23 	bl	80103b4 <sniprintf>
 800356e:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
		HAL_UART_Transmit(&huart3, (uint8_t*)out, n, HAL_MAX_DELAY);
 8003572:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003576:	b29a      	uxth	r2, r3
 8003578:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800357c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003580:	4856      	ldr	r0, [pc, #344]	@ (80036dc <ParseCommand+0x6a8>)
 8003582:	f006 fb0b 	bl	8009b9c <HAL_UART_Transmit>
		return 0;
 8003586:	2300      	movs	r3, #0
 8003588:	e1c0      	b.n	800390c <ParseCommand+0x8d8>
	}
    // SET_COEFFS:k1,k2,...,k12
    if (strncmp(cmd, "SC", 2) == 0) {
 800358a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800358e:	2202      	movs	r2, #2
 8003590:	4955      	ldr	r1, [pc, #340]	@ (80036e8 <ParseCommand+0x6b4>)
 8003592:	4618      	mov	r0, r3
 8003594:	f00d f86e 	bl	8010674 <strncmp>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 80c0 	bne.w	8003720 <ParseCommand+0x6ec>
    	char out[64];
    	int n = snprintf(out, sizeof(out), "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\r\n", k1,k2,k3,k4,k5,k6,k7,k8,k9,k10,k11,k12);
 80035a0:	4b52      	ldr	r3, [pc, #328]	@ (80036ec <ParseCommand+0x6b8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fd f807 	bl	80005b8 <__aeabi_f2d>
 80035aa:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 80035ae:	4b50      	ldr	r3, [pc, #320]	@ (80036f0 <ParseCommand+0x6bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fd f800 	bl	80005b8 <__aeabi_f2d>
 80035b8:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 80035bc:	4b4d      	ldr	r3, [pc, #308]	@ (80036f4 <ParseCommand+0x6c0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fc fff9 	bl	80005b8 <__aeabi_f2d>
 80035c6:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 80035ca:	4b4b      	ldr	r3, [pc, #300]	@ (80036f8 <ParseCommand+0x6c4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fc fff2 	bl	80005b8 <__aeabi_f2d>
 80035d4:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80035d8:	4b48      	ldr	r3, [pc, #288]	@ (80036fc <ParseCommand+0x6c8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ffeb 	bl	80005b8 <__aeabi_f2d>
 80035e2:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80035e6:	4b46      	ldr	r3, [pc, #280]	@ (8003700 <ParseCommand+0x6cc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fc ffe4 	bl	80005b8 <__aeabi_f2d>
 80035f0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80035f4:	4b43      	ldr	r3, [pc, #268]	@ (8003704 <ParseCommand+0x6d0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc ffdd 	bl	80005b8 <__aeabi_f2d>
 80035fe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003602:	4b41      	ldr	r3, [pc, #260]	@ (8003708 <ParseCommand+0x6d4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fc ffd6 	bl	80005b8 <__aeabi_f2d>
 800360c:	e9c7 0100 	strd	r0, r1, [r7]
 8003610:	4b3e      	ldr	r3, [pc, #248]	@ (800370c <ParseCommand+0x6d8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7fc ffcf 	bl	80005b8 <__aeabi_f2d>
 800361a:	4682      	mov	sl, r0
 800361c:	468b      	mov	fp, r1
 800361e:	4b3c      	ldr	r3, [pc, #240]	@ (8003710 <ParseCommand+0x6dc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fc ffc8 	bl	80005b8 <__aeabi_f2d>
 8003628:	4680      	mov	r8, r0
 800362a:	4689      	mov	r9, r1
 800362c:	4b39      	ldr	r3, [pc, #228]	@ (8003714 <ParseCommand+0x6e0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc ffc1 	bl	80005b8 <__aeabi_f2d>
 8003636:	4604      	mov	r4, r0
 8003638:	460d      	mov	r5, r1
 800363a:	4b37      	ldr	r3, [pc, #220]	@ (8003718 <ParseCommand+0x6e4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7fc ffba 	bl	80005b8 <__aeabi_f2d>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800364c:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8003650:	e9cd 4514 	strd	r4, r5, [sp, #80]	@ 0x50
 8003654:	e9cd 8912 	strd	r8, r9, [sp, #72]	@ 0x48
 8003658:	e9cd ab10 	strd	sl, fp, [sp, #64]	@ 0x40
 800365c:	ed97 7b00 	vldr	d7, [r7]
 8003660:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003664:	ed97 7b02 	vldr	d7, [r7, #8]
 8003668:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800366c:	ed97 7b04 	vldr	d7, [r7, #16]
 8003670:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8003674:	ed97 7b06 	vldr	d7, [r7, #24]
 8003678:	ed8d 7b08 	vstr	d7, [sp, #32]
 800367c:	ed97 7b08 	vldr	d7, [r7, #32]
 8003680:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003684:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8003688:	ed8d 7b04 	vstr	d7, [sp, #16]
 800368c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003690:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003694:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8003698:	ed8d 7b00 	vstr	d7, [sp]
 800369c:	4a1f      	ldr	r2, [pc, #124]	@ (800371c <ParseCommand+0x6e8>)
 800369e:	2140      	movs	r1, #64	@ 0x40
 80036a0:	f00c fe88 	bl	80103b4 <sniprintf>
 80036a4:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
		HAL_UART_Transmit(&huart3, (uint8_t*)out, n, HAL_MAX_DELAY);
 80036a8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80036b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036b6:	4809      	ldr	r0, [pc, #36]	@ (80036dc <ParseCommand+0x6a8>)
 80036b8:	f006 fa70 	bl	8009b9c <HAL_UART_Transmit>
        return 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	e125      	b.n	800390c <ParseCommand+0x8d8>
 80036c0:	08015794 	.word	0x08015794
 80036c4:	20000379 	.word	0x20000379
 80036c8:	08015678 	.word	0x08015678
 80036cc:	200003d4 	.word	0x200003d4
 80036d0:	200003c8 	.word	0x200003c8
 80036d4:	200003e0 	.word	0x200003e0
 80036d8:	08015798 	.word	0x08015798
 80036dc:	200006e0 	.word	0x200006e0
 80036e0:	080157b4 	.word	0x080157b4
 80036e4:	080157bc 	.word	0x080157bc
 80036e8:	080157e8 	.word	0x080157e8
 80036ec:	20000018 	.word	0x20000018
 80036f0:	2000001c 	.word	0x2000001c
 80036f4:	20000020 	.word	0x20000020
 80036f8:	20000024 	.word	0x20000024
 80036fc:	20000028 	.word	0x20000028
 8003700:	2000002c 	.word	0x2000002c
 8003704:	20000030 	.word	0x20000030
 8003708:	20000034 	.word	0x20000034
 800370c:	20000038 	.word	0x20000038
 8003710:	2000003c 	.word	0x2000003c
 8003714:	200003f8 	.word	0x200003f8
 8003718:	200003fc 	.word	0x200003fc
 800371c:	080157ec 	.word	0x080157ec
    }
    if (strncmp(cmd, "SSC", 3)==0){
 8003720:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003724:	2203      	movs	r2, #3
 8003726:	497c      	ldr	r1, [pc, #496]	@ (8003918 <ParseCommand+0x8e4>)
 8003728:	4618      	mov	r0, r3
 800372a:	f00c ffa3 	bl	8010674 <strncmp>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d12e      	bne.n	8003792 <ParseCommand+0x75e>
    	char out[64];
    	float k=0.0;
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    	if (sscanf(cmd+3, "%f", &k) == 1){
 800373c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003740:	3303      	adds	r3, #3
 8003742:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8003746:	4975      	ldr	r1, [pc, #468]	@ (800391c <ParseCommand+0x8e8>)
 8003748:	4618      	mov	r0, r3
 800374a:	f00c fe87 	bl	801045c <siscanf>
 800374e:	4603      	mov	r3, r0
 8003750:	2b01      	cmp	r3, #1
 8003752:	d103      	bne.n	800375c <ParseCommand+0x728>
    		scale = k;
 8003754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003758:	4a71      	ldr	r2, [pc, #452]	@ (8003920 <ParseCommand+0x8ec>)
 800375a:	6013      	str	r3, [r2, #0]
    	}
    	int l = snprintf(out, sizeof(out),"scale SET TO %.2f\r\n", scale);
 800375c:	4b70      	ldr	r3, [pc, #448]	@ (8003920 <ParseCommand+0x8ec>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7fc ff29 	bl	80005b8 <__aeabi_f2d>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800376e:	e9cd 2300 	strd	r2, r3, [sp]
 8003772:	4a6c      	ldr	r2, [pc, #432]	@ (8003924 <ParseCommand+0x8f0>)
 8003774:	2140      	movs	r1, #64	@ 0x40
 8003776:	f00c fe1d 	bl	80103b4 <sniprintf>
 800377a:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148
		HAL_UART_Transmit(&huart3, (uint8_t*)out, l, HAL_MAX_DELAY);
 800377e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8003782:	b29a      	uxth	r2, r3
 8003784:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8003788:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800378c:	4866      	ldr	r0, [pc, #408]	@ (8003928 <ParseCommand+0x8f4>)
 800378e:	f006 fa05 	bl	8009b9c <HAL_UART_Transmit>
    }

    if (strncmp(cmd, "SK", 2) == 0) {
 8003792:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003796:	2202      	movs	r2, #2
 8003798:	4964      	ldr	r1, [pc, #400]	@ (800392c <ParseCommand+0x8f8>)
 800379a:	4618      	mov	r0, r3
 800379c:	f00c ff6a 	bl	8010674 <strncmp>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 80a1 	bne.w	80038ea <ParseCommand+0x8b6>
    	int n =0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    	float k=0.0;
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		if (sscanf(cmd + 2, "%d,%f", &n, &k) == 2) {
 80037b6:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 80037ba:	3002      	adds	r0, #2
 80037bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80037c0:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 80037c4:	495a      	ldr	r1, [pc, #360]	@ (8003930 <ParseCommand+0x8fc>)
 80037c6:	f00c fe49 	bl	801045c <siscanf>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d17a      	bne.n	80038c6 <ParseCommand+0x892>
			char out[64];
			switch (n){
 80037d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80037d4:	3b01      	subs	r3, #1
 80037d6:	2b0b      	cmp	r3, #11
 80037d8:	d856      	bhi.n	8003888 <ParseCommand+0x854>
 80037da:	a201      	add	r2, pc, #4	@ (adr r2, 80037e0 <ParseCommand+0x7ac>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	08003811 	.word	0x08003811
 80037e4:	0800381b 	.word	0x0800381b
 80037e8:	08003825 	.word	0x08003825
 80037ec:	0800382f 	.word	0x0800382f
 80037f0:	08003839 	.word	0x08003839
 80037f4:	08003843 	.word	0x08003843
 80037f8:	0800384d 	.word	0x0800384d
 80037fc:	08003857 	.word	0x08003857
 8003800:	08003861 	.word	0x08003861
 8003804:	0800386b 	.word	0x0800386b
 8003808:	08003875 	.word	0x08003875
 800380c:	0800387f 	.word	0x0800387f
			case 1:
				k1=k;
 8003810:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003814:	4a47      	ldr	r2, [pc, #284]	@ (8003934 <ParseCommand+0x900>)
 8003816:	6013      	str	r3, [r2, #0]
				break;
 8003818:	e036      	b.n	8003888 <ParseCommand+0x854>
			case 2:
				k2=k;
 800381a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800381e:	4a46      	ldr	r2, [pc, #280]	@ (8003938 <ParseCommand+0x904>)
 8003820:	6013      	str	r3, [r2, #0]
				break;
 8003822:	e031      	b.n	8003888 <ParseCommand+0x854>
			case 3:
				k3=k;
 8003824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003828:	4a44      	ldr	r2, [pc, #272]	@ (800393c <ParseCommand+0x908>)
 800382a:	6013      	str	r3, [r2, #0]
				break;
 800382c:	e02c      	b.n	8003888 <ParseCommand+0x854>
			case 4:
				k4=k;
 800382e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003832:	4a43      	ldr	r2, [pc, #268]	@ (8003940 <ParseCommand+0x90c>)
 8003834:	6013      	str	r3, [r2, #0]
				break;
 8003836:	e027      	b.n	8003888 <ParseCommand+0x854>
			case 5:
				k5=k;
 8003838:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800383c:	4a41      	ldr	r2, [pc, #260]	@ (8003944 <ParseCommand+0x910>)
 800383e:	6013      	str	r3, [r2, #0]
				break;
 8003840:	e022      	b.n	8003888 <ParseCommand+0x854>
			case 6:
				k6=k;
 8003842:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003846:	4a40      	ldr	r2, [pc, #256]	@ (8003948 <ParseCommand+0x914>)
 8003848:	6013      	str	r3, [r2, #0]
				break;
 800384a:	e01d      	b.n	8003888 <ParseCommand+0x854>
			case 7:
				k7=k;
 800384c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003850:	4a3e      	ldr	r2, [pc, #248]	@ (800394c <ParseCommand+0x918>)
 8003852:	6013      	str	r3, [r2, #0]
				break;
 8003854:	e018      	b.n	8003888 <ParseCommand+0x854>
			case 8:
				k8=k;
 8003856:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800385a:	4a3d      	ldr	r2, [pc, #244]	@ (8003950 <ParseCommand+0x91c>)
 800385c:	6013      	str	r3, [r2, #0]
				break;
 800385e:	e013      	b.n	8003888 <ParseCommand+0x854>
			case 9:
				k9=k;
 8003860:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003864:	4a3b      	ldr	r2, [pc, #236]	@ (8003954 <ParseCommand+0x920>)
 8003866:	6013      	str	r3, [r2, #0]
				break;
 8003868:	e00e      	b.n	8003888 <ParseCommand+0x854>
			case 10:
				k10=k;
 800386a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800386e:	4a3a      	ldr	r2, [pc, #232]	@ (8003958 <ParseCommand+0x924>)
 8003870:	6013      	str	r3, [r2, #0]
				break;
 8003872:	e009      	b.n	8003888 <ParseCommand+0x854>
			case 11:
				k11=k;
 8003874:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003878:	4a38      	ldr	r2, [pc, #224]	@ (800395c <ParseCommand+0x928>)
 800387a:	6013      	str	r3, [r2, #0]
				break;
 800387c:	e004      	b.n	8003888 <ParseCommand+0x854>
			case 12:
				k12=k;
 800387e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003882:	4a37      	ldr	r2, [pc, #220]	@ (8003960 <ParseCommand+0x92c>)
 8003884:	6013      	str	r3, [r2, #0]
				break;
 8003886:	bf00      	nop
			}
			int l = snprintf(out, sizeof(out),"K%d SET TO %.2f\r\n", n,k);
 8003888:	f8d7 40d0 	ldr.w	r4, [r7, #208]	@ 0xd0
 800388c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003890:	4618      	mov	r0, r3
 8003892:	f7fc fe91 	bl	80005b8 <__aeabi_f2d>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800389e:	e9cd 2300 	strd	r2, r3, [sp]
 80038a2:	4623      	mov	r3, r4
 80038a4:	4a2f      	ldr	r2, [pc, #188]	@ (8003964 <ParseCommand+0x930>)
 80038a6:	2140      	movs	r1, #64	@ 0x40
 80038a8:	f00c fd84 	bl	80103b4 <sniprintf>
 80038ac:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
			HAL_UART_Transmit(&huart3, (uint8_t*)out, l, HAL_MAX_DELAY);
 80038b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80038ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038be:	481a      	ldr	r0, [pc, #104]	@ (8003928 <ParseCommand+0x8f4>)
 80038c0:	f006 f96c 	bl	8009b9c <HAL_UART_Transmit>
 80038c4:	e00f      	b.n	80038e6 <ParseCommand+0x8b2>
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*)buf, Len, HAL_MAX_DELAY);
 80038c6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80038ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80038d6:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 80038da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038de:	6809      	ldr	r1, [r1, #0]
 80038e0:	4811      	ldr	r0, [pc, #68]	@ (8003928 <ParseCommand+0x8f4>)
 80038e2:	f006 f95b 	bl	8009b9c <HAL_UART_Transmit>
		}
		return 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e010      	b.n	800390c <ParseCommand+0x8d8>
        }
    // Неизвестная команда
    HAL_UART_Transmit(&huart3, (uint8_t*)buf, Len, HAL_MAX_DELAY);
 80038ea:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80038ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80038fa:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 80038fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003902:	6809      	ldr	r1, [r1, #0]
 8003904:	4808      	ldr	r0, [pc, #32]	@ (8003928 <ParseCommand+0x8f4>)
 8003906:	f006 f949 	bl	8009b9c <HAL_UART_Transmit>
    return 1;
 800390a:	2301      	movs	r3, #1
}
 800390c:	4618      	mov	r0, r3
 800390e:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8003912:	46bd      	mov	sp, r7
 8003914:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003918:	0801582c 	.word	0x0801582c
 800391c:	08015830 	.word	0x08015830
 8003920:	2000005c 	.word	0x2000005c
 8003924:	08015834 	.word	0x08015834
 8003928:	200006e0 	.word	0x200006e0
 800392c:	08015848 	.word	0x08015848
 8003930:	0801584c 	.word	0x0801584c
 8003934:	20000018 	.word	0x20000018
 8003938:	2000001c 	.word	0x2000001c
 800393c:	20000020 	.word	0x20000020
 8003940:	20000024 	.word	0x20000024
 8003944:	20000028 	.word	0x20000028
 8003948:	2000002c 	.word	0x2000002c
 800394c:	20000030 	.word	0x20000030
 8003950:	20000034 	.word	0x20000034
 8003954:	20000038 	.word	0x20000038
 8003958:	2000003c 	.word	0x2000003c
 800395c:	200003f8 	.word	0x200003f8
 8003960:	200003fc 	.word	0x200003fc
 8003964:	08015854 	.word	0x08015854

08003968 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	80fb      	strh	r3, [r7, #6]
//        // Если INT_CONFIG без latch, очищать статус не нужно.
//        // Если latch=1, статус сбрасывается чтением INT_SOURCE:
//        // uint8_t status;
//        // ICM_ReadRegs(0x56, &status, 1);
//    }
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <HAL_UART_RxCpltCallback>:

uint8_t copy_rx;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
    cmd_buf[cmd_idx++] = rx_byte;
 8003988:	4b17      	ldr	r3, [pc, #92]	@ (80039e8 <HAL_UART_RxCpltCallback+0x68>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	b2d1      	uxtb	r1, r2
 8003990:	4a15      	ldr	r2, [pc, #84]	@ (80039e8 <HAL_UART_RxCpltCallback+0x68>)
 8003992:	7011      	strb	r1, [r2, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	4b15      	ldr	r3, [pc, #84]	@ (80039ec <HAL_UART_RxCpltCallback+0x6c>)
 8003998:	7819      	ldrb	r1, [r3, #0]
 800399a:	4b15      	ldr	r3, [pc, #84]	@ (80039f0 <HAL_UART_RxCpltCallback+0x70>)
 800399c:	5499      	strb	r1, [r3, r2]
    // конец команды: ';' или '\n' или переполнение буфера
    if (rx_byte == ';' || rx_byte == '\n' || cmd_idx >= RX_BUF_SIZE-1) {
 800399e:	4b13      	ldr	r3, [pc, #76]	@ (80039ec <HAL_UART_RxCpltCallback+0x6c>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b3b      	cmp	r3, #59	@ 0x3b
 80039a4:	d007      	beq.n	80039b6 <HAL_UART_RxCpltCallback+0x36>
 80039a6:	4b11      	ldr	r3, [pc, #68]	@ (80039ec <HAL_UART_RxCpltCallback+0x6c>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b0a      	cmp	r3, #10
 80039ac:	d003      	beq.n	80039b6 <HAL_UART_RxCpltCallback+0x36>
 80039ae:	4b0e      	ldr	r3, [pc, #56]	@ (80039e8 <HAL_UART_RxCpltCallback+0x68>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b0e      	cmp	r3, #14
 80039b4:	d90e      	bls.n	80039d4 <HAL_UART_RxCpltCallback+0x54>
        cmd_buf[cmd_idx] = '\0';
 80039b6:	4b0c      	ldr	r3, [pc, #48]	@ (80039e8 <HAL_UART_RxCpltCallback+0x68>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	4b0c      	ldr	r3, [pc, #48]	@ (80039f0 <HAL_UART_RxCpltCallback+0x70>)
 80039be:	2100      	movs	r1, #0
 80039c0:	5499      	strb	r1, [r3, r2]
        ParseCommand(cmd_buf, cmd_idx);
 80039c2:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <HAL_UART_RxCpltCallback+0x68>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	4619      	mov	r1, r3
 80039c8:	4809      	ldr	r0, [pc, #36]	@ (80039f0 <HAL_UART_RxCpltCallback+0x70>)
 80039ca:	f7ff fb33 	bl	8003034 <ParseCommand>
        cmd_idx = 0;
 80039ce:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <HAL_UART_RxCpltCallback+0x68>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 80039d4:	2201      	movs	r2, #1
 80039d6:	4905      	ldr	r1, [pc, #20]	@ (80039ec <HAL_UART_RxCpltCallback+0x6c>)
 80039d8:	4806      	ldr	r0, [pc, #24]	@ (80039f4 <HAL_UART_RxCpltCallback+0x74>)
 80039da:	f006 f968 	bl	8009cae <HAL_UART_Receive_IT>
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000394 	.word	0x20000394
 80039ec:	20000381 	.word	0x20000381
 80039f0:	20000384 	.word	0x20000384
 80039f4:	200006e0 	.word	0x200006e0

080039f8 <USB_CDC_RxHandler>:

void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)Buf, Len, 10);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	230a      	movs	r3, #10
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4803      	ldr	r0, [pc, #12]	@ (8003a18 <USB_CDC_RxHandler+0x20>)
 8003a0c:	f006 f8c6 	bl	8009b9c <HAL_UART_Transmit>
//	if (ParseCommand((const char*)Buf, Len) == 1){
//		//CDC_Transmit_FS(Buf, Len);
//		HAL_UART_Transmit(&huart3, (uint8_t*)Buf, Len, 10);
//	}
}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	200006e0 	.word	0x200006e0

08003a1c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003a22:	463b      	mov	r3, r7
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003a2e:	f000 fde5 	bl	80045fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003a32:	2301      	movs	r3, #1
 8003a34:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003a3e:	231f      	movs	r3, #31
 8003a40:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003a42:	2387      	movs	r3, #135	@ 0x87
 8003a44:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003a52:	2301      	movs	r3, #1
 8003a54:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003a5e:	463b      	mov	r3, r7
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fe03 	bl	800466c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003a66:	2004      	movs	r0, #4
 8003a68:	f000 fde0 	bl	800462c <HAL_MPU_Enable>

}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a78:	b672      	cpsid	i
}
 8003a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a7c:	bf00      	nop
 8003a7e:	e7fd      	b.n	8003a7c <Error_Handler+0x8>

08003a80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a86:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac4 <HAL_MspInit+0x44>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac4 <HAL_MspInit+0x44>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a92:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac4 <HAL_MspInit+0x44>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9e:	4b09      	ldr	r3, [pc, #36]	@ (8003ac4 <HAL_MspInit+0x44>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	4a08      	ldr	r2, [pc, #32]	@ (8003ac4 <HAL_MspInit+0x44>)
 8003aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003aaa:	4b06      	ldr	r3, [pc, #24]	@ (8003ac4 <HAL_MspInit+0x44>)
 8003aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800

08003ac8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	@ 0x28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	60da      	str	r2, [r3, #12]
 8003ade:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b54 <HAL_SPI_MspInit+0x8c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d12f      	bne.n	8003b4a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003aea:	4b1b      	ldr	r3, [pc, #108]	@ (8003b58 <HAL_SPI_MspInit+0x90>)
 8003aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aee:	4a1a      	ldr	r2, [pc, #104]	@ (8003b58 <HAL_SPI_MspInit+0x90>)
 8003af0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003af6:	4b18      	ldr	r3, [pc, #96]	@ (8003b58 <HAL_SPI_MspInit+0x90>)
 8003af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b02:	4b15      	ldr	r3, [pc, #84]	@ (8003b58 <HAL_SPI_MspInit+0x90>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b06:	4a14      	ldr	r2, [pc, #80]	@ (8003b58 <HAL_SPI_MspInit+0x90>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b0e:	4b12      	ldr	r3, [pc, #72]	@ (8003b58 <HAL_SPI_MspInit+0x90>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b1a:	23e0      	movs	r3, #224	@ 0xe0
 8003b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b26:	2303      	movs	r3, #3
 8003b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b2a:	2305      	movs	r3, #5
 8003b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b2e:	f107 0314 	add.w	r3, r7, #20
 8003b32:	4619      	mov	r1, r3
 8003b34:	4809      	ldr	r0, [pc, #36]	@ (8003b5c <HAL_SPI_MspInit+0x94>)
 8003b36:	f001 f955 	bl	8004de4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	2023      	movs	r0, #35	@ 0x23
 8003b40:	f000 fd25 	bl	800458e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003b44:	2023      	movs	r0, #35	@ 0x23
 8003b46:	f000 fd3e 	bl	80045c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003b4a:	bf00      	nop
 8003b4c:	3728      	adds	r7, #40	@ 0x28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40013000 	.word	0x40013000
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40020000 	.word	0x40020000

08003b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b70:	d17a      	bne.n	8003c68 <HAL_TIM_Base_MspInit+0x108>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b72:	4b8c      	ldr	r3, [pc, #560]	@ (8003da4 <HAL_TIM_Base_MspInit+0x244>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	4a8b      	ldr	r2, [pc, #556]	@ (8003da4 <HAL_TIM_Base_MspInit+0x244>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b7e:	4b89      	ldr	r3, [pc, #548]	@ (8003da4 <HAL_TIM_Base_MspInit+0x244>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8003b8a:	4b87      	ldr	r3, [pc, #540]	@ (8003da8 <HAL_TIM_Base_MspInit+0x248>)
 8003b8c:	4a87      	ldr	r2, [pc, #540]	@ (8003dac <HAL_TIM_Base_MspInit+0x24c>)
 8003b8e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8003b90:	4b85      	ldr	r3, [pc, #532]	@ (8003da8 <HAL_TIM_Base_MspInit+0x248>)
 8003b92:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003b96:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b98:	4b83      	ldr	r3, [pc, #524]	@ (8003da8 <HAL_TIM_Base_MspInit+0x248>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b9e:	4b82      	ldr	r3, [pc, #520]	@ (8003da8 <HAL_TIM_Base_MspInit+0x248>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003ba4:	4b80      	ldr	r3, [pc, #512]	@ (8003da8 <HAL_TIM_Base_MspInit+0x248>)
 8003ba6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003baa:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bac:	4b7e      	ldr	r3, [pc, #504]	@ (8003da8 <HAL_TIM_Base_MspInit+0x248>)
 8003bae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003bb2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003bb4:	4b7c      	ldr	r3, [pc, #496]	@ (8003da8 <HAL_TIM_Base_MspInit+0x248>)
 8003bb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003bba:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8003bbc:	4b7a      	ldr	r3, [pc, #488]	@ (8003da8 <HAL_TIM_Base_MspInit+0x248>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003bc2:	4b79      	ldr	r3, [pc, #484]	@ (8003da8 <HAL_TIM_Base_MspInit+0x248>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bc8:	4b77      	ldr	r3, [pc, #476]	@ (8003da8 <HAL_TIM_Base_MspInit+0x248>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8003bce:	4876      	ldr	r0, [pc, #472]	@ (8003da8 <HAL_TIM_Base_MspInit+0x248>)
 8003bd0:	f000 fd8c 	bl	80046ec <HAL_DMA_Init>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 8003bda:	f7ff ff4b 	bl	8003a74 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a71      	ldr	r2, [pc, #452]	@ (8003da8 <HAL_TIM_Base_MspInit+0x248>)
 8003be2:	625a      	str	r2, [r3, #36]	@ 0x24
 8003be4:	4a70      	ldr	r2, [pc, #448]	@ (8003da8 <HAL_TIM_Base_MspInit+0x248>)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8003bea:	4b71      	ldr	r3, [pc, #452]	@ (8003db0 <HAL_TIM_Base_MspInit+0x250>)
 8003bec:	4a71      	ldr	r2, [pc, #452]	@ (8003db4 <HAL_TIM_Base_MspInit+0x254>)
 8003bee:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8003bf0:	4b6f      	ldr	r3, [pc, #444]	@ (8003db0 <HAL_TIM_Base_MspInit+0x250>)
 8003bf2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003bf6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bf8:	4b6d      	ldr	r3, [pc, #436]	@ (8003db0 <HAL_TIM_Base_MspInit+0x250>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bfe:	4b6c      	ldr	r3, [pc, #432]	@ (8003db0 <HAL_TIM_Base_MspInit+0x250>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003c04:	4b6a      	ldr	r3, [pc, #424]	@ (8003db0 <HAL_TIM_Base_MspInit+0x250>)
 8003c06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c0a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c0c:	4b68      	ldr	r3, [pc, #416]	@ (8003db0 <HAL_TIM_Base_MspInit+0x250>)
 8003c0e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c12:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c14:	4b66      	ldr	r3, [pc, #408]	@ (8003db0 <HAL_TIM_Base_MspInit+0x250>)
 8003c16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c1a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8003c1c:	4b64      	ldr	r3, [pc, #400]	@ (8003db0 <HAL_TIM_Base_MspInit+0x250>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003c22:	4b63      	ldr	r3, [pc, #396]	@ (8003db0 <HAL_TIM_Base_MspInit+0x250>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c28:	4b61      	ldr	r3, [pc, #388]	@ (8003db0 <HAL_TIM_Base_MspInit+0x250>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8003c2e:	4860      	ldr	r0, [pc, #384]	@ (8003db0 <HAL_TIM_Base_MspInit+0x250>)
 8003c30:	f000 fd5c 	bl	80046ec <HAL_DMA_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_TIM_Base_MspInit+0xde>
    {
      Error_Handler();
 8003c3a:	f7ff ff1b 	bl	8003a74 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a5b      	ldr	r2, [pc, #364]	@ (8003db0 <HAL_TIM_Base_MspInit+0x250>)
 8003c42:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c44:	4a5a      	ldr	r2, [pc, #360]	@ (8003db0 <HAL_TIM_Base_MspInit+0x250>)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a58      	ldr	r2, [pc, #352]	@ (8003db0 <HAL_TIM_Base_MspInit+0x250>)
 8003c4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c50:	4a57      	ldr	r2, [pc, #348]	@ (8003db0 <HAL_TIM_Base_MspInit+0x250>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	201c      	movs	r0, #28
 8003c5c:	f000 fc97 	bl	800458e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c60:	201c      	movs	r0, #28
 8003c62:	f000 fcb0 	bl	80045c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003c66:	e098      	b.n	8003d9a <HAL_TIM_Base_MspInit+0x23a>
  else if(htim_base->Instance==TIM3)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a52      	ldr	r2, [pc, #328]	@ (8003db8 <HAL_TIM_Base_MspInit+0x258>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d14a      	bne.n	8003d08 <HAL_TIM_Base_MspInit+0x1a8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c72:	4b4c      	ldr	r3, [pc, #304]	@ (8003da4 <HAL_TIM_Base_MspInit+0x244>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	4a4b      	ldr	r2, [pc, #300]	@ (8003da4 <HAL_TIM_Base_MspInit+0x244>)
 8003c78:	f043 0302 	orr.w	r3, r3, #2
 8003c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c7e:	4b49      	ldr	r3, [pc, #292]	@ (8003da4 <HAL_TIM_Base_MspInit+0x244>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8003c8a:	4b4c      	ldr	r3, [pc, #304]	@ (8003dbc <HAL_TIM_Base_MspInit+0x25c>)
 8003c8c:	4a4c      	ldr	r2, [pc, #304]	@ (8003dc0 <HAL_TIM_Base_MspInit+0x260>)
 8003c8e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8003c90:	4b4a      	ldr	r3, [pc, #296]	@ (8003dbc <HAL_TIM_Base_MspInit+0x25c>)
 8003c92:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003c96:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c98:	4b48      	ldr	r3, [pc, #288]	@ (8003dbc <HAL_TIM_Base_MspInit+0x25c>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c9e:	4b47      	ldr	r3, [pc, #284]	@ (8003dbc <HAL_TIM_Base_MspInit+0x25c>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8003ca4:	4b45      	ldr	r3, [pc, #276]	@ (8003dbc <HAL_TIM_Base_MspInit+0x25c>)
 8003ca6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003caa:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cac:	4b43      	ldr	r3, [pc, #268]	@ (8003dbc <HAL_TIM_Base_MspInit+0x25c>)
 8003cae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cb2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003cb4:	4b41      	ldr	r3, [pc, #260]	@ (8003dbc <HAL_TIM_Base_MspInit+0x25c>)
 8003cb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cba:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8003cbc:	4b3f      	ldr	r3, [pc, #252]	@ (8003dbc <HAL_TIM_Base_MspInit+0x25c>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8003cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8003dbc <HAL_TIM_Base_MspInit+0x25c>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cc8:	4b3c      	ldr	r3, [pc, #240]	@ (8003dbc <HAL_TIM_Base_MspInit+0x25c>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8003cce:	483b      	ldr	r0, [pc, #236]	@ (8003dbc <HAL_TIM_Base_MspInit+0x25c>)
 8003cd0:	f000 fd0c 	bl	80046ec <HAL_DMA_Init>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_TIM_Base_MspInit+0x17e>
      Error_Handler();
 8003cda:	f7ff fecb 	bl	8003a74 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a36      	ldr	r2, [pc, #216]	@ (8003dbc <HAL_TIM_Base_MspInit+0x25c>)
 8003ce2:	625a      	str	r2, [r3, #36]	@ 0x24
 8003ce4:	4a35      	ldr	r2, [pc, #212]	@ (8003dbc <HAL_TIM_Base_MspInit+0x25c>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a33      	ldr	r2, [pc, #204]	@ (8003dbc <HAL_TIM_Base_MspInit+0x25c>)
 8003cee:	639a      	str	r2, [r3, #56]	@ 0x38
 8003cf0:	4a32      	ldr	r2, [pc, #200]	@ (8003dbc <HAL_TIM_Base_MspInit+0x25c>)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	201d      	movs	r0, #29
 8003cfc:	f000 fc47 	bl	800458e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d00:	201d      	movs	r0, #29
 8003d02:	f000 fc60 	bl	80045c6 <HAL_NVIC_EnableIRQ>
}
 8003d06:	e048      	b.n	8003d9a <HAL_TIM_Base_MspInit+0x23a>
  else if(htim_base->Instance==TIM4)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003dc4 <HAL_TIM_Base_MspInit+0x264>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d143      	bne.n	8003d9a <HAL_TIM_Base_MspInit+0x23a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d12:	4b24      	ldr	r3, [pc, #144]	@ (8003da4 <HAL_TIM_Base_MspInit+0x244>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	4a23      	ldr	r2, [pc, #140]	@ (8003da4 <HAL_TIM_Base_MspInit+0x244>)
 8003d18:	f043 0304 	orr.w	r3, r3, #4
 8003d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d1e:	4b21      	ldr	r3, [pc, #132]	@ (8003da4 <HAL_TIM_Base_MspInit+0x244>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8003d2a:	4b27      	ldr	r3, [pc, #156]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x268>)
 8003d2c:	4a27      	ldr	r2, [pc, #156]	@ (8003dcc <HAL_TIM_Base_MspInit+0x26c>)
 8003d2e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8003d30:	4b25      	ldr	r3, [pc, #148]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x268>)
 8003d32:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003d36:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d38:	4b23      	ldr	r3, [pc, #140]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x268>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d3e:	4b22      	ldr	r3, [pc, #136]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x268>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003d44:	4b20      	ldr	r3, [pc, #128]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x268>)
 8003d46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d4a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x268>)
 8003d4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d52:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d54:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x268>)
 8003d56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d5a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x268>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003d62:	4b19      	ldr	r3, [pc, #100]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x268>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d68:	4b17      	ldr	r3, [pc, #92]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x268>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8003d6e:	4816      	ldr	r0, [pc, #88]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x268>)
 8003d70:	f000 fcbc 	bl	80046ec <HAL_DMA_Init>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_TIM_Base_MspInit+0x21e>
      Error_Handler();
 8003d7a:	f7ff fe7b 	bl	8003a74 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a11      	ldr	r2, [pc, #68]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x268>)
 8003d82:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d84:	4a10      	ldr	r2, [pc, #64]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x268>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	201e      	movs	r0, #30
 8003d90:	f000 fbfd 	bl	800458e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003d94:	201e      	movs	r0, #30
 8003d96:	f000 fc16 	bl	80045c6 <HAL_NVIC_EnableIRQ>
}
 8003d9a:	bf00      	nop
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	20000560 	.word	0x20000560
 8003dac:	40026088 	.word	0x40026088
 8003db0:	200005c0 	.word	0x200005c0
 8003db4:	400260a0 	.word	0x400260a0
 8003db8:	40000400 	.word	0x40000400
 8003dbc:	20000620 	.word	0x20000620
 8003dc0:	40026070 	.word	0x40026070
 8003dc4:	40000800 	.word	0x40000800
 8003dc8:	20000680 	.word	0x20000680
 8003dcc:	40026010 	.word	0x40026010

08003dd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08c      	sub	sp, #48	@ 0x30
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd8:	f107 031c 	add.w	r3, r7, #28
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	605a      	str	r2, [r3, #4]
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	60da      	str	r2, [r3, #12]
 8003de6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df0:	d139      	bne.n	8003e66 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df2:	4b40      	ldr	r3, [pc, #256]	@ (8003ef4 <HAL_TIM_MspPostInit+0x124>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ef4 <HAL_TIM_MspPostInit+0x124>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dfe:	4b3d      	ldr	r3, [pc, #244]	@ (8003ef4 <HAL_TIM_MspPostInit+0x124>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003ef4 <HAL_TIM_MspPostInit+0x124>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0e:	4a39      	ldr	r2, [pc, #228]	@ (8003ef4 <HAL_TIM_MspPostInit+0x124>)
 8003e10:	f043 0302 	orr.w	r3, r3, #2
 8003e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e16:	4b37      	ldr	r3, [pc, #220]	@ (8003ef4 <HAL_TIM_MspPostInit+0x124>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e30:	2300      	movs	r3, #0
 8003e32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e34:	2301      	movs	r3, #1
 8003e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e38:	f107 031c 	add.w	r3, r7, #28
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	482e      	ldr	r0, [pc, #184]	@ (8003ef8 <HAL_TIM_MspPostInit+0x128>)
 8003e40:	f000 ffd0 	bl	8004de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e44:	2308      	movs	r3, #8
 8003e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e50:	2300      	movs	r3, #0
 8003e52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e54:	2301      	movs	r3, #1
 8003e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e58:	f107 031c 	add.w	r3, r7, #28
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4827      	ldr	r0, [pc, #156]	@ (8003efc <HAL_TIM_MspPostInit+0x12c>)
 8003e60:	f000 ffc0 	bl	8004de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003e64:	e042      	b.n	8003eec <HAL_TIM_MspPostInit+0x11c>
  else if(htim->Instance==TIM3)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a25      	ldr	r2, [pc, #148]	@ (8003f00 <HAL_TIM_MspPostInit+0x130>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d11c      	bne.n	8003eaa <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e70:	4b20      	ldr	r3, [pc, #128]	@ (8003ef4 <HAL_TIM_MspPostInit+0x124>)
 8003e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e74:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef4 <HAL_TIM_MspPostInit+0x124>)
 8003e76:	f043 0302 	orr.w	r3, r3, #2
 8003e7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef4 <HAL_TIM_MspPostInit+0x124>)
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e88:	2310      	movs	r3, #16
 8003e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e94:	2300      	movs	r3, #0
 8003e96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e9c:	f107 031c 	add.w	r3, r7, #28
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4816      	ldr	r0, [pc, #88]	@ (8003efc <HAL_TIM_MspPostInit+0x12c>)
 8003ea4:	f000 ff9e 	bl	8004de4 <HAL_GPIO_Init>
}
 8003ea8:	e020      	b.n	8003eec <HAL_TIM_MspPostInit+0x11c>
  else if(htim->Instance==TIM4)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a15      	ldr	r2, [pc, #84]	@ (8003f04 <HAL_TIM_MspPostInit+0x134>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d11b      	bne.n	8003eec <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef4 <HAL_TIM_MspPostInit+0x124>)
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef4 <HAL_TIM_MspPostInit+0x124>)
 8003eba:	f043 0302 	orr.w	r3, r3, #2
 8003ebe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef4 <HAL_TIM_MspPostInit+0x124>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ecc:	2340      	movs	r3, #64	@ 0x40
 8003ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003edc:	2302      	movs	r3, #2
 8003ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee0:	f107 031c 	add.w	r3, r7, #28
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4805      	ldr	r0, [pc, #20]	@ (8003efc <HAL_TIM_MspPostInit+0x12c>)
 8003ee8:	f000 ff7c 	bl	8004de4 <HAL_GPIO_Init>
}
 8003eec:	bf00      	nop
 8003eee:	3730      	adds	r7, #48	@ 0x30
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	40020000 	.word	0x40020000
 8003efc:	40020400 	.word	0x40020400
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800

08003f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b0aa      	sub	sp, #168	@ 0xa8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f10:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f20:	f107 0314 	add.w	r3, r7, #20
 8003f24:	2280      	movs	r2, #128	@ 0x80
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f00c fb9b 	bl	8010664 <memset>
  if(huart->Instance==USART3)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a26      	ldr	r2, [pc, #152]	@ (8003fcc <HAL_UART_MspInit+0xc4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d144      	bne.n	8003fc2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003f38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f3c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f42:	f107 0314 	add.w	r3, r7, #20
 8003f46:	4618      	mov	r0, r3
 8003f48:	f003 f8be 	bl	80070c8 <HAL_RCCEx_PeriphCLKConfig>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003f52:	f7ff fd8f 	bl	8003a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f56:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd0 <HAL_UART_MspInit+0xc8>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd0 <HAL_UART_MspInit+0xc8>)
 8003f5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f62:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd0 <HAL_UART_MspInit+0xc8>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f6e:	4b18      	ldr	r3, [pc, #96]	@ (8003fd0 <HAL_UART_MspInit+0xc8>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	4a17      	ldr	r2, [pc, #92]	@ (8003fd0 <HAL_UART_MspInit+0xc8>)
 8003f74:	f043 0302 	orr.w	r3, r3, #2
 8003f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f7a:	4b15      	ldr	r3, [pc, #84]	@ (8003fd0 <HAL_UART_MspInit+0xc8>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f86:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003f8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fa0:	2307      	movs	r3, #7
 8003fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003faa:	4619      	mov	r1, r3
 8003fac:	4809      	ldr	r0, [pc, #36]	@ (8003fd4 <HAL_UART_MspInit+0xcc>)
 8003fae:	f000 ff19 	bl	8004de4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	2027      	movs	r0, #39	@ 0x27
 8003fb8:	f000 fae9 	bl	800458e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003fbc:	2027      	movs	r0, #39	@ 0x27
 8003fbe:	f000 fb02 	bl	80045c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003fc2:	bf00      	nop
 8003fc4:	37a8      	adds	r7, #168	@ 0xa8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40004800 	.word	0x40004800
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	40020400 	.word	0x40020400

08003fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003fdc:	bf00      	nop
 8003fde:	e7fd      	b.n	8003fdc <NMI_Handler+0x4>

08003fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fe4:	bf00      	nop
 8003fe6:	e7fd      	b.n	8003fe4 <HardFault_Handler+0x4>

08003fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fec:	bf00      	nop
 8003fee:	e7fd      	b.n	8003fec <MemManage_Handler+0x4>

08003ff0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ff4:	bf00      	nop
 8003ff6:	e7fd      	b.n	8003ff4 <BusFault_Handler+0x4>

08003ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ffc:	bf00      	nop
 8003ffe:	e7fd      	b.n	8003ffc <UsageFault_Handler+0x4>

08004000 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004004:	bf00      	nop
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800400e:	b480      	push	{r7}
 8004010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800402e:	f000 f98f 	bl	8004350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004032:	bf00      	nop
 8004034:	bd80      	pop	{r7, pc}

08004036 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800403a:	2010      	movs	r0, #16
 800403c:	f001 f888 	bl	8005150 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004040:	bf00      	nop
 8004042:	bd80      	pop	{r7, pc}

08004044 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8004048:	4802      	ldr	r0, [pc, #8]	@ (8004054 <DMA1_Stream0_IRQHandler+0x10>)
 800404a:	f000 fc8f 	bl	800496c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000680 	.word	0x20000680

08004058 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800405c:	4802      	ldr	r0, [pc, #8]	@ (8004068 <DMA1_Stream4_IRQHandler+0x10>)
 800405e:	f000 fc85 	bl	800496c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000620 	.word	0x20000620

0800406c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8004070:	4802      	ldr	r0, [pc, #8]	@ (800407c <DMA1_Stream5_IRQHandler+0x10>)
 8004072:	f000 fc7b 	bl	800496c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004076:	bf00      	nop
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000560 	.word	0x20000560

08004080 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8004084:	4802      	ldr	r0, [pc, #8]	@ (8004090 <DMA1_Stream6_IRQHandler+0x10>)
 8004086:	f000 fc71 	bl	800496c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	200005c0 	.word	0x200005c0

08004094 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004098:	4802      	ldr	r0, [pc, #8]	@ (80040a4 <TIM2_IRQHandler+0x10>)
 800409a:	f004 fda3 	bl	8008be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	2000047c 	.word	0x2000047c

080040a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80040ac:	4802      	ldr	r0, [pc, #8]	@ (80040b8 <TIM3_IRQHandler+0x10>)
 80040ae:	f004 fd99 	bl	8008be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	200004c8 	.word	0x200004c8

080040bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80040c0:	4802      	ldr	r0, [pc, #8]	@ (80040cc <TIM4_IRQHandler+0x10>)
 80040c2:	f004 fd8f 	bl	8008be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000514 	.word	0x20000514

080040d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80040d4:	4802      	ldr	r0, [pc, #8]	@ (80040e0 <SPI1_IRQHandler+0x10>)
 80040d6:	f004 f8bb 	bl	8008250 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000418 	.word	0x20000418

080040e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80040e8:	4802      	ldr	r0, [pc, #8]	@ (80040f4 <USART3_IRQHandler+0x10>)
 80040ea:	f005 fe25 	bl	8009d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80040ee:	bf00      	nop
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	200006e0 	.word	0x200006e0

080040f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80040fc:	4802      	ldr	r0, [pc, #8]	@ (8004108 <OTG_FS_IRQHandler+0x10>)
 80040fe:	f001 f977 	bl	80053f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004102:	bf00      	nop
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20001c5c 	.word	0x20001c5c

0800410c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return 1;
 8004110:	2301      	movs	r3, #1
}
 8004112:	4618      	mov	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <_kill>:

int _kill(int pid, int sig)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004126:	f00c fb11 	bl	801074c <__errno>
 800412a:	4603      	mov	r3, r0
 800412c:	2216      	movs	r2, #22
 800412e:	601a      	str	r2, [r3, #0]
  return -1;
 8004130:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <_exit>:

void _exit (int status)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004144:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff ffe7 	bl	800411c <_kill>
  while (1) {}    /* Make sure we hang here */
 800414e:	bf00      	nop
 8004150:	e7fd      	b.n	800414e <_exit+0x12>

08004152 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b086      	sub	sp, #24
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	e00a      	b.n	800417a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004164:	f3af 8000 	nop.w
 8004168:	4601      	mov	r1, r0
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	60ba      	str	r2, [r7, #8]
 8004170:	b2ca      	uxtb	r2, r1
 8004172:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	3301      	adds	r3, #1
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	429a      	cmp	r2, r3
 8004180:	dbf0      	blt.n	8004164 <_read+0x12>
  }

  return len;
 8004182:	687b      	ldr	r3, [r7, #4]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <_close>:
  }
  return len;
}

int _close(int file)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004194:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041b4:	605a      	str	r2, [r3, #4]
  return 0;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <_isatty>:

int _isatty(int file)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80041cc:	2301      	movs	r3, #1
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041da:	b480      	push	{r7}
 80041dc:	b085      	sub	sp, #20
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041fc:	4a14      	ldr	r2, [pc, #80]	@ (8004250 <_sbrk+0x5c>)
 80041fe:	4b15      	ldr	r3, [pc, #84]	@ (8004254 <_sbrk+0x60>)
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004208:	4b13      	ldr	r3, [pc, #76]	@ (8004258 <_sbrk+0x64>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d102      	bne.n	8004216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004210:	4b11      	ldr	r3, [pc, #68]	@ (8004258 <_sbrk+0x64>)
 8004212:	4a12      	ldr	r2, [pc, #72]	@ (800425c <_sbrk+0x68>)
 8004214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004216:	4b10      	ldr	r3, [pc, #64]	@ (8004258 <_sbrk+0x64>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4413      	add	r3, r2
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	429a      	cmp	r2, r3
 8004222:	d207      	bcs.n	8004234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004224:	f00c fa92 	bl	801074c <__errno>
 8004228:	4603      	mov	r3, r0
 800422a:	220c      	movs	r2, #12
 800422c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800422e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004232:	e009      	b.n	8004248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004234:	4b08      	ldr	r3, [pc, #32]	@ (8004258 <_sbrk+0x64>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800423a:	4b07      	ldr	r3, [pc, #28]	@ (8004258 <_sbrk+0x64>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4413      	add	r3, r2
 8004242:	4a05      	ldr	r2, [pc, #20]	@ (8004258 <_sbrk+0x64>)
 8004244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004246:	68fb      	ldr	r3, [r7, #12]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20040000 	.word	0x20040000
 8004254:	00000400 	.word	0x00000400
 8004258:	20000774 	.word	0x20000774
 800425c:	20002288 	.word	0x20002288

08004260 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004264:	4b06      	ldr	r3, [pc, #24]	@ (8004280 <SystemInit+0x20>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426a:	4a05      	ldr	r2, [pc, #20]	@ (8004280 <SystemInit+0x20>)
 800426c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004284:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8004288:	f7ff ffea 	bl	8004260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800428c:	480c      	ldr	r0, [pc, #48]	@ (80042c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800428e:	490d      	ldr	r1, [pc, #52]	@ (80042c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004290:	4a0d      	ldr	r2, [pc, #52]	@ (80042c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004294:	e002      	b.n	800429c <LoopCopyDataInit>

08004296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800429a:	3304      	adds	r3, #4

0800429c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800429c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800429e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a0:	d3f9      	bcc.n	8004296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042a2:	4a0a      	ldr	r2, [pc, #40]	@ (80042cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042a4:	4c0a      	ldr	r4, [pc, #40]	@ (80042d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042a8:	e001      	b.n	80042ae <LoopFillZerobss>

080042aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042ac:	3204      	adds	r2, #4

080042ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b0:	d3fb      	bcc.n	80042aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042b2:	f00c fa51 	bl	8010758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042b6:	f7fe faf5 	bl	80028a4 <main>
  bx  lr    
 80042ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042bc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80042c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042c4:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 80042c8:	0801613c 	.word	0x0801613c
  ldr r2, =_sbss
 80042cc:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 80042d0:	20002288 	.word	0x20002288

080042d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042d4:	e7fe      	b.n	80042d4 <ADC_IRQHandler>

080042d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042da:	2003      	movs	r0, #3
 80042dc:	f000 f94c 	bl	8004578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042e0:	200f      	movs	r0, #15
 80042e2:	f000 f805 	bl	80042f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042e6:	f7ff fbcb 	bl	8003a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042f8:	4b12      	ldr	r3, [pc, #72]	@ (8004344 <HAL_InitTick+0x54>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4b12      	ldr	r3, [pc, #72]	@ (8004348 <HAL_InitTick+0x58>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	4619      	mov	r1, r3
 8004302:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004306:	fbb3 f3f1 	udiv	r3, r3, r1
 800430a:	fbb2 f3f3 	udiv	r3, r2, r3
 800430e:	4618      	mov	r0, r3
 8004310:	f000 f967 	bl	80045e2 <HAL_SYSTICK_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e00e      	b.n	800433c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b0f      	cmp	r3, #15
 8004322:	d80a      	bhi.n	800433a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004324:	2200      	movs	r2, #0
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800432c:	f000 f92f 	bl	800458e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004330:	4a06      	ldr	r2, [pc, #24]	@ (800434c <HAL_InitTick+0x5c>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	e000      	b.n	800433c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000064 	.word	0x20000064
 8004348:	2000006c 	.word	0x2000006c
 800434c:	20000068 	.word	0x20000068

08004350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004354:	4b06      	ldr	r3, [pc, #24]	@ (8004370 <HAL_IncTick+0x20>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	4b06      	ldr	r3, [pc, #24]	@ (8004374 <HAL_IncTick+0x24>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4413      	add	r3, r2
 8004360:	4a04      	ldr	r2, [pc, #16]	@ (8004374 <HAL_IncTick+0x24>)
 8004362:	6013      	str	r3, [r2, #0]
}
 8004364:	bf00      	nop
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	2000006c 	.word	0x2000006c
 8004374:	20000778 	.word	0x20000778

08004378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  return uwTick;
 800437c:	4b03      	ldr	r3, [pc, #12]	@ (800438c <HAL_GetTick+0x14>)
 800437e:	681b      	ldr	r3, [r3, #0]
}
 8004380:	4618      	mov	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	20000778 	.word	0x20000778

08004390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004398:	f7ff ffee 	bl	8004378 <HAL_GetTick>
 800439c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043a8:	d005      	beq.n	80043b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043aa:	4b0a      	ldr	r3, [pc, #40]	@ (80043d4 <HAL_Delay+0x44>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043b6:	bf00      	nop
 80043b8:	f7ff ffde 	bl	8004378 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d8f7      	bhi.n	80043b8 <HAL_Delay+0x28>
  {
  }
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	2000006c 	.word	0x2000006c

080043d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004418 <__NVIC_SetPriorityGrouping+0x40>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043f4:	4013      	ands	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004400:	4b06      	ldr	r3, [pc, #24]	@ (800441c <__NVIC_SetPriorityGrouping+0x44>)
 8004402:	4313      	orrs	r3, r2
 8004404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004406:	4a04      	ldr	r2, [pc, #16]	@ (8004418 <__NVIC_SetPriorityGrouping+0x40>)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	60d3      	str	r3, [r2, #12]
}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	e000ed00 	.word	0xe000ed00
 800441c:	05fa0000 	.word	0x05fa0000

08004420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004424:	4b04      	ldr	r3, [pc, #16]	@ (8004438 <__NVIC_GetPriorityGrouping+0x18>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	0a1b      	lsrs	r3, r3, #8
 800442a:	f003 0307 	and.w	r3, r3, #7
}
 800442e:	4618      	mov	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	e000ed00 	.word	0xe000ed00

0800443c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444a:	2b00      	cmp	r3, #0
 800444c:	db0b      	blt.n	8004466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	f003 021f 	and.w	r2, r3, #31
 8004454:	4907      	ldr	r1, [pc, #28]	@ (8004474 <__NVIC_EnableIRQ+0x38>)
 8004456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	2001      	movs	r0, #1
 800445e:	fa00 f202 	lsl.w	r2, r0, r2
 8004462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	e000e100 	.word	0xe000e100

08004478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	6039      	str	r1, [r7, #0]
 8004482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004488:	2b00      	cmp	r3, #0
 800448a:	db0a      	blt.n	80044a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	490c      	ldr	r1, [pc, #48]	@ (80044c4 <__NVIC_SetPriority+0x4c>)
 8004492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004496:	0112      	lsls	r2, r2, #4
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	440b      	add	r3, r1
 800449c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044a0:	e00a      	b.n	80044b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	4908      	ldr	r1, [pc, #32]	@ (80044c8 <__NVIC_SetPriority+0x50>)
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	3b04      	subs	r3, #4
 80044b0:	0112      	lsls	r2, r2, #4
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	440b      	add	r3, r1
 80044b6:	761a      	strb	r2, [r3, #24]
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	e000e100 	.word	0xe000e100
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b089      	sub	sp, #36	@ 0x24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f1c3 0307 	rsb	r3, r3, #7
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	bf28      	it	cs
 80044ea:	2304      	movcs	r3, #4
 80044ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3304      	adds	r3, #4
 80044f2:	2b06      	cmp	r3, #6
 80044f4:	d902      	bls.n	80044fc <NVIC_EncodePriority+0x30>
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	3b03      	subs	r3, #3
 80044fa:	e000      	b.n	80044fe <NVIC_EncodePriority+0x32>
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004500:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43da      	mvns	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	401a      	ands	r2, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004514:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	fa01 f303 	lsl.w	r3, r1, r3
 800451e:	43d9      	mvns	r1, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004524:	4313      	orrs	r3, r2
         );
}
 8004526:	4618      	mov	r0, r3
 8004528:	3724      	adds	r7, #36	@ 0x24
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
	...

08004534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3b01      	subs	r3, #1
 8004540:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004544:	d301      	bcc.n	800454a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004546:	2301      	movs	r3, #1
 8004548:	e00f      	b.n	800456a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800454a:	4a0a      	ldr	r2, [pc, #40]	@ (8004574 <SysTick_Config+0x40>)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3b01      	subs	r3, #1
 8004550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004552:	210f      	movs	r1, #15
 8004554:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004558:	f7ff ff8e 	bl	8004478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800455c:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <SysTick_Config+0x40>)
 800455e:	2200      	movs	r2, #0
 8004560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004562:	4b04      	ldr	r3, [pc, #16]	@ (8004574 <SysTick_Config+0x40>)
 8004564:	2207      	movs	r2, #7
 8004566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	e000e010 	.word	0xe000e010

08004578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff ff29 	bl	80043d8 <__NVIC_SetPriorityGrouping>
}
 8004586:	bf00      	nop
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800458e:	b580      	push	{r7, lr}
 8004590:	b086      	sub	sp, #24
 8004592:	af00      	add	r7, sp, #0
 8004594:	4603      	mov	r3, r0
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045a0:	f7ff ff3e 	bl	8004420 <__NVIC_GetPriorityGrouping>
 80045a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	6978      	ldr	r0, [r7, #20]
 80045ac:	f7ff ff8e 	bl	80044cc <NVIC_EncodePriority>
 80045b0:	4602      	mov	r2, r0
 80045b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045b6:	4611      	mov	r1, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ff5d 	bl	8004478 <__NVIC_SetPriority>
}
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	4603      	mov	r3, r0
 80045ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff31 	bl	800443c <__NVIC_EnableIRQ>
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff ffa2 	bl	8004534 <SysTick_Config>
 80045f0:	4603      	mov	r3, r0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004600:	f3bf 8f5f 	dmb	sy
}
 8004604:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004606:	4b07      	ldr	r3, [pc, #28]	@ (8004624 <HAL_MPU_Disable+0x28>)
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	4a06      	ldr	r2, [pc, #24]	@ (8004624 <HAL_MPU_Disable+0x28>)
 800460c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004610:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004612:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <HAL_MPU_Disable+0x2c>)
 8004614:	2200      	movs	r2, #0
 8004616:	605a      	str	r2, [r3, #4]
}
 8004618:	bf00      	nop
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	e000ed00 	.word	0xe000ed00
 8004628:	e000ed90 	.word	0xe000ed90

0800462c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004634:	4a0b      	ldr	r2, [pc, #44]	@ (8004664 <HAL_MPU_Enable+0x38>)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800463e:	4b0a      	ldr	r3, [pc, #40]	@ (8004668 <HAL_MPU_Enable+0x3c>)
 8004640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004642:	4a09      	ldr	r2, [pc, #36]	@ (8004668 <HAL_MPU_Enable+0x3c>)
 8004644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004648:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800464a:	f3bf 8f4f 	dsb	sy
}
 800464e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004650:	f3bf 8f6f 	isb	sy
}
 8004654:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	e000ed90 	.word	0xe000ed90
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	785a      	ldrb	r2, [r3, #1]
 8004678:	4b1b      	ldr	r3, [pc, #108]	@ (80046e8 <HAL_MPU_ConfigRegion+0x7c>)
 800467a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800467c:	4b1a      	ldr	r3, [pc, #104]	@ (80046e8 <HAL_MPU_ConfigRegion+0x7c>)
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	4a19      	ldr	r2, [pc, #100]	@ (80046e8 <HAL_MPU_ConfigRegion+0x7c>)
 8004682:	f023 0301 	bic.w	r3, r3, #1
 8004686:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004688:	4a17      	ldr	r2, [pc, #92]	@ (80046e8 <HAL_MPU_ConfigRegion+0x7c>)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	7b1b      	ldrb	r3, [r3, #12]
 8004694:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7adb      	ldrb	r3, [r3, #11]
 800469a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800469c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	7a9b      	ldrb	r3, [r3, #10]
 80046a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80046a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	7b5b      	ldrb	r3, [r3, #13]
 80046aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80046ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7b9b      	ldrb	r3, [r3, #14]
 80046b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80046b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	7bdb      	ldrb	r3, [r3, #15]
 80046ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80046bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	7a5b      	ldrb	r3, [r3, #9]
 80046c2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80046c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	7a1b      	ldrb	r3, [r3, #8]
 80046ca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80046cc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	7812      	ldrb	r2, [r2, #0]
 80046d2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80046d4:	4a04      	ldr	r2, [pc, #16]	@ (80046e8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046d6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80046d8:	6113      	str	r3, [r2, #16]
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	e000ed90 	.word	0xe000ed90

080046ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046f8:	f7ff fe3e 	bl	8004378 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e099      	b.n	800483c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004728:	e00f      	b.n	800474a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800472a:	f7ff fe25 	bl	8004378 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b05      	cmp	r3, #5
 8004736:	d908      	bls.n	800474a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2203      	movs	r2, #3
 8004742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e078      	b.n	800483c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1e8      	bne.n	800472a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4b38      	ldr	r3, [pc, #224]	@ (8004844 <HAL_DMA_Init+0x158>)
 8004764:	4013      	ands	r3, r2
 8004766:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004776:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800478e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d107      	bne.n	80047b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ac:	4313      	orrs	r3, r2
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f023 0307 	bic.w	r3, r3, #7
 80047ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d117      	bne.n	800480e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00e      	beq.n	800480e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fa7b 	bl	8004cec <DMA_CheckFifoParam>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2240      	movs	r2, #64	@ 0x40
 8004800:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800480a:	2301      	movs	r3, #1
 800480c:	e016      	b.n	800483c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fa32 	bl	8004c80 <DMA_CalcBaseAndBitshift>
 800481c:	4603      	mov	r3, r0
 800481e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004824:	223f      	movs	r2, #63	@ 0x3f
 8004826:	409a      	lsls	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	e010803f 	.word	0xe010803f

08004848 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004854:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004856:	f7ff fd8f 	bl	8004378 <HAL_GetTick>
 800485a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d008      	beq.n	800487a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2280      	movs	r2, #128	@ 0x80
 800486c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e052      	b.n	8004920 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0216 	bic.w	r2, r2, #22
 8004888:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695a      	ldr	r2, [r3, #20]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004898:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <HAL_DMA_Abort+0x62>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0208 	bic.w	r2, r2, #8
 80048b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ca:	e013      	b.n	80048f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048cc:	f7ff fd54 	bl	8004378 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b05      	cmp	r3, #5
 80048d8:	d90c      	bls.n	80048f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2203      	movs	r2, #3
 80048e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e015      	b.n	8004920 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e4      	bne.n	80048cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004906:	223f      	movs	r2, #63	@ 0x3f
 8004908:	409a      	lsls	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d004      	beq.n	8004946 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2280      	movs	r2, #128	@ 0x80
 8004940:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e00c      	b.n	8004960 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2205      	movs	r2, #5
 800494a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0201 	bic.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004978:	4b8e      	ldr	r3, [pc, #568]	@ (8004bb4 <HAL_DMA_IRQHandler+0x248>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a8e      	ldr	r2, [pc, #568]	@ (8004bb8 <HAL_DMA_IRQHandler+0x24c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	0a9b      	lsrs	r3, r3, #10
 8004984:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004996:	2208      	movs	r2, #8
 8004998:	409a      	lsls	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4013      	ands	r3, r2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d01a      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d013      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0204 	bic.w	r2, r2, #4
 80049be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c4:	2208      	movs	r2, #8
 80049c6:	409a      	lsls	r2, r3
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d0:	f043 0201 	orr.w	r2, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049dc:	2201      	movs	r2, #1
 80049de:	409a      	lsls	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d012      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fa:	2201      	movs	r2, #1
 80049fc:	409a      	lsls	r2, r3
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a06:	f043 0202 	orr.w	r2, r3, #2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a12:	2204      	movs	r2, #4
 8004a14:	409a      	lsls	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d012      	beq.n	8004a44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00b      	beq.n	8004a44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a30:	2204      	movs	r2, #4
 8004a32:	409a      	lsls	r2, r3
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3c:	f043 0204 	orr.w	r2, r3, #4
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a48:	2210      	movs	r2, #16
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d043      	beq.n	8004adc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d03c      	beq.n	8004adc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a66:	2210      	movs	r2, #16
 8004a68:	409a      	lsls	r2, r3
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d018      	beq.n	8004aae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d108      	bne.n	8004a9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d024      	beq.n	8004adc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	4798      	blx	r3
 8004a9a:	e01f      	b.n	8004adc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01b      	beq.n	8004adc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	4798      	blx	r3
 8004aac:	e016      	b.n	8004adc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d107      	bne.n	8004acc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0208 	bic.w	r2, r2, #8
 8004aca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	409a      	lsls	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 808f 	beq.w	8004c0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0310 	and.w	r3, r3, #16
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8087 	beq.w	8004c0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b02:	2220      	movs	r2, #32
 8004b04:	409a      	lsls	r2, r3
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b05      	cmp	r3, #5
 8004b14:	d136      	bne.n	8004b84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0216 	bic.w	r2, r2, #22
 8004b24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695a      	ldr	r2, [r3, #20]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d103      	bne.n	8004b46 <HAL_DMA_IRQHandler+0x1da>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0208 	bic.w	r2, r2, #8
 8004b54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5a:	223f      	movs	r2, #63	@ 0x3f
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d07e      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	4798      	blx	r3
        }
        return;
 8004b82:	e079      	b.n	8004c78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01d      	beq.n	8004bce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10d      	bne.n	8004bbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d031      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4798      	blx	r3
 8004bb0:	e02c      	b.n	8004c0c <HAL_DMA_IRQHandler+0x2a0>
 8004bb2:	bf00      	nop
 8004bb4:	20000064 	.word	0x20000064
 8004bb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d023      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	4798      	blx	r3
 8004bcc:	e01e      	b.n	8004c0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10f      	bne.n	8004bfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0210 	bic.w	r2, r2, #16
 8004bea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d032      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d022      	beq.n	8004c66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2205      	movs	r2, #5
 8004c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d307      	bcc.n	8004c54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f2      	bne.n	8004c38 <HAL_DMA_IRQHandler+0x2cc>
 8004c52:	e000      	b.n	8004c56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
 8004c76:	e000      	b.n	8004c7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c78:	bf00      	nop
    }
  }
}
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	3b10      	subs	r3, #16
 8004c90:	4a13      	ldr	r2, [pc, #76]	@ (8004ce0 <DMA_CalcBaseAndBitshift+0x60>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	091b      	lsrs	r3, r3, #4
 8004c98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c9a:	4a12      	ldr	r2, [pc, #72]	@ (8004ce4 <DMA_CalcBaseAndBitshift+0x64>)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d908      	bls.n	8004cc0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce8 <DMA_CalcBaseAndBitshift+0x68>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	1d1a      	adds	r2, r3, #4
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	659a      	str	r2, [r3, #88]	@ 0x58
 8004cbe:	e006      	b.n	8004cce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4b08      	ldr	r3, [pc, #32]	@ (8004ce8 <DMA_CalcBaseAndBitshift+0x68>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	aaaaaaab 	.word	0xaaaaaaab
 8004ce4:	080158d4 	.word	0x080158d4
 8004ce8:	fffffc00 	.word	0xfffffc00

08004cec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d11f      	bne.n	8004d46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d856      	bhi.n	8004dba <DMA_CheckFifoParam+0xce>
 8004d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d14 <DMA_CheckFifoParam+0x28>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d25 	.word	0x08004d25
 8004d18:	08004d37 	.word	0x08004d37
 8004d1c:	08004d25 	.word	0x08004d25
 8004d20:	08004dbb 	.word	0x08004dbb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d046      	beq.n	8004dbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d34:	e043      	b.n	8004dbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d3e:	d140      	bne.n	8004dc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d44:	e03d      	b.n	8004dc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d4e:	d121      	bne.n	8004d94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d837      	bhi.n	8004dc6 <DMA_CheckFifoParam+0xda>
 8004d56:	a201      	add	r2, pc, #4	@ (adr r2, 8004d5c <DMA_CheckFifoParam+0x70>)
 8004d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5c:	08004d6d 	.word	0x08004d6d
 8004d60:	08004d73 	.word	0x08004d73
 8004d64:	08004d6d 	.word	0x08004d6d
 8004d68:	08004d85 	.word	0x08004d85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d70:	e030      	b.n	8004dd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d025      	beq.n	8004dca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d82:	e022      	b.n	8004dca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d8c:	d11f      	bne.n	8004dce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d92:	e01c      	b.n	8004dce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d903      	bls.n	8004da2 <DMA_CheckFifoParam+0xb6>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d003      	beq.n	8004da8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004da0:	e018      	b.n	8004dd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	73fb      	strb	r3, [r7, #15]
      break;
 8004da6:	e015      	b.n	8004dd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00e      	beq.n	8004dd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
      break;
 8004db8:	e00b      	b.n	8004dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8004dba:	bf00      	nop
 8004dbc:	e00a      	b.n	8004dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004dbe:	bf00      	nop
 8004dc0:	e008      	b.n	8004dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004dc2:	bf00      	nop
 8004dc4:	e006      	b.n	8004dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004dc6:	bf00      	nop
 8004dc8:	e004      	b.n	8004dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004dca:	bf00      	nop
 8004dcc:	e002      	b.n	8004dd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004dce:	bf00      	nop
 8004dd0:	e000      	b.n	8004dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004dd2:	bf00      	nop
    }
  } 
  
  return status; 
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop

08004de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b089      	sub	sp, #36	@ 0x24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004df6:	2300      	movs	r3, #0
 8004df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	e169      	b.n	80050d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004e04:	2201      	movs	r2, #1
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4013      	ands	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	f040 8158 	bne.w	80050d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d005      	beq.n	8004e3a <HAL_GPIO_Init+0x56>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d130      	bne.n	8004e9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	2203      	movs	r2, #3
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e70:	2201      	movs	r2, #1
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	f003 0201 	and.w	r2, r3, #1
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d017      	beq.n	8004ed8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d123      	bne.n	8004f2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	08da      	lsrs	r2, r3, #3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3208      	adds	r2, #8
 8004eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	220f      	movs	r2, #15
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	43db      	mvns	r3, r3
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	4013      	ands	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	08da      	lsrs	r2, r3, #3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3208      	adds	r2, #8
 8004f26:	69b9      	ldr	r1, [r7, #24]
 8004f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	2203      	movs	r2, #3
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f003 0203 	and.w	r2, r3, #3
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 80b2 	beq.w	80050d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f6e:	4b60      	ldr	r3, [pc, #384]	@ (80050f0 <HAL_GPIO_Init+0x30c>)
 8004f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f72:	4a5f      	ldr	r2, [pc, #380]	@ (80050f0 <HAL_GPIO_Init+0x30c>)
 8004f74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f7a:	4b5d      	ldr	r3, [pc, #372]	@ (80050f0 <HAL_GPIO_Init+0x30c>)
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004f86:	4a5b      	ldr	r2, [pc, #364]	@ (80050f4 <HAL_GPIO_Init+0x310>)
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	089b      	lsrs	r3, r3, #2
 8004f8c:	3302      	adds	r3, #2
 8004f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	220f      	movs	r2, #15
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a52      	ldr	r2, [pc, #328]	@ (80050f8 <HAL_GPIO_Init+0x314>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d02b      	beq.n	800500a <HAL_GPIO_Init+0x226>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a51      	ldr	r2, [pc, #324]	@ (80050fc <HAL_GPIO_Init+0x318>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d025      	beq.n	8005006 <HAL_GPIO_Init+0x222>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a50      	ldr	r2, [pc, #320]	@ (8005100 <HAL_GPIO_Init+0x31c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01f      	beq.n	8005002 <HAL_GPIO_Init+0x21e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a4f      	ldr	r2, [pc, #316]	@ (8005104 <HAL_GPIO_Init+0x320>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d019      	beq.n	8004ffe <HAL_GPIO_Init+0x21a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a4e      	ldr	r2, [pc, #312]	@ (8005108 <HAL_GPIO_Init+0x324>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d013      	beq.n	8004ffa <HAL_GPIO_Init+0x216>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a4d      	ldr	r2, [pc, #308]	@ (800510c <HAL_GPIO_Init+0x328>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00d      	beq.n	8004ff6 <HAL_GPIO_Init+0x212>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a4c      	ldr	r2, [pc, #304]	@ (8005110 <HAL_GPIO_Init+0x32c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d007      	beq.n	8004ff2 <HAL_GPIO_Init+0x20e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a4b      	ldr	r2, [pc, #300]	@ (8005114 <HAL_GPIO_Init+0x330>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d101      	bne.n	8004fee <HAL_GPIO_Init+0x20a>
 8004fea:	2307      	movs	r3, #7
 8004fec:	e00e      	b.n	800500c <HAL_GPIO_Init+0x228>
 8004fee:	2308      	movs	r3, #8
 8004ff0:	e00c      	b.n	800500c <HAL_GPIO_Init+0x228>
 8004ff2:	2306      	movs	r3, #6
 8004ff4:	e00a      	b.n	800500c <HAL_GPIO_Init+0x228>
 8004ff6:	2305      	movs	r3, #5
 8004ff8:	e008      	b.n	800500c <HAL_GPIO_Init+0x228>
 8004ffa:	2304      	movs	r3, #4
 8004ffc:	e006      	b.n	800500c <HAL_GPIO_Init+0x228>
 8004ffe:	2303      	movs	r3, #3
 8005000:	e004      	b.n	800500c <HAL_GPIO_Init+0x228>
 8005002:	2302      	movs	r3, #2
 8005004:	e002      	b.n	800500c <HAL_GPIO_Init+0x228>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_GPIO_Init+0x228>
 800500a:	2300      	movs	r3, #0
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	f002 0203 	and.w	r2, r2, #3
 8005012:	0092      	lsls	r2, r2, #2
 8005014:	4093      	lsls	r3, r2
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800501c:	4935      	ldr	r1, [pc, #212]	@ (80050f4 <HAL_GPIO_Init+0x310>)
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	089b      	lsrs	r3, r3, #2
 8005022:	3302      	adds	r3, #2
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800502a:	4b3b      	ldr	r3, [pc, #236]	@ (8005118 <HAL_GPIO_Init+0x334>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800504e:	4a32      	ldr	r2, [pc, #200]	@ (8005118 <HAL_GPIO_Init+0x334>)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005054:	4b30      	ldr	r3, [pc, #192]	@ (8005118 <HAL_GPIO_Init+0x334>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005078:	4a27      	ldr	r2, [pc, #156]	@ (8005118 <HAL_GPIO_Init+0x334>)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800507e:	4b26      	ldr	r3, [pc, #152]	@ (8005118 <HAL_GPIO_Init+0x334>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005118 <HAL_GPIO_Init+0x334>)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005118 <HAL_GPIO_Init+0x334>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	4013      	ands	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050cc:	4a12      	ldr	r2, [pc, #72]	@ (8005118 <HAL_GPIO_Init+0x334>)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3301      	adds	r3, #1
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b0f      	cmp	r3, #15
 80050dc:	f67f ae92 	bls.w	8004e04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	3724      	adds	r7, #36	@ 0x24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40013800 	.word	0x40013800
 80050f8:	40020000 	.word	0x40020000
 80050fc:	40020400 	.word	0x40020400
 8005100:	40020800 	.word	0x40020800
 8005104:	40020c00 	.word	0x40020c00
 8005108:	40021000 	.word	0x40021000
 800510c:	40021400 	.word	0x40021400
 8005110:	40021800 	.word	0x40021800
 8005114:	40021c00 	.word	0x40021c00
 8005118:	40013c00 	.word	0x40013c00

0800511c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	807b      	strh	r3, [r7, #2]
 8005128:	4613      	mov	r3, r2
 800512a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800512c:	787b      	ldrb	r3, [r7, #1]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005132:	887a      	ldrh	r2, [r7, #2]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005138:	e003      	b.n	8005142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800513a:	887b      	ldrh	r3, [r7, #2]
 800513c:	041a      	lsls	r2, r3, #16
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	619a      	str	r2, [r3, #24]
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
	...

08005150 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800515a:	4b08      	ldr	r3, [pc, #32]	@ (800517c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	4013      	ands	r3, r2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d006      	beq.n	8005174 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005166:	4a05      	ldr	r2, [pc, #20]	@ (800517c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005168:	88fb      	ldrh	r3, [r7, #6]
 800516a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800516c:	88fb      	ldrh	r3, [r7, #6]
 800516e:	4618      	mov	r0, r3
 8005170:	f7fe fbfa 	bl	8003968 <HAL_GPIO_EXTI_Callback>
  }
}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40013c00 	.word	0x40013c00

08005180 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af02      	add	r7, sp, #8
 8005186:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e108      	b.n	80053a4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f009 fd33 	bl	800ec18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2203      	movs	r2, #3
 80051b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051c0:	d102      	bne.n	80051c8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f006 f8c0 	bl	800b352 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	7c1a      	ldrb	r2, [r3, #16]
 80051da:	f88d 2000 	strb.w	r2, [sp]
 80051de:	3304      	adds	r3, #4
 80051e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051e2:	f005 ff77 	bl	800b0d4 <USB_CoreInit>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e0d5      	b.n	80053a4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f006 f8b8 	bl	800b374 <USB_SetCurrentMode>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2202      	movs	r2, #2
 800520e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e0c6      	b.n	80053a4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005216:	2300      	movs	r3, #0
 8005218:	73fb      	strb	r3, [r7, #15]
 800521a:	e04a      	b.n	80052b2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800521c:	7bfa      	ldrb	r2, [r7, #15]
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	4613      	mov	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	3315      	adds	r3, #21
 800522c:	2201      	movs	r2, #1
 800522e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005230:	7bfa      	ldrb	r2, [r7, #15]
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	4413      	add	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	3314      	adds	r3, #20
 8005240:	7bfa      	ldrb	r2, [r7, #15]
 8005242:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005244:	7bfa      	ldrb	r2, [r7, #15]
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	b298      	uxth	r0, r3
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	4613      	mov	r3, r2
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	440b      	add	r3, r1
 8005256:	332e      	adds	r3, #46	@ 0x2e
 8005258:	4602      	mov	r2, r0
 800525a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800525c:	7bfa      	ldrb	r2, [r7, #15]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	3318      	adds	r3, #24
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005270:	7bfa      	ldrb	r2, [r7, #15]
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	4613      	mov	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	4413      	add	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	331c      	adds	r3, #28
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005284:	7bfa      	ldrb	r2, [r7, #15]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	4613      	mov	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	3320      	adds	r3, #32
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005298:	7bfa      	ldrb	r2, [r7, #15]
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	4613      	mov	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	3324      	adds	r3, #36	@ 0x24
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	3301      	adds	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	791b      	ldrb	r3, [r3, #4]
 80052b6:	7bfa      	ldrb	r2, [r7, #15]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d3af      	bcc.n	800521c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052bc:	2300      	movs	r3, #0
 80052be:	73fb      	strb	r3, [r7, #15]
 80052c0:	e044      	b.n	800534c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052c2:	7bfa      	ldrb	r2, [r7, #15]
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	4613      	mov	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80052d8:	7bfa      	ldrb	r2, [r7, #15]
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	4613      	mov	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	4413      	add	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	440b      	add	r3, r1
 80052e6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80052ea:	7bfa      	ldrb	r2, [r7, #15]
 80052ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052ee:	7bfa      	ldrb	r2, [r7, #15]
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	440b      	add	r3, r1
 80052fc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005304:	7bfa      	ldrb	r2, [r7, #15]
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800531a:	7bfa      	ldrb	r2, [r7, #15]
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	4613      	mov	r3, r2
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	440b      	add	r3, r1
 8005328:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005330:	7bfa      	ldrb	r2, [r7, #15]
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	4613      	mov	r3, r2
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	3301      	adds	r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	791b      	ldrb	r3, [r3, #4]
 8005350:	7bfa      	ldrb	r2, [r7, #15]
 8005352:	429a      	cmp	r2, r3
 8005354:	d3b5      	bcc.n	80052c2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	7c1a      	ldrb	r2, [r3, #16]
 800535e:	f88d 2000 	strb.w	r2, [sp]
 8005362:	3304      	adds	r3, #4
 8005364:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005366:	f006 f851 	bl	800b40c <USB_DevInit>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e013      	b.n	80053a4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	7b1b      	ldrb	r3, [r3, #12]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d102      	bne.n	8005398 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f001 f95a 	bl	800664c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f007 f8a2 	bl	800c4e6 <USB_DevDisconnect>

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <HAL_PCD_Start+0x16>
 80053be:	2302      	movs	r3, #2
 80053c0:	e012      	b.n	80053e8 <HAL_PCD_Start+0x3c>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f005 ffae 	bl	800b330 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f007 f863 	bl	800c4a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80053f0:	b590      	push	{r4, r7, lr}
 80053f2:	b08d      	sub	sp, #52	@ 0x34
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f007 f921 	bl	800c64e <USB_GetMode>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	f040 84b9 	bne.w	8005d86 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4618      	mov	r0, r3
 800541a:	f007 f885 	bl	800c528 <USB_ReadInterrupts>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 84af 	beq.w	8005d84 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	0a1b      	lsrs	r3, r3, #8
 8005430:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f007 f872 	bl	800c528 <USB_ReadInterrupts>
 8005444:	4603      	mov	r3, r0
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b02      	cmp	r3, #2
 800544c:	d107      	bne.n	800545e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695a      	ldr	r2, [r3, #20]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f002 0202 	and.w	r2, r2, #2
 800545c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f007 f860 	bl	800c528 <USB_ReadInterrupts>
 8005468:	4603      	mov	r3, r0
 800546a:	f003 0310 	and.w	r3, r3, #16
 800546e:	2b10      	cmp	r3, #16
 8005470:	d161      	bne.n	8005536 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699a      	ldr	r2, [r3, #24]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0210 	bic.w	r2, r2, #16
 8005480:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	f003 020f 	and.w	r2, r3, #15
 800548e:	4613      	mov	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	4413      	add	r3, r2
 800549e:	3304      	adds	r3, #4
 80054a0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	0c5b      	lsrs	r3, r3, #17
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d124      	bne.n	80054f8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80054b4:	4013      	ands	r3, r2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d035      	beq.n	8005526 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	461a      	mov	r2, r3
 80054cc:	6a38      	ldr	r0, [r7, #32]
 80054ce:	f006 fe97 	bl	800c200 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	091b      	lsrs	r3, r3, #4
 80054da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054de:	441a      	add	r2, r3
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	695a      	ldr	r2, [r3, #20]
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	091b      	lsrs	r3, r3, #4
 80054ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054f0:	441a      	add	r2, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	615a      	str	r2, [r3, #20]
 80054f6:	e016      	b.n	8005526 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	0c5b      	lsrs	r3, r3, #17
 80054fc:	f003 030f 	and.w	r3, r3, #15
 8005500:	2b06      	cmp	r3, #6
 8005502:	d110      	bne.n	8005526 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800550a:	2208      	movs	r2, #8
 800550c:	4619      	mov	r1, r3
 800550e:	6a38      	ldr	r0, [r7, #32]
 8005510:	f006 fe76 	bl	800c200 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	695a      	ldr	r2, [r3, #20]
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	091b      	lsrs	r3, r3, #4
 800551c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005520:	441a      	add	r2, r3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699a      	ldr	r2, [r3, #24]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0210 	orr.w	r2, r2, #16
 8005534:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f006 fff4 	bl	800c528 <USB_ReadInterrupts>
 8005540:	4603      	mov	r3, r0
 8005542:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005546:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800554a:	f040 80a7 	bne.w	800569c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f006 fff9 	bl	800c54e <USB_ReadDevAllOutEpInterrupt>
 800555c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800555e:	e099      	b.n	8005694 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 808e 	beq.w	8005688 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	4611      	mov	r1, r2
 8005576:	4618      	mov	r0, r3
 8005578:	f007 f81d 	bl	800c5b6 <USB_ReadDevOutEPInterrupt>
 800557c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00c      	beq.n	80055a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005594:	461a      	mov	r2, r3
 8005596:	2301      	movs	r3, #1
 8005598:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800559a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fecf 	bl	8006340 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00c      	beq.n	80055c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b8:	461a      	mov	r2, r3
 80055ba:	2308      	movs	r3, #8
 80055bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80055be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 ffa5 	bl	8006510 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80055d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055dc:	461a      	mov	r2, r3
 80055de:	2310      	movs	r3, #16
 80055e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d030      	beq.n	800564e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f4:	2b80      	cmp	r3, #128	@ 0x80
 80055f6:	d109      	bne.n	800560c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005606:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800560a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800560c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800560e:	4613      	mov	r3, r2
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	4413      	add	r3, r2
 800561e:	3304      	adds	r3, #4
 8005620:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	78db      	ldrb	r3, [r3, #3]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d108      	bne.n	800563c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2200      	movs	r2, #0
 800562e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005632:	b2db      	uxtb	r3, r3
 8005634:	4619      	mov	r1, r3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f009 fc12 	bl	800ee60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005648:	461a      	mov	r2, r3
 800564a:	2302      	movs	r3, #2
 800564c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005664:	461a      	mov	r2, r3
 8005666:	2320      	movs	r3, #32
 8005668:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d009      	beq.n	8005688 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005680:	461a      	mov	r2, r3
 8005682:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005686:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	3301      	adds	r3, #1
 800568c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800568e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005690:	085b      	lsrs	r3, r3, #1
 8005692:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005696:	2b00      	cmp	r3, #0
 8005698:	f47f af62 	bne.w	8005560 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f006 ff41 	bl	800c528 <USB_ReadInterrupts>
 80056a6:	4603      	mov	r3, r0
 80056a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056b0:	f040 80db 	bne.w	800586a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f006 ff62 	bl	800c582 <USB_ReadDevAllInEpInterrupt>
 80056be:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80056c4:	e0cd      	b.n	8005862 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80056c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 80c2 	beq.w	8005856 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	4611      	mov	r1, r2
 80056dc:	4618      	mov	r0, r3
 80056de:	f006 ff88 	bl	800c5f2 <USB_ReadDevInEPInterrupt>
 80056e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d057      	beq.n	800579e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f0:	f003 030f 	and.w	r3, r3, #15
 80056f4:	2201      	movs	r2, #1
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	43db      	mvns	r3, r3
 8005708:	69f9      	ldr	r1, [r7, #28]
 800570a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800570e:	4013      	ands	r3, r2
 8005710:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800571e:	461a      	mov	r2, r3
 8005720:	2301      	movs	r3, #1
 8005722:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	799b      	ldrb	r3, [r3, #6]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d132      	bne.n	8005792 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005730:	4613      	mov	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	3320      	adds	r3, #32
 800573c:	6819      	ldr	r1, [r3, #0]
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005742:	4613      	mov	r3, r2
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	4413      	add	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4403      	add	r3, r0
 800574c:	331c      	adds	r3, #28
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4419      	add	r1, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005756:	4613      	mov	r3, r2
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4403      	add	r3, r0
 8005760:	3320      	adds	r3, #32
 8005762:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	2b00      	cmp	r3, #0
 8005768:	d113      	bne.n	8005792 <HAL_PCD_IRQHandler+0x3a2>
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576e:	4613      	mov	r3, r2
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	3324      	adds	r3, #36	@ 0x24
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d108      	bne.n	8005792 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6818      	ldr	r0, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800578a:	461a      	mov	r2, r3
 800578c:	2101      	movs	r1, #1
 800578e:	f006 ff91 	bl	800c6b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	b2db      	uxtb	r3, r3
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f009 fadc 	bl	800ed56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b4:	461a      	mov	r2, r3
 80057b6:	2308      	movs	r3, #8
 80057b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d0:	461a      	mov	r2, r3
 80057d2:	2310      	movs	r3, #16
 80057d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ec:	461a      	mov	r2, r3
 80057ee:	2340      	movs	r3, #64	@ 0x40
 80057f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d023      	beq.n	8005844 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80057fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057fe:	6a38      	ldr	r0, [r7, #32]
 8005800:	f005 ff74 	bl	800b6ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005806:	4613      	mov	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	3310      	adds	r3, #16
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	4413      	add	r3, r2
 8005814:	3304      	adds	r3, #4
 8005816:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	78db      	ldrb	r3, [r3, #3]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d108      	bne.n	8005832 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2200      	movs	r2, #0
 8005824:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005828:	b2db      	uxtb	r3, r3
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f009 fb29 	bl	800ee84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800583e:	461a      	mov	r2, r3
 8005840:	2302      	movs	r3, #2
 8005842:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800584e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fce8 	bl	8006226 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	3301      	adds	r3, #1
 800585a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800585c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005864:	2b00      	cmp	r3, #0
 8005866:	f47f af2e 	bne.w	80056c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f006 fe5a 	bl	800c528 <USB_ReadInterrupts>
 8005874:	4603      	mov	r3, r0
 8005876:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800587a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800587e:	d122      	bne.n	80058c6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800588e:	f023 0301 	bic.w	r3, r3, #1
 8005892:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800589a:	2b01      	cmp	r3, #1
 800589c:	d108      	bne.n	80058b0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80058a6:	2100      	movs	r1, #0
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f009 fca7 	bl	800f1fc <HAL_PCDEx_LPM_Callback>
 80058ae:	e002      	b.n	80058b6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f009 fac7 	bl	800ee44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695a      	ldr	r2, [r3, #20]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80058c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f006 fe2c 	bl	800c528 <USB_ReadInterrupts>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058da:	d112      	bne.n	8005902 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d102      	bne.n	80058f2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f009 fa83 	bl	800edf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695a      	ldr	r2, [r3, #20]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005900:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f006 fe0e 	bl	800c528 <USB_ReadInterrupts>
 800590c:	4603      	mov	r3, r0
 800590e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005912:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005916:	d121      	bne.n	800595c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695a      	ldr	r2, [r3, #20]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005926:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800592e:	2b00      	cmp	r3, #0
 8005930:	d111      	bne.n	8005956 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005940:	089b      	lsrs	r3, r3, #2
 8005942:	f003 020f 	and.w	r2, r3, #15
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800594c:	2101      	movs	r1, #1
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f009 fc54 	bl	800f1fc <HAL_PCDEx_LPM_Callback>
 8005954:	e002      	b.n	800595c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f009 fa4e 	bl	800edf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f006 fde1 	bl	800c528 <USB_ReadInterrupts>
 8005966:	4603      	mov	r3, r0
 8005968:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800596c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005970:	f040 80b7 	bne.w	8005ae2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005982:	f023 0301 	bic.w	r3, r3, #1
 8005986:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2110      	movs	r1, #16
 800598e:	4618      	mov	r0, r3
 8005990:	f005 feac 	bl	800b6ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005994:	2300      	movs	r3, #0
 8005996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005998:	e046      	b.n	8005a28 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800599a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a6:	461a      	mov	r2, r3
 80059a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80059ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059da:	461a      	mov	r2, r3
 80059dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a12:	0151      	lsls	r1, r2, #5
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	440a      	add	r2, r1
 8005a18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a24:	3301      	adds	r3, #1
 8005a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	791b      	ldrb	r3, [r3, #4]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d3b2      	bcc.n	800599a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a42:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005a46:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	7bdb      	ldrb	r3, [r3, #15]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d016      	beq.n	8005a7e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a60:	f043 030b 	orr.w	r3, r3, #11
 8005a64:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a76:	f043 030b 	orr.w	r3, r3, #11
 8005a7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a7c:	e015      	b.n	8005aaa <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a84:	695a      	ldr	r2, [r3, #20]
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	f242 032b 	movw	r3, #8235	@ 0x202b
 8005a92:	4313      	orrs	r3, r2
 8005a94:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aa4:	f043 030b 	orr.w	r3, r3, #11
 8005aa8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ab8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005abc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005acc:	461a      	mov	r2, r3
 8005ace:	f006 fdf1 	bl	800c6b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695a      	ldr	r2, [r3, #20]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f006 fd1e 	bl	800c528 <USB_ReadInterrupts>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af6:	d123      	bne.n	8005b40 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f006 fdb5 	bl	800c66c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f005 fe69 	bl	800b7de <USB_GetDevSpeed>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	461a      	mov	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681c      	ldr	r4, [r3, #0]
 8005b18:	f001 faa2 	bl	8007060 <HAL_RCC_GetHCLKFreq>
 8005b1c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b22:	461a      	mov	r2, r3
 8005b24:	4620      	mov	r0, r4
 8005b26:	f005 fb61 	bl	800b1ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f009 f93b 	bl	800eda6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695a      	ldr	r2, [r3, #20]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f006 fcef 	bl	800c528 <USB_ReadInterrupts>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d10a      	bne.n	8005b6a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f009 f918 	bl	800ed8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695a      	ldr	r2, [r3, #20]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f002 0208 	and.w	r2, r2, #8
 8005b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f006 fcda 	bl	800c528 <USB_ReadInterrupts>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b7a:	2b80      	cmp	r3, #128	@ 0x80
 8005b7c:	d123      	bne.n	8005bc6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b8e:	e014      	b.n	8005bba <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b94:	4613      	mov	r3, r2
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	4413      	add	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	440b      	add	r3, r1
 8005b9e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d105      	bne.n	8005bb4 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fb08 	bl	80061c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	791b      	ldrb	r3, [r3, #4]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d3e4      	bcc.n	8005b90 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f006 fcac 	bl	800c528 <USB_ReadInterrupts>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bda:	d13c      	bne.n	8005c56 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bdc:	2301      	movs	r3, #1
 8005bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8005be0:	e02b      	b.n	8005c3a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	3318      	adds	r3, #24
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d115      	bne.n	8005c34 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005c08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	da12      	bge.n	8005c34 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c12:	4613      	mov	r3, r2
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	3317      	adds	r3, #23
 8005c1e:	2201      	movs	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fac8 	bl	80061c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	3301      	adds	r3, #1
 8005c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	791b      	ldrb	r3, [r3, #4]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d3cd      	bcc.n	8005be2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f006 fc64 	bl	800c528 <USB_ReadInterrupts>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c6a:	d156      	bne.n	8005d1a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c70:	e045      	b.n	8005cfe <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c86:	4613      	mov	r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	440b      	add	r3, r1
 8005c90:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d12e      	bne.n	8005cf8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c9a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	da2b      	bge.n	8005cf8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005cac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d121      	bne.n	8005cf8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005cb4:	6879      	ldr	r1, [r7, #4]
 8005cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb8:	4613      	mov	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10a      	bne.n	8005cf8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cf0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cf4:	6053      	str	r3, [r2, #4]
            break;
 8005cf6:	e008      	b.n	8005d0a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	791b      	ldrb	r3, [r3, #4]
 8005d02:	461a      	mov	r2, r3
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d3b3      	bcc.n	8005c72 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	695a      	ldr	r2, [r3, #20]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f006 fc02 	bl	800c528 <USB_ReadInterrupts>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d2e:	d10a      	bne.n	8005d46 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f009 f8b9 	bl	800eea8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695a      	ldr	r2, [r3, #20]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005d44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f006 fbec 	bl	800c528 <USB_ReadInterrupts>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d115      	bne.n	8005d86 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f009 f8a9 	bl	800eec4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6859      	ldr	r1, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	e000      	b.n	8005d86 <HAL_PCD_IRQHandler+0x996>
      return;
 8005d84:	bf00      	nop
    }
  }
}
 8005d86:	3734      	adds	r7, #52	@ 0x34
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd90      	pop	{r4, r7, pc}

08005d8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_PCD_SetAddress+0x1a>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e012      	b.n	8005dcc <HAL_PCD_SetAddress+0x40>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	78fa      	ldrb	r2, [r7, #3]
 8005db2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	78fa      	ldrb	r2, [r7, #3]
 8005dba:	4611      	mov	r1, r2
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f006 fb4b 	bl	800c458 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	4608      	mov	r0, r1
 8005dde:	4611      	mov	r1, r2
 8005de0:	461a      	mov	r2, r3
 8005de2:	4603      	mov	r3, r0
 8005de4:	70fb      	strb	r3, [r7, #3]
 8005de6:	460b      	mov	r3, r1
 8005de8:	803b      	strh	r3, [r7, #0]
 8005dea:	4613      	mov	r3, r2
 8005dec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	da0f      	bge.n	8005e1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	f003 020f 	and.w	r2, r3, #15
 8005e00:	4613      	mov	r3, r2
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	4413      	add	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	3310      	adds	r3, #16
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	3304      	adds	r3, #4
 8005e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	705a      	strb	r2, [r3, #1]
 8005e18:	e00f      	b.n	8005e3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e1a:	78fb      	ldrb	r3, [r7, #3]
 8005e1c:	f003 020f 	and.w	r2, r3, #15
 8005e20:	4613      	mov	r3, r2
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	4413      	add	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	4413      	add	r3, r2
 8005e30:	3304      	adds	r3, #4
 8005e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e46:	883a      	ldrh	r2, [r7, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	78ba      	ldrb	r2, [r7, #2]
 8005e50:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d004      	beq.n	8005e64 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e64:	78bb      	ldrb	r3, [r7, #2]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d102      	bne.n	8005e70 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <HAL_PCD_EP_Open+0xaa>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e00e      	b.n	8005e9c <HAL_PCD_EP_Open+0xc8>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68f9      	ldr	r1, [r7, #12]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f005 fccb 	bl	800b828 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005e9a:	7afb      	ldrb	r3, [r7, #11]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	da0f      	bge.n	8005ed8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	f003 020f 	and.w	r2, r3, #15
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	3310      	adds	r3, #16
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	4413      	add	r3, r2
 8005ecc:	3304      	adds	r3, #4
 8005ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	705a      	strb	r2, [r3, #1]
 8005ed6:	e00f      	b.n	8005ef8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	f003 020f 	and.w	r2, r3, #15
 8005ede:	4613      	mov	r3, r2
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	4413      	add	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	4413      	add	r3, r2
 8005eee:	3304      	adds	r3, #4
 8005ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ef8:	78fb      	ldrb	r3, [r7, #3]
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_PCD_EP_Close+0x6e>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e00e      	b.n	8005f30 <HAL_PCD_EP_Close+0x8c>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68f9      	ldr	r1, [r7, #12]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f005 fd09 	bl	800b938 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	607a      	str	r2, [r7, #4]
 8005f42:	603b      	str	r3, [r7, #0]
 8005f44:	460b      	mov	r3, r1
 8005f46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f48:	7afb      	ldrb	r3, [r7, #11]
 8005f4a:	f003 020f 	and.w	r2, r3, #15
 8005f4e:	4613      	mov	r3, r2
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	3304      	adds	r3, #4
 8005f60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2200      	movs	r2, #0
 8005f72:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2200      	movs	r2, #0
 8005f78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f7a:	7afb      	ldrb	r3, [r7, #11]
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	799b      	ldrb	r3, [r3, #6]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d102      	bne.n	8005f94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6818      	ldr	r0, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	799b      	ldrb	r3, [r3, #6]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6979      	ldr	r1, [r7, #20]
 8005fa0:	f005 fda6 	bl	800baf0 <USB_EPStartXfer>

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	f003 020f 	and.w	r2, r3, #15
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005fd0:	681b      	ldr	r3, [r3, #0]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b086      	sub	sp, #24
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
 8005fea:	460b      	mov	r3, r1
 8005fec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fee:	7afb      	ldrb	r3, [r7, #11]
 8005ff0:	f003 020f 	and.w	r2, r3, #15
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	3310      	adds	r3, #16
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	3304      	adds	r3, #4
 8006004:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2201      	movs	r2, #1
 800601c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800601e:	7afb      	ldrb	r3, [r7, #11]
 8006020:	f003 030f 	and.w	r3, r3, #15
 8006024:	b2da      	uxtb	r2, r3
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	799b      	ldrb	r3, [r3, #6]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d102      	bne.n	8006038 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	799b      	ldrb	r3, [r3, #6]
 8006040:	461a      	mov	r2, r3
 8006042:	6979      	ldr	r1, [r7, #20]
 8006044:	f005 fd54 	bl	800baf0 <USB_EPStartXfer>

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	460b      	mov	r3, r1
 800605c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	f003 030f 	and.w	r3, r3, #15
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	7912      	ldrb	r2, [r2, #4]
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e04f      	b.n	8006110 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006074:	2b00      	cmp	r3, #0
 8006076:	da0f      	bge.n	8006098 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	f003 020f 	and.w	r2, r3, #15
 800607e:	4613      	mov	r3, r2
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	3310      	adds	r3, #16
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	4413      	add	r3, r2
 800608c:	3304      	adds	r3, #4
 800608e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	705a      	strb	r2, [r3, #1]
 8006096:	e00d      	b.n	80060b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006098:	78fa      	ldrb	r2, [r7, #3]
 800609a:	4613      	mov	r3, r2
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	4413      	add	r3, r2
 80060aa:	3304      	adds	r3, #4
 80060ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2201      	movs	r2, #1
 80060b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_PCD_EP_SetStall+0x82>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e01d      	b.n	8006110 <HAL_PCD_EP_SetStall+0xbe>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68f9      	ldr	r1, [r7, #12]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f006 f8e4 	bl	800c2b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060e8:	78fb      	ldrb	r3, [r7, #3]
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d109      	bne.n	8006106 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	7999      	ldrb	r1, [r3, #6]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006100:	461a      	mov	r2, r3
 8006102:	f006 fad7 	bl	800c6b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	7912      	ldrb	r2, [r2, #4]
 800612e:	4293      	cmp	r3, r2
 8006130:	d901      	bls.n	8006136 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e042      	b.n	80061bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800613a:	2b00      	cmp	r3, #0
 800613c:	da0f      	bge.n	800615e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800613e:	78fb      	ldrb	r3, [r7, #3]
 8006140:	f003 020f 	and.w	r2, r3, #15
 8006144:	4613      	mov	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	3310      	adds	r3, #16
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	4413      	add	r3, r2
 8006152:	3304      	adds	r3, #4
 8006154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	705a      	strb	r2, [r3, #1]
 800615c:	e00f      	b.n	800617e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	f003 020f 	and.w	r2, r3, #15
 8006164:	4613      	mov	r3, r2
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	4413      	add	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	4413      	add	r3, r2
 8006174:	3304      	adds	r3, #4
 8006176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	b2da      	uxtb	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006196:	2b01      	cmp	r3, #1
 8006198:	d101      	bne.n	800619e <HAL_PCD_EP_ClrStall+0x86>
 800619a:	2302      	movs	r3, #2
 800619c:	e00e      	b.n	80061bc <HAL_PCD_EP_ClrStall+0xa4>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f006 f8ed 	bl	800c38c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80061d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	da0c      	bge.n	80061f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	f003 020f 	and.w	r2, r3, #15
 80061de:	4613      	mov	r3, r2
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	3310      	adds	r3, #16
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	4413      	add	r3, r2
 80061ec:	3304      	adds	r3, #4
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	e00c      	b.n	800620c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061f2:	78fb      	ldrb	r3, [r7, #3]
 80061f4:	f003 020f 	and.w	r2, r3, #15
 80061f8:	4613      	mov	r3, r2
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	4413      	add	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	4413      	add	r3, r2
 8006208:	3304      	adds	r3, #4
 800620a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68f9      	ldr	r1, [r7, #12]
 8006212:	4618      	mov	r0, r3
 8006214:	f005 ff0c 	bl	800c030 <USB_EPStopXfer>
 8006218:	4603      	mov	r3, r0
 800621a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800621c:	7afb      	ldrb	r3, [r7, #11]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b08a      	sub	sp, #40	@ 0x28
 800622a:	af02      	add	r7, sp, #8
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	4613      	mov	r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	3310      	adds	r3, #16
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	4413      	add	r3, r2
 800624a:	3304      	adds	r3, #4
 800624c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	695a      	ldr	r2, [r3, #20]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	429a      	cmp	r2, r3
 8006258:	d901      	bls.n	800625e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e06b      	b.n	8006336 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	429a      	cmp	r2, r3
 8006272:	d902      	bls.n	800627a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	3303      	adds	r3, #3
 800627e:	089b      	lsrs	r3, r3, #2
 8006280:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006282:	e02a      	b.n	80062da <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	429a      	cmp	r2, r3
 8006298:	d902      	bls.n	80062a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	3303      	adds	r3, #3
 80062a4:	089b      	lsrs	r3, r3, #2
 80062a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	68d9      	ldr	r1, [r3, #12]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	4603      	mov	r3, r0
 80062bc:	6978      	ldr	r0, [r7, #20]
 80062be:	f005 ff61 	bl	800c184 <USB_WritePacket>

    ep->xfer_buff  += len;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	441a      	add	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	695a      	ldr	r2, [r3, #20]
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	441a      	add	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d809      	bhi.n	8006304 <PCD_WriteEmptyTxFifo+0xde>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	695a      	ldr	r2, [r3, #20]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d203      	bcs.n	8006304 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1bf      	bne.n	8006284 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	691a      	ldr	r2, [r3, #16]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	429a      	cmp	r2, r3
 800630e:	d811      	bhi.n	8006334 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	2201      	movs	r2, #1
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006324:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	43db      	mvns	r3, r3
 800632a:	6939      	ldr	r1, [r7, #16]
 800632c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006330:	4013      	ands	r3, r2
 8006332:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3720      	adds	r7, #32
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	333c      	adds	r3, #60	@ 0x3c
 8006358:	3304      	adds	r3, #4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	799b      	ldrb	r3, [r3, #6]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d17b      	bne.n	800646e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f003 0308 	and.w	r3, r3, #8
 800637c:	2b00      	cmp	r3, #0
 800637e:	d015      	beq.n	80063ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	4a61      	ldr	r2, [pc, #388]	@ (8006508 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	f240 80b9 	bls.w	80064fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 80b3 	beq.w	80064fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a2:	461a      	mov	r2, r3
 80063a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063a8:	6093      	str	r3, [r2, #8]
 80063aa:	e0a7      	b.n	80064fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f003 0320 	and.w	r3, r3, #32
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d009      	beq.n	80063ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c2:	461a      	mov	r2, r3
 80063c4:	2320      	movs	r3, #32
 80063c6:	6093      	str	r3, [r2, #8]
 80063c8:	e098      	b.n	80064fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f040 8093 	bne.w	80064fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	4a4b      	ldr	r2, [pc, #300]	@ (8006508 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d90f      	bls.n	80063fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00a      	beq.n	80063fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f4:	461a      	mov	r2, r3
 80063f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063fa:	6093      	str	r3, [r2, #8]
 80063fc:	e07e      	b.n	80064fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	4613      	mov	r3, r2
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	4413      	add	r3, r2
 8006410:	3304      	adds	r3, #4
 8006412:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a1a      	ldr	r2, [r3, #32]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	0159      	lsls	r1, r3, #5
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	440b      	add	r3, r1
 8006420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800642a:	1ad2      	subs	r2, r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d114      	bne.n	8006460 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d109      	bne.n	8006452 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006448:	461a      	mov	r2, r3
 800644a:	2101      	movs	r1, #1
 800644c:	f006 f932 	bl	800c6b4 <USB_EP0_OutStart>
 8006450:	e006      	b.n	8006460 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	441a      	add	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	b2db      	uxtb	r3, r3
 8006464:	4619      	mov	r1, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f008 fc5a 	bl	800ed20 <HAL_PCD_DataOutStageCallback>
 800646c:	e046      	b.n	80064fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	4a26      	ldr	r2, [pc, #152]	@ (800650c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d124      	bne.n	80064c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00a      	beq.n	8006496 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800648c:	461a      	mov	r2, r3
 800648e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006492:	6093      	str	r3, [r2, #8]
 8006494:	e032      	b.n	80064fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f003 0320 	and.w	r3, r3, #32
 800649c:	2b00      	cmp	r3, #0
 800649e:	d008      	beq.n	80064b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ac:	461a      	mov	r2, r3
 80064ae:	2320      	movs	r3, #32
 80064b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f008 fc31 	bl	800ed20 <HAL_PCD_DataOutStageCallback>
 80064be:	e01d      	b.n	80064fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d114      	bne.n	80064f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	4613      	mov	r3, r2
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	4413      	add	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	440b      	add	r3, r1
 80064d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d108      	bne.n	80064f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80064e8:	461a      	mov	r2, r3
 80064ea:	2100      	movs	r1, #0
 80064ec:	f006 f8e2 	bl	800c6b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f008 fc12 	bl	800ed20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3720      	adds	r7, #32
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	4f54300a 	.word	0x4f54300a
 800650c:	4f54310a 	.word	0x4f54310a

08006510 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	333c      	adds	r3, #60	@ 0x3c
 8006528:	3304      	adds	r3, #4
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a15      	ldr	r2, [pc, #84]	@ (8006598 <PCD_EP_OutSetupPacket_int+0x88>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d90e      	bls.n	8006564 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800654c:	2b00      	cmp	r3, #0
 800654e:	d009      	beq.n	8006564 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655c:	461a      	mov	r2, r3
 800655e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006562:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f008 fbc9 	bl	800ecfc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4a0a      	ldr	r2, [pc, #40]	@ (8006598 <PCD_EP_OutSetupPacket_int+0x88>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d90c      	bls.n	800658c <PCD_EP_OutSetupPacket_int+0x7c>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	799b      	ldrb	r3, [r3, #6]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d108      	bne.n	800658c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006584:	461a      	mov	r2, r3
 8006586:	2101      	movs	r1, #1
 8006588:	f006 f894 	bl	800c6b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	4f54300a 	.word	0x4f54300a

0800659c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	70fb      	strb	r3, [r7, #3]
 80065a8:	4613      	mov	r3, r2
 80065aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d107      	bne.n	80065ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80065ba:	883b      	ldrh	r3, [r7, #0]
 80065bc:	0419      	lsls	r1, r3, #16
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80065c8:	e028      	b.n	800661c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d0:	0c1b      	lsrs	r3, r3, #16
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	4413      	add	r3, r2
 80065d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065d8:	2300      	movs	r3, #0
 80065da:	73fb      	strb	r3, [r7, #15]
 80065dc:	e00d      	b.n	80065fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	3340      	adds	r3, #64	@ 0x40
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	0c1b      	lsrs	r3, r3, #16
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	4413      	add	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
 80065f6:	3301      	adds	r3, #1
 80065f8:	73fb      	strb	r3, [r7, #15]
 80065fa:	7bfa      	ldrb	r2, [r7, #15]
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	3b01      	subs	r3, #1
 8006600:	429a      	cmp	r2, r3
 8006602:	d3ec      	bcc.n	80065de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006604:	883b      	ldrh	r3, [r7, #0]
 8006606:	0418      	lsls	r0, r3, #16
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6819      	ldr	r1, [r3, #0]
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	3b01      	subs	r3, #1
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	4302      	orrs	r2, r0
 8006614:	3340      	adds	r3, #64	@ 0x40
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	460b      	mov	r3, r1
 8006634:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	887a      	ldrh	r2, [r7, #2]
 800663c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800667a:	4b05      	ldr	r3, [pc, #20]	@ (8006690 <HAL_PCDEx_ActivateLPM+0x44>)
 800667c:	4313      	orrs	r3, r2
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	10000003 	.word	0x10000003

08006694 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800669e:	4b23      	ldr	r3, [pc, #140]	@ (800672c <HAL_PWREx_EnableOverDrive+0x98>)
 80066a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a2:	4a22      	ldr	r2, [pc, #136]	@ (800672c <HAL_PWREx_EnableOverDrive+0x98>)
 80066a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80066aa:	4b20      	ldr	r3, [pc, #128]	@ (800672c <HAL_PWREx_EnableOverDrive+0x98>)
 80066ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80066b6:	4b1e      	ldr	r3, [pc, #120]	@ (8006730 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a1d      	ldr	r2, [pc, #116]	@ (8006730 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066c2:	f7fd fe59 	bl	8004378 <HAL_GetTick>
 80066c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80066c8:	e009      	b.n	80066de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80066ca:	f7fd fe55 	bl	8004378 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066d8:	d901      	bls.n	80066de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e022      	b.n	8006724 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80066de:	4b14      	ldr	r3, [pc, #80]	@ (8006730 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066ea:	d1ee      	bne.n	80066ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80066ec:	4b10      	ldr	r3, [pc, #64]	@ (8006730 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a0f      	ldr	r2, [pc, #60]	@ (8006730 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066f8:	f7fd fe3e 	bl	8004378 <HAL_GetTick>
 80066fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066fe:	e009      	b.n	8006714 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006700:	f7fd fe3a 	bl	8004378 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800670e:	d901      	bls.n	8006714 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e007      	b.n	8006724 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006714:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800671c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006720:	d1ee      	bne.n	8006700 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	40023800 	.word	0x40023800
 8006730:	40007000 	.word	0x40007000

08006734 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800673c:	2300      	movs	r3, #0
 800673e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e291      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 8087 	beq.w	8006866 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006758:	4b96      	ldr	r3, [pc, #600]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f003 030c 	and.w	r3, r3, #12
 8006760:	2b04      	cmp	r3, #4
 8006762:	d00c      	beq.n	800677e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006764:	4b93      	ldr	r3, [pc, #588]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 030c 	and.w	r3, r3, #12
 800676c:	2b08      	cmp	r3, #8
 800676e:	d112      	bne.n	8006796 <HAL_RCC_OscConfig+0x62>
 8006770:	4b90      	ldr	r3, [pc, #576]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800677c:	d10b      	bne.n	8006796 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800677e:	4b8d      	ldr	r3, [pc, #564]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d06c      	beq.n	8006864 <HAL_RCC_OscConfig+0x130>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d168      	bne.n	8006864 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e26b      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800679e:	d106      	bne.n	80067ae <HAL_RCC_OscConfig+0x7a>
 80067a0:	4b84      	ldr	r3, [pc, #528]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a83      	ldr	r2, [pc, #524]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80067a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	e02e      	b.n	800680c <HAL_RCC_OscConfig+0xd8>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10c      	bne.n	80067d0 <HAL_RCC_OscConfig+0x9c>
 80067b6:	4b7f      	ldr	r3, [pc, #508]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a7e      	ldr	r2, [pc, #504]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80067bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	4b7c      	ldr	r3, [pc, #496]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a7b      	ldr	r2, [pc, #492]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80067c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	e01d      	b.n	800680c <HAL_RCC_OscConfig+0xd8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067d8:	d10c      	bne.n	80067f4 <HAL_RCC_OscConfig+0xc0>
 80067da:	4b76      	ldr	r3, [pc, #472]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a75      	ldr	r2, [pc, #468]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80067e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	4b73      	ldr	r3, [pc, #460]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a72      	ldr	r2, [pc, #456]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80067ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	e00b      	b.n	800680c <HAL_RCC_OscConfig+0xd8>
 80067f4:	4b6f      	ldr	r3, [pc, #444]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a6e      	ldr	r2, [pc, #440]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80067fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	4b6c      	ldr	r3, [pc, #432]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a6b      	ldr	r2, [pc, #428]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800680a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d013      	beq.n	800683c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006814:	f7fd fdb0 	bl	8004378 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800681c:	f7fd fdac 	bl	8004378 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b64      	cmp	r3, #100	@ 0x64
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e21f      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800682e:	4b61      	ldr	r3, [pc, #388]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0f0      	beq.n	800681c <HAL_RCC_OscConfig+0xe8>
 800683a:	e014      	b.n	8006866 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683c:	f7fd fd9c 	bl	8004378 <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006844:	f7fd fd98 	bl	8004378 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b64      	cmp	r3, #100	@ 0x64
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e20b      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006856:	4b57      	ldr	r3, [pc, #348]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f0      	bne.n	8006844 <HAL_RCC_OscConfig+0x110>
 8006862:	e000      	b.n	8006866 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d069      	beq.n	8006946 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006872:	4b50      	ldr	r3, [pc, #320]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 030c 	and.w	r3, r3, #12
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00b      	beq.n	8006896 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800687e:	4b4d      	ldr	r3, [pc, #308]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 030c 	and.w	r3, r3, #12
 8006886:	2b08      	cmp	r3, #8
 8006888:	d11c      	bne.n	80068c4 <HAL_RCC_OscConfig+0x190>
 800688a:	4b4a      	ldr	r3, [pc, #296]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d116      	bne.n	80068c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006896:	4b47      	ldr	r3, [pc, #284]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <HAL_RCC_OscConfig+0x17a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d001      	beq.n	80068ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e1df      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ae:	4b41      	ldr	r3, [pc, #260]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	493d      	ldr	r1, [pc, #244]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068c2:	e040      	b.n	8006946 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d023      	beq.n	8006914 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068cc:	4b39      	ldr	r3, [pc, #228]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a38      	ldr	r2, [pc, #224]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80068d2:	f043 0301 	orr.w	r3, r3, #1
 80068d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fd fd4e 	bl	8004378 <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068e0:	f7fd fd4a 	bl	8004378 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e1bd      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068f2:	4b30      	ldr	r3, [pc, #192]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0f0      	beq.n	80068e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068fe:	4b2d      	ldr	r3, [pc, #180]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	4929      	ldr	r1, [pc, #164]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 800690e:	4313      	orrs	r3, r2
 8006910:	600b      	str	r3, [r1, #0]
 8006912:	e018      	b.n	8006946 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006914:	4b27      	ldr	r3, [pc, #156]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a26      	ldr	r2, [pc, #152]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 800691a:	f023 0301 	bic.w	r3, r3, #1
 800691e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006920:	f7fd fd2a 	bl	8004378 <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006928:	f7fd fd26 	bl	8004378 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e199      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800693a:	4b1e      	ldr	r3, [pc, #120]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1f0      	bne.n	8006928 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0308 	and.w	r3, r3, #8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d038      	beq.n	80069c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d019      	beq.n	800698e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800695a:	4b16      	ldr	r3, [pc, #88]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 800695c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800695e:	4a15      	ldr	r2, [pc, #84]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006960:	f043 0301 	orr.w	r3, r3, #1
 8006964:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006966:	f7fd fd07 	bl	8004378 <HAL_GetTick>
 800696a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800696c:	e008      	b.n	8006980 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800696e:	f7fd fd03 	bl	8004378 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d901      	bls.n	8006980 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e176      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006980:	4b0c      	ldr	r3, [pc, #48]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0f0      	beq.n	800696e <HAL_RCC_OscConfig+0x23a>
 800698c:	e01a      	b.n	80069c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800698e:	4b09      	ldr	r3, [pc, #36]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006992:	4a08      	ldr	r2, [pc, #32]	@ (80069b4 <HAL_RCC_OscConfig+0x280>)
 8006994:	f023 0301 	bic.w	r3, r3, #1
 8006998:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699a:	f7fd fced 	bl	8004378 <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069a0:	e00a      	b.n	80069b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069a2:	f7fd fce9 	bl	8004378 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d903      	bls.n	80069b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e15c      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>
 80069b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069b8:	4b91      	ldr	r3, [pc, #580]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 80069ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069bc:	f003 0302 	and.w	r3, r3, #2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1ee      	bne.n	80069a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 80a4 	beq.w	8006b1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069d2:	4b8b      	ldr	r3, [pc, #556]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 80069d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10d      	bne.n	80069fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80069de:	4b88      	ldr	r3, [pc, #544]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 80069e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e2:	4a87      	ldr	r2, [pc, #540]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 80069e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80069ea:	4b85      	ldr	r3, [pc, #532]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 80069ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069f2:	60bb      	str	r3, [r7, #8]
 80069f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069f6:	2301      	movs	r3, #1
 80069f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069fa:	4b82      	ldr	r3, [pc, #520]	@ (8006c04 <HAL_RCC_OscConfig+0x4d0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d118      	bne.n	8006a38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006a06:	4b7f      	ldr	r3, [pc, #508]	@ (8006c04 <HAL_RCC_OscConfig+0x4d0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a7e      	ldr	r2, [pc, #504]	@ (8006c04 <HAL_RCC_OscConfig+0x4d0>)
 8006a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a12:	f7fd fcb1 	bl	8004378 <HAL_GetTick>
 8006a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a18:	e008      	b.n	8006a2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a1a:	f7fd fcad 	bl	8004378 <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b64      	cmp	r3, #100	@ 0x64
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e120      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a2c:	4b75      	ldr	r3, [pc, #468]	@ (8006c04 <HAL_RCC_OscConfig+0x4d0>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0f0      	beq.n	8006a1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d106      	bne.n	8006a4e <HAL_RCC_OscConfig+0x31a>
 8006a40:	4b6f      	ldr	r3, [pc, #444]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a44:	4a6e      	ldr	r2, [pc, #440]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006a46:	f043 0301 	orr.w	r3, r3, #1
 8006a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a4c:	e02d      	b.n	8006aaa <HAL_RCC_OscConfig+0x376>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10c      	bne.n	8006a70 <HAL_RCC_OscConfig+0x33c>
 8006a56:	4b6a      	ldr	r3, [pc, #424]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5a:	4a69      	ldr	r2, [pc, #420]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006a5c:	f023 0301 	bic.w	r3, r3, #1
 8006a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a62:	4b67      	ldr	r3, [pc, #412]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a66:	4a66      	ldr	r2, [pc, #408]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006a68:	f023 0304 	bic.w	r3, r3, #4
 8006a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a6e:	e01c      	b.n	8006aaa <HAL_RCC_OscConfig+0x376>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	2b05      	cmp	r3, #5
 8006a76:	d10c      	bne.n	8006a92 <HAL_RCC_OscConfig+0x35e>
 8006a78:	4b61      	ldr	r3, [pc, #388]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a7c:	4a60      	ldr	r2, [pc, #384]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006a7e:	f043 0304 	orr.w	r3, r3, #4
 8006a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a84:	4b5e      	ldr	r3, [pc, #376]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a88:	4a5d      	ldr	r2, [pc, #372]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006a8a:	f043 0301 	orr.w	r3, r3, #1
 8006a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a90:	e00b      	b.n	8006aaa <HAL_RCC_OscConfig+0x376>
 8006a92:	4b5b      	ldr	r3, [pc, #364]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a96:	4a5a      	ldr	r2, [pc, #360]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006a98:	f023 0301 	bic.w	r3, r3, #1
 8006a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a9e:	4b58      	ldr	r3, [pc, #352]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa2:	4a57      	ldr	r2, [pc, #348]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006aa4:	f023 0304 	bic.w	r3, r3, #4
 8006aa8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d015      	beq.n	8006ade <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab2:	f7fd fc61 	bl	8004378 <HAL_GetTick>
 8006ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab8:	e00a      	b.n	8006ad0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aba:	f7fd fc5d 	bl	8004378 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e0ce      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ad0:	4b4b      	ldr	r3, [pc, #300]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0ee      	beq.n	8006aba <HAL_RCC_OscConfig+0x386>
 8006adc:	e014      	b.n	8006b08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ade:	f7fd fc4b 	bl	8004378 <HAL_GetTick>
 8006ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ae4:	e00a      	b.n	8006afc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ae6:	f7fd fc47 	bl	8004378 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e0b8      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006afc:	4b40      	ldr	r3, [pc, #256]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1ee      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d105      	bne.n	8006b1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b0e:	4b3c      	ldr	r3, [pc, #240]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b12:	4a3b      	ldr	r2, [pc, #236]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006b14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b18:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 80a4 	beq.w	8006c6c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b24:	4b36      	ldr	r3, [pc, #216]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f003 030c 	and.w	r3, r3, #12
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d06b      	beq.n	8006c08 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d149      	bne.n	8006bcc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b38:	4b31      	ldr	r3, [pc, #196]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a30      	ldr	r2, [pc, #192]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006b3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b44:	f7fd fc18 	bl	8004378 <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b4a:	e008      	b.n	8006b5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b4c:	f7fd fc14 	bl	8004378 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e087      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b5e:	4b28      	ldr	r3, [pc, #160]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1f0      	bne.n	8006b4c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69da      	ldr	r2, [r3, #28]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	431a      	orrs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b78:	019b      	lsls	r3, r3, #6
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b80:	085b      	lsrs	r3, r3, #1
 8006b82:	3b01      	subs	r3, #1
 8006b84:	041b      	lsls	r3, r3, #16
 8006b86:	431a      	orrs	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8c:	061b      	lsls	r3, r3, #24
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	4a1b      	ldr	r2, [pc, #108]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006b92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b96:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b98:	4b19      	ldr	r3, [pc, #100]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a18      	ldr	r2, [pc, #96]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba4:	f7fd fbe8 	bl	8004378 <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bac:	f7fd fbe4 	bl	8004378 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e057      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bbe:	4b10      	ldr	r3, [pc, #64]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0f0      	beq.n	8006bac <HAL_RCC_OscConfig+0x478>
 8006bca:	e04f      	b.n	8006c6c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006bd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd8:	f7fd fbce 	bl	8004378 <HAL_GetTick>
 8006bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bde:	e008      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be0:	f7fd fbca 	bl	8004378 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e03d      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf2:	4b03      	ldr	r3, [pc, #12]	@ (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1f0      	bne.n	8006be0 <HAL_RCC_OscConfig+0x4ac>
 8006bfe:	e035      	b.n	8006c6c <HAL_RCC_OscConfig+0x538>
 8006c00:	40023800 	.word	0x40023800
 8006c04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006c08:	4b1b      	ldr	r3, [pc, #108]	@ (8006c78 <HAL_RCC_OscConfig+0x544>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d028      	beq.n	8006c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d121      	bne.n	8006c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d11a      	bne.n	8006c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c38:	4013      	ands	r3, r2
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d111      	bne.n	8006c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4e:	085b      	lsrs	r3, r3, #1
 8006c50:	3b01      	subs	r3, #1
 8006c52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d107      	bne.n	8006c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d001      	beq.n	8006c6c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e000      	b.n	8006c6e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	40023800 	.word	0x40023800

08006c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0d0      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c94:	4b6a      	ldr	r3, [pc, #424]	@ (8006e40 <HAL_RCC_ClockConfig+0x1c4>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 030f 	and.w	r3, r3, #15
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d910      	bls.n	8006cc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ca2:	4b67      	ldr	r3, [pc, #412]	@ (8006e40 <HAL_RCC_ClockConfig+0x1c4>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f023 020f 	bic.w	r2, r3, #15
 8006caa:	4965      	ldr	r1, [pc, #404]	@ (8006e40 <HAL_RCC_ClockConfig+0x1c4>)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cb2:	4b63      	ldr	r3, [pc, #396]	@ (8006e40 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d001      	beq.n	8006cc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0b8      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d020      	beq.n	8006d12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cdc:	4b59      	ldr	r3, [pc, #356]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	4a58      	ldr	r2, [pc, #352]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006ce2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006ce6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cf4:	4b53      	ldr	r3, [pc, #332]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	4a52      	ldr	r2, [pc, #328]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006cfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006cfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d00:	4b50      	ldr	r3, [pc, #320]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	494d      	ldr	r1, [pc, #308]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d040      	beq.n	8006da0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d107      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d26:	4b47      	ldr	r3, [pc, #284]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d115      	bne.n	8006d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e07f      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d107      	bne.n	8006d4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d3e:	4b41      	ldr	r3, [pc, #260]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d109      	bne.n	8006d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e073      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e06b      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d5e:	4b39      	ldr	r3, [pc, #228]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f023 0203 	bic.w	r2, r3, #3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	4936      	ldr	r1, [pc, #216]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d70:	f7fd fb02 	bl	8004378 <HAL_GetTick>
 8006d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d76:	e00a      	b.n	8006d8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d78:	f7fd fafe 	bl	8004378 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e053      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f003 020c 	and.w	r2, r3, #12
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d1eb      	bne.n	8006d78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006da0:	4b27      	ldr	r3, [pc, #156]	@ (8006e40 <HAL_RCC_ClockConfig+0x1c4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d210      	bcs.n	8006dd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dae:	4b24      	ldr	r3, [pc, #144]	@ (8006e40 <HAL_RCC_ClockConfig+0x1c4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f023 020f 	bic.w	r2, r3, #15
 8006db6:	4922      	ldr	r1, [pc, #136]	@ (8006e40 <HAL_RCC_ClockConfig+0x1c4>)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dbe:	4b20      	ldr	r3, [pc, #128]	@ (8006e40 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d001      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e032      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ddc:	4b19      	ldr	r3, [pc, #100]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	4916      	ldr	r1, [pc, #88]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d009      	beq.n	8006e0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006dfa:	4b12      	ldr	r3, [pc, #72]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	490e      	ldr	r1, [pc, #56]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e0e:	f000 f821 	bl	8006e54 <HAL_RCC_GetSysClockFreq>
 8006e12:	4602      	mov	r2, r0
 8006e14:	4b0b      	ldr	r3, [pc, #44]	@ (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	091b      	lsrs	r3, r3, #4
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	490a      	ldr	r1, [pc, #40]	@ (8006e48 <HAL_RCC_ClockConfig+0x1cc>)
 8006e20:	5ccb      	ldrb	r3, [r1, r3]
 8006e22:	fa22 f303 	lsr.w	r3, r2, r3
 8006e26:	4a09      	ldr	r2, [pc, #36]	@ (8006e4c <HAL_RCC_ClockConfig+0x1d0>)
 8006e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e2a:	4b09      	ldr	r3, [pc, #36]	@ (8006e50 <HAL_RCC_ClockConfig+0x1d4>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fd fa5e 	bl	80042f0 <HAL_InitTick>

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	40023c00 	.word	0x40023c00
 8006e44:	40023800 	.word	0x40023800
 8006e48:	080158bc 	.word	0x080158bc
 8006e4c:	20000064 	.word	0x20000064
 8006e50:	20000068 	.word	0x20000068

08006e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e58:	b094      	sub	sp, #80	@ 0x50
 8006e5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e60:	2300      	movs	r3, #0
 8006e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e64:	2300      	movs	r3, #0
 8006e66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e6c:	4b79      	ldr	r3, [pc, #484]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f003 030c 	and.w	r3, r3, #12
 8006e74:	2b08      	cmp	r3, #8
 8006e76:	d00d      	beq.n	8006e94 <HAL_RCC_GetSysClockFreq+0x40>
 8006e78:	2b08      	cmp	r3, #8
 8006e7a:	f200 80e1 	bhi.w	8007040 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <HAL_RCC_GetSysClockFreq+0x34>
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d003      	beq.n	8006e8e <HAL_RCC_GetSysClockFreq+0x3a>
 8006e86:	e0db      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e88:	4b73      	ldr	r3, [pc, #460]	@ (8007058 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e8c:	e0db      	b.n	8007046 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e8e:	4b73      	ldr	r3, [pc, #460]	@ (800705c <HAL_RCC_GetSysClockFreq+0x208>)
 8006e90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e92:	e0d8      	b.n	8007046 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e94:	4b6f      	ldr	r3, [pc, #444]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006e9e:	4b6d      	ldr	r3, [pc, #436]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d063      	beq.n	8006f72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	099b      	lsrs	r3, r3, #6
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006eb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ebc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006ec6:	4622      	mov	r2, r4
 8006ec8:	462b      	mov	r3, r5
 8006eca:	f04f 0000 	mov.w	r0, #0
 8006ece:	f04f 0100 	mov.w	r1, #0
 8006ed2:	0159      	lsls	r1, r3, #5
 8006ed4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ed8:	0150      	lsls	r0, r2, #5
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4621      	mov	r1, r4
 8006ee0:	1a51      	subs	r1, r2, r1
 8006ee2:	6139      	str	r1, [r7, #16]
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8006eea:	617b      	str	r3, [r7, #20]
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ef8:	4659      	mov	r1, fp
 8006efa:	018b      	lsls	r3, r1, #6
 8006efc:	4651      	mov	r1, sl
 8006efe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f02:	4651      	mov	r1, sl
 8006f04:	018a      	lsls	r2, r1, #6
 8006f06:	4651      	mov	r1, sl
 8006f08:	ebb2 0801 	subs.w	r8, r2, r1
 8006f0c:	4659      	mov	r1, fp
 8006f0e:	eb63 0901 	sbc.w	r9, r3, r1
 8006f12:	f04f 0200 	mov.w	r2, #0
 8006f16:	f04f 0300 	mov.w	r3, #0
 8006f1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f26:	4690      	mov	r8, r2
 8006f28:	4699      	mov	r9, r3
 8006f2a:	4623      	mov	r3, r4
 8006f2c:	eb18 0303 	adds.w	r3, r8, r3
 8006f30:	60bb      	str	r3, [r7, #8]
 8006f32:	462b      	mov	r3, r5
 8006f34:	eb49 0303 	adc.w	r3, r9, r3
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	f04f 0200 	mov.w	r2, #0
 8006f3e:	f04f 0300 	mov.w	r3, #0
 8006f42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f46:	4629      	mov	r1, r5
 8006f48:	024b      	lsls	r3, r1, #9
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f50:	4621      	mov	r1, r4
 8006f52:	024a      	lsls	r2, r1, #9
 8006f54:	4610      	mov	r0, r2
 8006f56:	4619      	mov	r1, r3
 8006f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f64:	f7f9 fec8 	bl	8000cf8 <__aeabi_uldivmod>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f70:	e058      	b.n	8007024 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f72:	4b38      	ldr	r3, [pc, #224]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	099b      	lsrs	r3, r3, #6
 8006f78:	2200      	movs	r2, #0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f82:	623b      	str	r3, [r7, #32]
 8006f84:	2300      	movs	r3, #0
 8006f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f8c:	4642      	mov	r2, r8
 8006f8e:	464b      	mov	r3, r9
 8006f90:	f04f 0000 	mov.w	r0, #0
 8006f94:	f04f 0100 	mov.w	r1, #0
 8006f98:	0159      	lsls	r1, r3, #5
 8006f9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f9e:	0150      	lsls	r0, r2, #5
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006faa:	4649      	mov	r1, r9
 8006fac:	eb63 0b01 	sbc.w	fp, r3, r1
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006fbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006fc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006fc4:	ebb2 040a 	subs.w	r4, r2, sl
 8006fc8:	eb63 050b 	sbc.w	r5, r3, fp
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	00eb      	lsls	r3, r5, #3
 8006fd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fda:	00e2      	lsls	r2, r4, #3
 8006fdc:	4614      	mov	r4, r2
 8006fde:	461d      	mov	r5, r3
 8006fe0:	4643      	mov	r3, r8
 8006fe2:	18e3      	adds	r3, r4, r3
 8006fe4:	603b      	str	r3, [r7, #0]
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	eb45 0303 	adc.w	r3, r5, r3
 8006fec:	607b      	str	r3, [r7, #4]
 8006fee:	f04f 0200 	mov.w	r2, #0
 8006ff2:	f04f 0300 	mov.w	r3, #0
 8006ff6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	028b      	lsls	r3, r1, #10
 8006ffe:	4621      	mov	r1, r4
 8007000:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007004:	4621      	mov	r1, r4
 8007006:	028a      	lsls	r2, r1, #10
 8007008:	4610      	mov	r0, r2
 800700a:	4619      	mov	r1, r3
 800700c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800700e:	2200      	movs	r2, #0
 8007010:	61bb      	str	r3, [r7, #24]
 8007012:	61fa      	str	r2, [r7, #28]
 8007014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007018:	f7f9 fe6e 	bl	8000cf8 <__aeabi_uldivmod>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4613      	mov	r3, r2
 8007022:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007024:	4b0b      	ldr	r3, [pc, #44]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x200>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	0c1b      	lsrs	r3, r3, #16
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	3301      	adds	r3, #1
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007034:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007038:	fbb2 f3f3 	udiv	r3, r2, r3
 800703c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800703e:	e002      	b.n	8007046 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007040:	4b05      	ldr	r3, [pc, #20]	@ (8007058 <HAL_RCC_GetSysClockFreq+0x204>)
 8007042:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007048:	4618      	mov	r0, r3
 800704a:	3750      	adds	r7, #80	@ 0x50
 800704c:	46bd      	mov	sp, r7
 800704e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007052:	bf00      	nop
 8007054:	40023800 	.word	0x40023800
 8007058:	00f42400 	.word	0x00f42400
 800705c:	007a1200 	.word	0x007a1200

08007060 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007064:	4b03      	ldr	r3, [pc, #12]	@ (8007074 <HAL_RCC_GetHCLKFreq+0x14>)
 8007066:	681b      	ldr	r3, [r3, #0]
}
 8007068:	4618      	mov	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20000064 	.word	0x20000064

08007078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800707c:	f7ff fff0 	bl	8007060 <HAL_RCC_GetHCLKFreq>
 8007080:	4602      	mov	r2, r0
 8007082:	4b05      	ldr	r3, [pc, #20]	@ (8007098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	0a9b      	lsrs	r3, r3, #10
 8007088:	f003 0307 	and.w	r3, r3, #7
 800708c:	4903      	ldr	r1, [pc, #12]	@ (800709c <HAL_RCC_GetPCLK1Freq+0x24>)
 800708e:	5ccb      	ldrb	r3, [r1, r3]
 8007090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007094:	4618      	mov	r0, r3
 8007096:	bd80      	pop	{r7, pc}
 8007098:	40023800 	.word	0x40023800
 800709c:	080158cc 	.word	0x080158cc

080070a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070a4:	f7ff ffdc 	bl	8007060 <HAL_RCC_GetHCLKFreq>
 80070a8:	4602      	mov	r2, r0
 80070aa:	4b05      	ldr	r3, [pc, #20]	@ (80070c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	0b5b      	lsrs	r3, r3, #13
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	4903      	ldr	r1, [pc, #12]	@ (80070c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070b6:	5ccb      	ldrb	r3, [r1, r3]
 80070b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070bc:	4618      	mov	r0, r3
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	40023800 	.word	0x40023800
 80070c4:	080158cc 	.word	0x080158cc

080070c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80070d8:	2300      	movs	r3, #0
 80070da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d012      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80070ec:	4b65      	ldr	r3, [pc, #404]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	4a64      	ldr	r2, [pc, #400]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80070f6:	6093      	str	r3, [r2, #8]
 80070f8:	4b62      	ldr	r3, [pc, #392]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007100:	4960      	ldr	r1, [pc, #384]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007102:	4313      	orrs	r3, r2
 8007104:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800710e:	2301      	movs	r3, #1
 8007110:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d017      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800711e:	4b59      	ldr	r3, [pc, #356]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007124:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800712c:	4955      	ldr	r1, [pc, #340]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800712e:	4313      	orrs	r3, r2
 8007130:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007138:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800713c:	d101      	bne.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800713e:	2301      	movs	r3, #1
 8007140:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800714a:	2301      	movs	r3, #1
 800714c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d017      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800715a:	4b4a      	ldr	r3, [pc, #296]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800715c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007160:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007168:	4946      	ldr	r1, [pc, #280]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800716a:	4313      	orrs	r3, r2
 800716c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007174:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007178:	d101      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800717a:	2301      	movs	r3, #1
 800717c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8007186:	2301      	movs	r3, #1
 8007188:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 808b 	beq.w	80072ae <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007198:	4b3a      	ldr	r3, [pc, #232]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800719a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719c:	4a39      	ldr	r2, [pc, #228]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800719e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80071a4:	4b37      	ldr	r3, [pc, #220]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80071b0:	4b35      	ldr	r3, [pc, #212]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a34      	ldr	r2, [pc, #208]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80071b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071bc:	f7fd f8dc 	bl	8004378 <HAL_GetTick>
 80071c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80071c2:	e008      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071c4:	f7fd f8d8 	bl	8004378 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b64      	cmp	r3, #100	@ 0x64
 80071d0:	d901      	bls.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e2bc      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80071d6:	4b2c      	ldr	r3, [pc, #176]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d0f0      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071e2:	4b28      	ldr	r3, [pc, #160]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d035      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d02e      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007200:	4b20      	ldr	r3, [pc, #128]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007208:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800720a:	4b1e      	ldr	r3, [pc, #120]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800720c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720e:	4a1d      	ldr	r2, [pc, #116]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007214:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007216:	4b1b      	ldr	r3, [pc, #108]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800721a:	4a1a      	ldr	r2, [pc, #104]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800721c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007220:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007222:	4a18      	ldr	r2, [pc, #96]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007228:	4b16      	ldr	r3, [pc, #88]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800722a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b01      	cmp	r3, #1
 8007232:	d114      	bne.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007234:	f7fd f8a0 	bl	8004378 <HAL_GetTick>
 8007238:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800723a:	e00a      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800723c:	f7fd f89c 	bl	8004378 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800724a:	4293      	cmp	r3, r2
 800724c:	d901      	bls.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e27e      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007252:	4b0c      	ldr	r3, [pc, #48]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0ee      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007266:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800726a:	d111      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800726c:	4b05      	ldr	r3, [pc, #20]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8007278:	4b04      	ldr	r3, [pc, #16]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800727a:	400b      	ands	r3, r1
 800727c:	4901      	ldr	r1, [pc, #4]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800727e:	4313      	orrs	r3, r2
 8007280:	608b      	str	r3, [r1, #8]
 8007282:	e00b      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007284:	40023800 	.word	0x40023800
 8007288:	40007000 	.word	0x40007000
 800728c:	0ffffcff 	.word	0x0ffffcff
 8007290:	4ba4      	ldr	r3, [pc, #656]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	4aa3      	ldr	r2, [pc, #652]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007296:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800729a:	6093      	str	r3, [r2, #8]
 800729c:	4ba1      	ldr	r3, [pc, #644]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800729e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072a8:	499e      	ldr	r1, [pc, #632]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0310 	and.w	r3, r3, #16
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d010      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072ba:	4b9a      	ldr	r3, [pc, #616]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80072bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072c0:	4a98      	ldr	r2, [pc, #608]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80072c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80072ca:	4b96      	ldr	r3, [pc, #600]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80072cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d4:	4993      	ldr	r1, [pc, #588]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00a      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072e8:	4b8e      	ldr	r3, [pc, #568]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80072ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072f6:	498b      	ldr	r1, [pc, #556]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800730a:	4b86      	ldr	r3, [pc, #536]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800730c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007310:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007318:	4982      	ldr	r1, [pc, #520]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800731a:	4313      	orrs	r3, r2
 800731c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00a      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800732c:	4b7d      	ldr	r3, [pc, #500]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800732e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007332:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800733a:	497a      	ldr	r1, [pc, #488]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800733c:	4313      	orrs	r3, r2
 800733e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800734e:	4b75      	ldr	r3, [pc, #468]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007354:	f023 0203 	bic.w	r2, r3, #3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800735c:	4971      	ldr	r1, [pc, #452]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800735e:	4313      	orrs	r3, r2
 8007360:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007370:	4b6c      	ldr	r3, [pc, #432]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007376:	f023 020c 	bic.w	r2, r3, #12
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800737e:	4969      	ldr	r1, [pc, #420]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007380:	4313      	orrs	r3, r2
 8007382:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00a      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007392:	4b64      	ldr	r3, [pc, #400]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007398:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073a0:	4960      	ldr	r1, [pc, #384]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00a      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073b4:	4b5b      	ldr	r3, [pc, #364]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80073b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073c2:	4958      	ldr	r1, [pc, #352]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80073d6:	4b53      	ldr	r3, [pc, #332]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80073d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073e4:	494f      	ldr	r1, [pc, #316]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00a      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80073f8:	4b4a      	ldr	r3, [pc, #296]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80073fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007406:	4947      	ldr	r1, [pc, #284]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007408:	4313      	orrs	r3, r2
 800740a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800741a:	4b42      	ldr	r3, [pc, #264]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800741c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007420:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007428:	493e      	ldr	r1, [pc, #248]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800742a:	4313      	orrs	r3, r2
 800742c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800743c:	4b39      	ldr	r3, [pc, #228]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800743e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007442:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800744a:	4936      	ldr	r1, [pc, #216]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800744c:	4313      	orrs	r3, r2
 800744e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d011      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800745e:	4b31      	ldr	r3, [pc, #196]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007464:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800746c:	492d      	ldr	r1, [pc, #180]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800746e:	4313      	orrs	r3, r2
 8007470:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007478:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800747c:	d101      	bne.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800747e:	2301      	movs	r3, #1
 8007480:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800748e:	4b25      	ldr	r3, [pc, #148]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007494:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800749c:	4921      	ldr	r1, [pc, #132]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80074b0:	4b1c      	ldr	r3, [pc, #112]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074be:	4919      	ldr	r1, [pc, #100]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00a      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80074d2:	4b14      	ldr	r3, [pc, #80]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074e0:	4910      	ldr	r1, [pc, #64]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d006      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x434>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 809d 	beq.w	8007636 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80074fc:	4b09      	ldr	r3, [pc, #36]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a08      	ldr	r2, [pc, #32]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007502:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007508:	f7fc ff36 	bl	8004378 <HAL_GetTick>
 800750c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800750e:	e00b      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007510:	f7fc ff32 	bl	8004378 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b64      	cmp	r3, #100	@ 0x64
 800751c:	d904      	bls.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e116      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8007522:	bf00      	nop
 8007524:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007528:	4b8b      	ldr	r3, [pc, #556]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1ed      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d017      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007544:	2b00      	cmp	r3, #0
 8007546:	d113      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007548:	4b83      	ldr	r3, [pc, #524]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800754a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800754e:	0e1b      	lsrs	r3, r3, #24
 8007550:	f003 030f 	and.w	r3, r3, #15
 8007554:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	019a      	lsls	r2, r3, #6
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	061b      	lsls	r3, r3, #24
 8007560:	431a      	orrs	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	071b      	lsls	r3, r3, #28
 8007568:	497b      	ldr	r1, [pc, #492]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800756a:	4313      	orrs	r3, r2
 800756c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d004      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007580:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007584:	d00a      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800758e:	2b00      	cmp	r3, #0
 8007590:	d024      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007596:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800759a:	d11f      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800759c:	4b6e      	ldr	r3, [pc, #440]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800759e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075a2:	0f1b      	lsrs	r3, r3, #28
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	019a      	lsls	r2, r3, #6
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	061b      	lsls	r3, r3, #24
 80075b6:	431a      	orrs	r2, r3
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	071b      	lsls	r3, r3, #28
 80075bc:	4966      	ldr	r1, [pc, #408]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80075c4:	4b64      	ldr	r3, [pc, #400]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80075c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075ca:	f023 021f 	bic.w	r2, r3, #31
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	4960      	ldr	r1, [pc, #384]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00d      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	019a      	lsls	r2, r3, #6
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	061b      	lsls	r3, r3, #24
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	071b      	lsls	r3, r3, #28
 80075fc:	4956      	ldr	r1, [pc, #344]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007604:	4b54      	ldr	r3, [pc, #336]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a53      	ldr	r2, [pc, #332]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800760a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800760e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007610:	f7fc feb2 	bl	8004378 <HAL_GetTick>
 8007614:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007616:	e008      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007618:	f7fc feae 	bl	8004378 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b64      	cmp	r3, #100	@ 0x64
 8007624:	d901      	bls.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e092      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800762a:	4b4b      	ldr	r3, [pc, #300]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0f0      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b01      	cmp	r3, #1
 800763a:	f040 8088 	bne.w	800774e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800763e:	4b46      	ldr	r3, [pc, #280]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a45      	ldr	r2, [pc, #276]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007644:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007648:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800764a:	f7fc fe95 	bl	8004378 <HAL_GetTick>
 800764e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007650:	e008      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007652:	f7fc fe91 	bl	8004378 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b64      	cmp	r3, #100	@ 0x64
 800765e:	d901      	bls.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e075      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007664:	4b3c      	ldr	r3, [pc, #240]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800766c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007670:	d0ef      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007682:	2b00      	cmp	r3, #0
 8007684:	d009      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800768e:	2b00      	cmp	r3, #0
 8007690:	d024      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007696:	2b00      	cmp	r3, #0
 8007698:	d120      	bne.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800769a:	4b2f      	ldr	r3, [pc, #188]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800769c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a0:	0c1b      	lsrs	r3, r3, #16
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	019a      	lsls	r2, r3, #6
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	041b      	lsls	r3, r3, #16
 80076b2:	431a      	orrs	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	061b      	lsls	r3, r3, #24
 80076ba:	4927      	ldr	r1, [pc, #156]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80076c2:	4b25      	ldr	r3, [pc, #148]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80076c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076c8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	4920      	ldr	r1, [pc, #128]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d018      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x652>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076f0:	d113      	bne.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076f2:	4b19      	ldr	r3, [pc, #100]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80076f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f8:	0e1b      	lsrs	r3, r3, #24
 80076fa:	f003 030f 	and.w	r3, r3, #15
 80076fe:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	019a      	lsls	r2, r3, #6
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	041b      	lsls	r3, r3, #16
 800770c:	431a      	orrs	r2, r3
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	061b      	lsls	r3, r3, #24
 8007712:	4911      	ldr	r1, [pc, #68]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007714:	4313      	orrs	r3, r2
 8007716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800771a:	4b0f      	ldr	r3, [pc, #60]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a0e      	ldr	r2, [pc, #56]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007726:	f7fc fe27 	bl	8004378 <HAL_GetTick>
 800772a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800772c:	e008      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800772e:	f7fc fe23 	bl	8004378 <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	2b64      	cmp	r3, #100	@ 0x64
 800773a:	d901      	bls.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e007      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007740:	4b05      	ldr	r3, [pc, #20]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800774c:	d1ef      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3720      	adds	r7, #32
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	40023800 	.word	0x40023800

0800775c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e09d      	b.n	80078aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007772:	2b00      	cmp	r3, #0
 8007774:	d108      	bne.n	8007788 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800777e:	d009      	beq.n	8007794 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	61da      	str	r2, [r3, #28]
 8007786:	e005      	b.n	8007794 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d106      	bne.n	80077b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fc f98a 	bl	8003ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077d4:	d902      	bls.n	80077dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80077d6:	2300      	movs	r3, #0
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	e002      	b.n	80077e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80077dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80077ea:	d007      	beq.n	80077fc <HAL_SPI_Init+0xa0>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077f4:	d002      	beq.n	80077fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800780c:	431a      	orrs	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	431a      	orrs	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800782a:	431a      	orrs	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007834:	431a      	orrs	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800783e:	ea42 0103 	orr.w	r1, r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007846:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	0c1b      	lsrs	r3, r3, #16
 8007858:	f003 0204 	and.w	r2, r3, #4
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007860:	f003 0310 	and.w	r3, r3, #16
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800786a:	f003 0308 	and.w	r3, r3, #8
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007878:	ea42 0103 	orr.w	r1, r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	69da      	ldr	r2, [r3, #28]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007898:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b088      	sub	sp, #32
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	603b      	str	r3, [r7, #0]
 80078be:	4613      	mov	r3, r2
 80078c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d101      	bne.n	80078d4 <HAL_SPI_Transmit+0x22>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e15f      	b.n	8007b94 <HAL_SPI_Transmit+0x2e2>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078dc:	f7fc fd4c 	bl	8004378 <HAL_GetTick>
 80078e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d002      	beq.n	80078f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80078f2:	2302      	movs	r3, #2
 80078f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078f6:	e148      	b.n	8007b8a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <HAL_SPI_Transmit+0x52>
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d102      	bne.n	800790a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007908:	e13f      	b.n	8007b8a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2203      	movs	r2, #3
 800790e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	88fa      	ldrh	r2, [r7, #6]
 8007922:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	88fa      	ldrh	r2, [r7, #6]
 8007928:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007954:	d10f      	bne.n	8007976 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007964:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007974:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007980:	2b40      	cmp	r3, #64	@ 0x40
 8007982:	d007      	beq.n	8007994 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007992:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800799c:	d94f      	bls.n	8007a3e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <HAL_SPI_Transmit+0xfa>
 80079a6:	8afb      	ldrh	r3, [r7, #22]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d142      	bne.n	8007a32 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b0:	881a      	ldrh	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079bc:	1c9a      	adds	r2, r3, #2
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079d0:	e02f      	b.n	8007a32 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d112      	bne.n	8007a06 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e4:	881a      	ldrh	r2, [r3, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f0:	1c9a      	adds	r2, r3, #2
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	3b01      	subs	r3, #1
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a04:	e015      	b.n	8007a32 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a06:	f7fc fcb7 	bl	8004378 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d803      	bhi.n	8007a1e <HAL_SPI_Transmit+0x16c>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a1c:	d102      	bne.n	8007a24 <HAL_SPI_Transmit+0x172>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d106      	bne.n	8007a32 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007a30:	e0ab      	b.n	8007b8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1ca      	bne.n	80079d2 <HAL_SPI_Transmit+0x120>
 8007a3c:	e080      	b.n	8007b40 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <HAL_SPI_Transmit+0x19a>
 8007a46:	8afb      	ldrh	r3, [r7, #22]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d174      	bne.n	8007b36 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d912      	bls.n	8007a7c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5a:	881a      	ldrh	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a66:	1c9a      	adds	r2, r3, #2
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	3b02      	subs	r3, #2
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a7a:	e05c      	b.n	8007b36 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	330c      	adds	r3, #12
 8007a86:	7812      	ldrb	r2, [r2, #0]
 8007a88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007aa2:	e048      	b.n	8007b36 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d12b      	bne.n	8007b0a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d912      	bls.n	8007ae2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac0:	881a      	ldrh	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007acc:	1c9a      	adds	r2, r3, #2
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3b02      	subs	r3, #2
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ae0:	e029      	b.n	8007b36 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	330c      	adds	r3, #12
 8007aec:	7812      	ldrb	r2, [r2, #0]
 8007aee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	3b01      	subs	r3, #1
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b08:	e015      	b.n	8007b36 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b0a:	f7fc fc35 	bl	8004378 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d803      	bhi.n	8007b22 <HAL_SPI_Transmit+0x270>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b20:	d102      	bne.n	8007b28 <HAL_SPI_Transmit+0x276>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d106      	bne.n	8007b36 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007b34:	e029      	b.n	8007b8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1b1      	bne.n	8007aa4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 fe31 	bl	80087ac <SPI_EndRxTxTransaction>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2220      	movs	r2, #32
 8007b54:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10a      	bne.n	8007b74 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b5e:	2300      	movs	r3, #0
 8007b60:	613b      	str	r3, [r7, #16]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	613b      	str	r3, [r7, #16]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	613b      	str	r3, [r7, #16]
 8007b72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	77fb      	strb	r3, [r7, #31]
 8007b80:	e003      	b.n	8007b8a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007b92:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3720      	adds	r7, #32
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af02      	add	r7, sp, #8
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d002      	beq.n	8007bc2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007bc0:	e11a      	b.n	8007df8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bca:	d112      	bne.n	8007bf2 <HAL_SPI_Receive+0x56>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10e      	bne.n	8007bf2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2204      	movs	r2, #4
 8007bd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007bdc:	88fa      	ldrh	r2, [r7, #6]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	4613      	mov	r3, r2
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 f90e 	bl	8007e0a <HAL_SPI_TransmitReceive>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	e107      	b.n	8007e02 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d101      	bne.n	8007c00 <HAL_SPI_Receive+0x64>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e100      	b.n	8007e02 <HAL_SPI_Receive+0x266>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c08:	f7fc fbb6 	bl	8004378 <HAL_GetTick>
 8007c0c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <HAL_SPI_Receive+0x7e>
 8007c14:	88fb      	ldrh	r3, [r7, #6]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d102      	bne.n	8007c20 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c1e:	e0eb      	b.n	8007df8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2204      	movs	r2, #4
 8007c24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	88fa      	ldrh	r2, [r7, #6]
 8007c38:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	88fa      	ldrh	r2, [r7, #6]
 8007c40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c6a:	d908      	bls.n	8007c7e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007c7a:	605a      	str	r2, [r3, #4]
 8007c7c:	e007      	b.n	8007c8e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c8c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c96:	d10f      	bne.n	8007cb8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ca6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007cb6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc2:	2b40      	cmp	r3, #64	@ 0x40
 8007cc4:	d007      	beq.n	8007cd6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cd4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007cde:	d86f      	bhi.n	8007dc0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007ce0:	e034      	b.n	8007d4c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d117      	bne.n	8007d20 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f103 020c 	add.w	r2, r3, #12
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfc:	7812      	ldrb	r2, [r2, #0]
 8007cfe:	b2d2      	uxtb	r2, r2
 8007d00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	3b01      	subs	r3, #1
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007d1e:	e015      	b.n	8007d4c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d20:	f7fc fb2a 	bl	8004378 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d803      	bhi.n	8007d38 <HAL_SPI_Receive+0x19c>
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d36:	d102      	bne.n	8007d3e <HAL_SPI_Receive+0x1a2>
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d106      	bne.n	8007d4c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007d4a:	e055      	b.n	8007df8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1c4      	bne.n	8007ce2 <HAL_SPI_Receive+0x146>
 8007d58:	e038      	b.n	8007dcc <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d115      	bne.n	8007d94 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d72:	b292      	uxth	r2, r2
 8007d74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d7a:	1c9a      	adds	r2, r3, #2
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007d92:	e015      	b.n	8007dc0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d94:	f7fc faf0 	bl	8004378 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d803      	bhi.n	8007dac <HAL_SPI_Receive+0x210>
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007daa:	d102      	bne.n	8007db2 <HAL_SPI_Receive+0x216>
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d106      	bne.n	8007dc0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007dbe:	e01b      	b.n	8007df8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1c6      	bne.n	8007d5a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 fc6f 	bl	80086b4 <SPI_EndRxTransaction>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2220      	movs	r2, #32
 8007de0:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	75fb      	strb	r3, [r7, #23]
 8007dee:	e003      	b.n	8007df8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b08a      	sub	sp, #40	@ 0x28
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	607a      	str	r2, [r7, #4]
 8007e16:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d101      	bne.n	8007e30 <HAL_SPI_TransmitReceive+0x26>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	e20a      	b.n	8008246 <HAL_SPI_TransmitReceive+0x43c>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e38:	f7fc fa9e 	bl	8004378 <HAL_GetTick>
 8007e3c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e44:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007e4c:	887b      	ldrh	r3, [r7, #2]
 8007e4e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007e50:	887b      	ldrh	r3, [r7, #2]
 8007e52:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e54:	7efb      	ldrb	r3, [r7, #27]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d00e      	beq.n	8007e78 <HAL_SPI_TransmitReceive+0x6e>
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e60:	d106      	bne.n	8007e70 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d102      	bne.n	8007e70 <HAL_SPI_TransmitReceive+0x66>
 8007e6a:	7efb      	ldrb	r3, [r7, #27]
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d003      	beq.n	8007e78 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007e70:	2302      	movs	r3, #2
 8007e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007e76:	e1e0      	b.n	800823a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d005      	beq.n	8007e8a <HAL_SPI_TransmitReceive+0x80>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <HAL_SPI_TransmitReceive+0x80>
 8007e84:	887b      	ldrh	r3, [r7, #2]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d103      	bne.n	8007e92 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007e90:	e1d3      	b.n	800823a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d003      	beq.n	8007ea6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2205      	movs	r2, #5
 8007ea2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	887a      	ldrh	r2, [r7, #2]
 8007eb6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	887a      	ldrh	r2, [r7, #2]
 8007ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	887a      	ldrh	r2, [r7, #2]
 8007ecc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	887a      	ldrh	r2, [r7, #2]
 8007ed2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ee8:	d802      	bhi.n	8007ef0 <HAL_SPI_TransmitReceive+0xe6>
 8007eea:	8a3b      	ldrh	r3, [r7, #16]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d908      	bls.n	8007f02 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007efe:	605a      	str	r2, [r3, #4]
 8007f00:	e007      	b.n	8007f12 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f10:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f1c:	2b40      	cmp	r3, #64	@ 0x40
 8007f1e:	d007      	beq.n	8007f30 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f38:	f240 8081 	bls.w	800803e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <HAL_SPI_TransmitReceive+0x140>
 8007f44:	8a7b      	ldrh	r3, [r7, #18]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d16d      	bne.n	8008026 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4e:	881a      	ldrh	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f5a:	1c9a      	adds	r2, r3, #2
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	3b01      	subs	r3, #1
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f6e:	e05a      	b.n	8008026 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d11b      	bne.n	8007fb6 <HAL_SPI_TransmitReceive+0x1ac>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d016      	beq.n	8007fb6 <HAL_SPI_TransmitReceive+0x1ac>
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d113      	bne.n	8007fb6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f92:	881a      	ldrh	r2, [r3, #0]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f9e:	1c9a      	adds	r2, r3, #2
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	3b01      	subs	r3, #1
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d11c      	bne.n	8007ffe <HAL_SPI_TransmitReceive+0x1f4>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d016      	beq.n	8007ffe <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68da      	ldr	r2, [r3, #12]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fda:	b292      	uxth	r2, r2
 8007fdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe2:	1c9a      	adds	r2, r3, #2
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ffe:	f7fc f9bb 	bl	8004378 <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800800a:	429a      	cmp	r2, r3
 800800c:	d80b      	bhi.n	8008026 <HAL_SPI_TransmitReceive+0x21c>
 800800e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008010:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008014:	d007      	beq.n	8008026 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008024:	e109      	b.n	800823a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800802a:	b29b      	uxth	r3, r3
 800802c:	2b00      	cmp	r3, #0
 800802e:	d19f      	bne.n	8007f70 <HAL_SPI_TransmitReceive+0x166>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008036:	b29b      	uxth	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d199      	bne.n	8007f70 <HAL_SPI_TransmitReceive+0x166>
 800803c:	e0e3      	b.n	8008206 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_SPI_TransmitReceive+0x244>
 8008046:	8a7b      	ldrh	r3, [r7, #18]
 8008048:	2b01      	cmp	r3, #1
 800804a:	f040 80cf 	bne.w	80081ec <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b01      	cmp	r3, #1
 8008056:	d912      	bls.n	800807e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805c:	881a      	ldrh	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	1c9a      	adds	r2, r3, #2
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008072:	b29b      	uxth	r3, r3
 8008074:	3b02      	subs	r3, #2
 8008076:	b29a      	uxth	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800807c:	e0b6      	b.n	80081ec <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	330c      	adds	r3, #12
 8008088:	7812      	ldrb	r2, [r2, #0]
 800808a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800809a:	b29b      	uxth	r3, r3
 800809c:	3b01      	subs	r3, #1
 800809e:	b29a      	uxth	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080a4:	e0a2      	b.n	80081ec <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f003 0302 	and.w	r3, r3, #2
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d134      	bne.n	800811e <HAL_SPI_TransmitReceive+0x314>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d02f      	beq.n	800811e <HAL_SPI_TransmitReceive+0x314>
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d12c      	bne.n	800811e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d912      	bls.n	80080f4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d2:	881a      	ldrh	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080de:	1c9a      	adds	r2, r3, #2
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b02      	subs	r3, #2
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80080f2:	e012      	b.n	800811a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	330c      	adds	r3, #12
 80080fe:	7812      	ldrb	r2, [r2, #0]
 8008100:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008106:	1c5a      	adds	r2, r3, #1
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008110:	b29b      	uxth	r3, r3
 8008112:	3b01      	subs	r3, #1
 8008114:	b29a      	uxth	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800811a:	2300      	movs	r3, #0
 800811c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b01      	cmp	r3, #1
 800812a:	d148      	bne.n	80081be <HAL_SPI_TransmitReceive+0x3b4>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008132:	b29b      	uxth	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d042      	beq.n	80081be <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800813e:	b29b      	uxth	r3, r3
 8008140:	2b01      	cmp	r3, #1
 8008142:	d923      	bls.n	800818c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68da      	ldr	r2, [r3, #12]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800814e:	b292      	uxth	r2, r2
 8008150:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008156:	1c9a      	adds	r2, r3, #2
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008162:	b29b      	uxth	r3, r3
 8008164:	3b02      	subs	r3, #2
 8008166:	b29a      	uxth	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008174:	b29b      	uxth	r3, r3
 8008176:	2b01      	cmp	r3, #1
 8008178:	d81f      	bhi.n	80081ba <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008188:	605a      	str	r2, [r3, #4]
 800818a:	e016      	b.n	80081ba <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f103 020c 	add.w	r2, r3, #12
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008198:	7812      	ldrb	r2, [r2, #0]
 800819a:	b2d2      	uxtb	r2, r2
 800819c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	3b01      	subs	r3, #1
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80081ba:	2301      	movs	r3, #1
 80081bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80081be:	f7fc f8db 	bl	8004378 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d803      	bhi.n	80081d6 <HAL_SPI_TransmitReceive+0x3cc>
 80081ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081d4:	d102      	bne.n	80081dc <HAL_SPI_TransmitReceive+0x3d2>
 80081d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d107      	bne.n	80081ec <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80081ea:	e026      	b.n	800823a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f47f af57 	bne.w	80080a6 <HAL_SPI_TransmitReceive+0x29c>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081fe:	b29b      	uxth	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	f47f af50 	bne.w	80080a6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008206:	69fa      	ldr	r2, [r7, #28]
 8008208:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 face 	bl	80087ac <SPI_EndRxTxTransaction>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d005      	beq.n	8008222 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2220      	movs	r2, #32
 8008220:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008230:	e003      	b.n	800823a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008242:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8008246:	4618      	mov	r0, r3
 8008248:	3728      	adds	r7, #40	@ 0x28
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10e      	bne.n	8008290 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008278:	2b00      	cmp	r3, #0
 800827a:	d009      	beq.n	8008290 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008282:	2b00      	cmp	r3, #0
 8008284:	d004      	beq.n	8008290 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	4798      	blx	r3
    return;
 800828e:	e0ce      	b.n	800842e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d009      	beq.n	80082ae <HAL_SPI_IRQHandler+0x5e>
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d004      	beq.n	80082ae <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	4798      	blx	r3
    return;
 80082ac:	e0bf      	b.n	800842e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	f003 0320 	and.w	r3, r3, #32
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <HAL_SPI_IRQHandler+0x7e>
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d105      	bne.n	80082ce <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 80b0 	beq.w	800842e <HAL_SPI_IRQHandler+0x1de>
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	f003 0320 	and.w	r3, r3, #32
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 80aa 	beq.w	800842e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d023      	beq.n	800832c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d011      	beq.n	8008314 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082f4:	f043 0204 	orr.w	r2, r3, #4
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082fc:	2300      	movs	r3, #0
 80082fe:	617b      	str	r3, [r7, #20]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	617b      	str	r3, [r7, #20]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	617b      	str	r3, [r7, #20]
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	e00b      	b.n	800832c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008314:	2300      	movs	r3, #0
 8008316:	613b      	str	r3, [r7, #16]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	613b      	str	r3, [r7, #16]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	613b      	str	r3, [r7, #16]
 8008328:	693b      	ldr	r3, [r7, #16]
        return;
 800832a:	e080      	b.n	800842e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	f003 0320 	and.w	r3, r3, #32
 8008332:	2b00      	cmp	r3, #0
 8008334:	d014      	beq.n	8008360 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800833a:	f043 0201 	orr.w	r2, r3, #1
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008342:	2300      	movs	r3, #0
 8008344:	60fb      	str	r3, [r7, #12]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	60fb      	str	r3, [r7, #12]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00c      	beq.n	8008384 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800836e:	f043 0208 	orr.w	r2, r3, #8
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008376:	2300      	movs	r3, #0
 8008378:	60bb      	str	r3, [r7, #8]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	60bb      	str	r3, [r7, #8]
 8008382:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008388:	2b00      	cmp	r3, #0
 800838a:	d04f      	beq.n	800842c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800839a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	f003 0302 	and.w	r3, r3, #2
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d104      	bne.n	80083b8 <HAL_SPI_IRQHandler+0x168>
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d034      	beq.n	8008422 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 0203 	bic.w	r2, r2, #3
 80083c6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d011      	beq.n	80083f4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083d4:	4a17      	ldr	r2, [pc, #92]	@ (8008434 <HAL_SPI_IRQHandler+0x1e4>)
 80083d6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fc faa3 	bl	8004928 <HAL_DMA_Abort_IT>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d005      	beq.n	80083f4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d016      	beq.n	800842a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008400:	4a0c      	ldr	r2, [pc, #48]	@ (8008434 <HAL_SPI_IRQHandler+0x1e4>)
 8008402:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008408:	4618      	mov	r0, r3
 800840a:	f7fc fa8d 	bl	8004928 <HAL_DMA_Abort_IT>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00a      	beq.n	800842a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008418:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008420:	e003      	b.n	800842a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f808 	bl	8008438 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008428:	e000      	b.n	800842c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800842a:	bf00      	nop
    return;
 800842c:	bf00      	nop
  }
}
 800842e:	3720      	adds	r7, #32
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	0800844d 	.word	0x0800844d

08008438 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008458:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f7ff ffe5 	bl	8008438 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800846e:	bf00      	nop
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	4613      	mov	r3, r2
 8008486:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008488:	f7fb ff76 	bl	8004378 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008490:	1a9b      	subs	r3, r3, r2
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	4413      	add	r3, r2
 8008496:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008498:	f7fb ff6e 	bl	8004378 <HAL_GetTick>
 800849c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800849e:	4b39      	ldr	r3, [pc, #228]	@ (8008584 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	015b      	lsls	r3, r3, #5
 80084a4:	0d1b      	lsrs	r3, r3, #20
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	fb02 f303 	mul.w	r3, r2, r3
 80084ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084ae:	e054      	b.n	800855a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084b6:	d050      	beq.n	800855a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084b8:	f7fb ff5e 	bl	8004378 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	69fa      	ldr	r2, [r7, #28]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d902      	bls.n	80084ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d13d      	bne.n	800854a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80084dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084e6:	d111      	bne.n	800850c <SPI_WaitFlagStateUntilTimeout+0x94>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084f0:	d004      	beq.n	80084fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084fa:	d107      	bne.n	800850c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800850a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008514:	d10f      	bne.n	8008536 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008534:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e017      	b.n	800857a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	3b01      	subs	r3, #1
 8008558:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	4013      	ands	r3, r2
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	429a      	cmp	r2, r3
 8008568:	bf0c      	ite	eq
 800856a:	2301      	moveq	r3, #1
 800856c:	2300      	movne	r3, #0
 800856e:	b2db      	uxtb	r3, r3
 8008570:	461a      	mov	r2, r3
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	429a      	cmp	r2, r3
 8008576:	d19b      	bne.n	80084b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3720      	adds	r7, #32
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20000064 	.word	0x20000064

08008588 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b08a      	sub	sp, #40	@ 0x28
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008596:	2300      	movs	r3, #0
 8008598:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800859a:	f7fb feed 	bl	8004378 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a2:	1a9b      	subs	r3, r3, r2
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	4413      	add	r3, r2
 80085a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80085aa:	f7fb fee5 	bl	8004378 <HAL_GetTick>
 80085ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	330c      	adds	r3, #12
 80085b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80085b8:	4b3d      	ldr	r3, [pc, #244]	@ (80086b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	00da      	lsls	r2, r3, #3
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	0d1b      	lsrs	r3, r3, #20
 80085c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085ca:	fb02 f303 	mul.w	r3, r2, r3
 80085ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80085d0:	e060      	b.n	8008694 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80085d8:	d107      	bne.n	80085ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d104      	bne.n	80085ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085f0:	d050      	beq.n	8008694 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085f2:	f7fb fec1 	bl	8004378 <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085fe:	429a      	cmp	r2, r3
 8008600:	d902      	bls.n	8008608 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008604:	2b00      	cmp	r3, #0
 8008606:	d13d      	bne.n	8008684 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008616:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008620:	d111      	bne.n	8008646 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800862a:	d004      	beq.n	8008636 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008634:	d107      	bne.n	8008646 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008644:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800864a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800864e:	d10f      	bne.n	8008670 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800866e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e010      	b.n	80086a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800868a:	2300      	movs	r3, #0
 800868c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	3b01      	subs	r3, #1
 8008692:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	4013      	ands	r3, r2
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d196      	bne.n	80085d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3728      	adds	r7, #40	@ 0x28
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20000064 	.word	0x20000064

080086b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b088      	sub	sp, #32
 80086b8:	af02      	add	r7, sp, #8
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086c8:	d111      	bne.n	80086ee <SPI_EndRxTransaction+0x3a>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086d2:	d004      	beq.n	80086de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086dc:	d107      	bne.n	80086ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086f6:	d112      	bne.n	800871e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2200      	movs	r2, #0
 8008700:	2180      	movs	r1, #128	@ 0x80
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f7ff feb8 	bl	8008478 <SPI_WaitFlagStateUntilTimeout>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d021      	beq.n	8008752 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008712:	f043 0220 	orr.w	r2, r3, #32
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e03d      	b.n	800879a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800871e:	4b21      	ldr	r3, [pc, #132]	@ (80087a4 <SPI_EndRxTransaction+0xf0>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a21      	ldr	r2, [pc, #132]	@ (80087a8 <SPI_EndRxTransaction+0xf4>)
 8008724:	fba2 2303 	umull	r2, r3, r2, r3
 8008728:	0d5b      	lsrs	r3, r3, #21
 800872a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800872e:	fb02 f303 	mul.w	r3, r2, r3
 8008732:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00a      	beq.n	8008750 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	3b01      	subs	r3, #1
 800873e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800874a:	2b80      	cmp	r3, #128	@ 0x80
 800874c:	d0f2      	beq.n	8008734 <SPI_EndRxTransaction+0x80>
 800874e:	e000      	b.n	8008752 <SPI_EndRxTransaction+0x9e>
        break;
 8008750:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800875a:	d11d      	bne.n	8008798 <SPI_EndRxTransaction+0xe4>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008764:	d004      	beq.n	8008770 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800876e:	d113      	bne.n	8008798 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2200      	movs	r2, #0
 8008778:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f7ff ff03 	bl	8008588 <SPI_WaitFifoStateUntilTimeout>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d007      	beq.n	8008798 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800878c:	f043 0220 	orr.w	r2, r3, #32
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e000      	b.n	800879a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	20000064 	.word	0x20000064
 80087a8:	165e9f81 	.word	0x165e9f81

080087ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af02      	add	r7, sp, #8
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2200      	movs	r2, #0
 80087c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f7ff fedf 	bl	8008588 <SPI_WaitFifoStateUntilTimeout>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d007      	beq.n	80087e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087d4:	f043 0220 	orr.w	r2, r3, #32
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e046      	b.n	800886e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80087e0:	4b25      	ldr	r3, [pc, #148]	@ (8008878 <SPI_EndRxTxTransaction+0xcc>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a25      	ldr	r2, [pc, #148]	@ (800887c <SPI_EndRxTxTransaction+0xd0>)
 80087e6:	fba2 2303 	umull	r2, r3, r2, r3
 80087ea:	0d5b      	lsrs	r3, r3, #21
 80087ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80087f0:	fb02 f303 	mul.w	r3, r2, r3
 80087f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087fe:	d112      	bne.n	8008826 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2200      	movs	r2, #0
 8008808:	2180      	movs	r1, #128	@ 0x80
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f7ff fe34 	bl	8008478 <SPI_WaitFlagStateUntilTimeout>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d016      	beq.n	8008844 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800881a:	f043 0220 	orr.w	r2, r3, #32
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e023      	b.n	800886e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00a      	beq.n	8008842 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	3b01      	subs	r3, #1
 8008830:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800883c:	2b80      	cmp	r3, #128	@ 0x80
 800883e:	d0f2      	beq.n	8008826 <SPI_EndRxTxTransaction+0x7a>
 8008840:	e000      	b.n	8008844 <SPI_EndRxTxTransaction+0x98>
        break;
 8008842:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2200      	movs	r2, #0
 800884c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f7ff fe99 	bl	8008588 <SPI_WaitFifoStateUntilTimeout>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d007      	beq.n	800886c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008860:	f043 0220 	orr.w	r2, r3, #32
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e000      	b.n	800886e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	20000064 	.word	0x20000064
 800887c:	165e9f81 	.word	0x165e9f81

08008880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e049      	b.n	8008926 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d106      	bne.n	80088ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7fb f95a 	bl	8003b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2202      	movs	r2, #2
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3304      	adds	r3, #4
 80088bc:	4619      	mov	r1, r3
 80088be:	4610      	mov	r0, r2
 80088c0:	f000 fca8 	bl	8009214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b082      	sub	sp, #8
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d101      	bne.n	8008940 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e049      	b.n	80089d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d106      	bne.n	800895a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f841 	bl	80089dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2202      	movs	r2, #2
 800895e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	3304      	adds	r3, #4
 800896a:	4619      	mov	r1, r3
 800896c:	4610      	mov	r0, r2
 800896e:	f000 fc51 	bl	8009214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d109      	bne.n	8008a14 <HAL_TIM_PWM_Start+0x24>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	bf14      	ite	ne
 8008a0c:	2301      	movne	r3, #1
 8008a0e:	2300      	moveq	r3, #0
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	e03c      	b.n	8008a8e <HAL_TIM_PWM_Start+0x9e>
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	d109      	bne.n	8008a2e <HAL_TIM_PWM_Start+0x3e>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	bf14      	ite	ne
 8008a26:	2301      	movne	r3, #1
 8008a28:	2300      	moveq	r3, #0
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	e02f      	b.n	8008a8e <HAL_TIM_PWM_Start+0x9e>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	2b08      	cmp	r3, #8
 8008a32:	d109      	bne.n	8008a48 <HAL_TIM_PWM_Start+0x58>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	bf14      	ite	ne
 8008a40:	2301      	movne	r3, #1
 8008a42:	2300      	moveq	r3, #0
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	e022      	b.n	8008a8e <HAL_TIM_PWM_Start+0x9e>
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	2b0c      	cmp	r3, #12
 8008a4c:	d109      	bne.n	8008a62 <HAL_TIM_PWM_Start+0x72>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	bf14      	ite	ne
 8008a5a:	2301      	movne	r3, #1
 8008a5c:	2300      	moveq	r3, #0
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	e015      	b.n	8008a8e <HAL_TIM_PWM_Start+0x9e>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b10      	cmp	r3, #16
 8008a66:	d109      	bne.n	8008a7c <HAL_TIM_PWM_Start+0x8c>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	bf14      	ite	ne
 8008a74:	2301      	movne	r3, #1
 8008a76:	2300      	moveq	r3, #0
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	e008      	b.n	8008a8e <HAL_TIM_PWM_Start+0x9e>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	bf14      	ite	ne
 8008a88:	2301      	movne	r3, #1
 8008a8a:	2300      	moveq	r3, #0
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e092      	b.n	8008bbc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d104      	bne.n	8008aa6 <HAL_TIM_PWM_Start+0xb6>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008aa4:	e023      	b.n	8008aee <HAL_TIM_PWM_Start+0xfe>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d104      	bne.n	8008ab6 <HAL_TIM_PWM_Start+0xc6>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ab4:	e01b      	b.n	8008aee <HAL_TIM_PWM_Start+0xfe>
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d104      	bne.n	8008ac6 <HAL_TIM_PWM_Start+0xd6>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ac4:	e013      	b.n	8008aee <HAL_TIM_PWM_Start+0xfe>
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2b0c      	cmp	r3, #12
 8008aca:	d104      	bne.n	8008ad6 <HAL_TIM_PWM_Start+0xe6>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2202      	movs	r2, #2
 8008ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ad4:	e00b      	b.n	8008aee <HAL_TIM_PWM_Start+0xfe>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	2b10      	cmp	r3, #16
 8008ada:	d104      	bne.n	8008ae6 <HAL_TIM_PWM_Start+0xf6>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ae4:	e003      	b.n	8008aee <HAL_TIM_PWM_Start+0xfe>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2202      	movs	r2, #2
 8008aea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2201      	movs	r2, #1
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 ff30 	bl	800995c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a30      	ldr	r2, [pc, #192]	@ (8008bc4 <HAL_TIM_PWM_Start+0x1d4>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d004      	beq.n	8008b10 <HAL_TIM_PWM_Start+0x120>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a2f      	ldr	r2, [pc, #188]	@ (8008bc8 <HAL_TIM_PWM_Start+0x1d8>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d101      	bne.n	8008b14 <HAL_TIM_PWM_Start+0x124>
 8008b10:	2301      	movs	r3, #1
 8008b12:	e000      	b.n	8008b16 <HAL_TIM_PWM_Start+0x126>
 8008b14:	2300      	movs	r3, #0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d007      	beq.n	8008b2a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a25      	ldr	r2, [pc, #148]	@ (8008bc4 <HAL_TIM_PWM_Start+0x1d4>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d022      	beq.n	8008b7a <HAL_TIM_PWM_Start+0x18a>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b3c:	d01d      	beq.n	8008b7a <HAL_TIM_PWM_Start+0x18a>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a22      	ldr	r2, [pc, #136]	@ (8008bcc <HAL_TIM_PWM_Start+0x1dc>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d018      	beq.n	8008b7a <HAL_TIM_PWM_Start+0x18a>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a20      	ldr	r2, [pc, #128]	@ (8008bd0 <HAL_TIM_PWM_Start+0x1e0>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d013      	beq.n	8008b7a <HAL_TIM_PWM_Start+0x18a>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a1f      	ldr	r2, [pc, #124]	@ (8008bd4 <HAL_TIM_PWM_Start+0x1e4>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d00e      	beq.n	8008b7a <HAL_TIM_PWM_Start+0x18a>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a19      	ldr	r2, [pc, #100]	@ (8008bc8 <HAL_TIM_PWM_Start+0x1d8>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d009      	beq.n	8008b7a <HAL_TIM_PWM_Start+0x18a>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8008bd8 <HAL_TIM_PWM_Start+0x1e8>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d004      	beq.n	8008b7a <HAL_TIM_PWM_Start+0x18a>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a19      	ldr	r2, [pc, #100]	@ (8008bdc <HAL_TIM_PWM_Start+0x1ec>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d115      	bne.n	8008ba6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	4b17      	ldr	r3, [pc, #92]	@ (8008be0 <HAL_TIM_PWM_Start+0x1f0>)
 8008b82:	4013      	ands	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2b06      	cmp	r3, #6
 8008b8a:	d015      	beq.n	8008bb8 <HAL_TIM_PWM_Start+0x1c8>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b92:	d011      	beq.n	8008bb8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f042 0201 	orr.w	r2, r2, #1
 8008ba2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ba4:	e008      	b.n	8008bb8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f042 0201 	orr.w	r2, r2, #1
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	e000      	b.n	8008bba <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	40010000 	.word	0x40010000
 8008bc8:	40010400 	.word	0x40010400
 8008bcc:	40000400 	.word	0x40000400
 8008bd0:	40000800 	.word	0x40000800
 8008bd4:	40000c00 	.word	0x40000c00
 8008bd8:	40014000 	.word	0x40014000
 8008bdc:	40001800 	.word	0x40001800
 8008be0:	00010007 	.word	0x00010007

08008be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	f003 0302 	and.w	r3, r3, #2
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d020      	beq.n	8008c48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01b      	beq.n	8008c48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f06f 0202 	mvn.w	r2, #2
 8008c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	f003 0303 	and.w	r3, r3, #3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fad2 	bl	80091d8 <HAL_TIM_IC_CaptureCallback>
 8008c34:	e005      	b.n	8008c42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fac4 	bl	80091c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fad5 	bl	80091ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f003 0304 	and.w	r3, r3, #4
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d020      	beq.n	8008c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d01b      	beq.n	8008c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f06f 0204 	mvn.w	r2, #4
 8008c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2202      	movs	r2, #2
 8008c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 faac 	bl	80091d8 <HAL_TIM_IC_CaptureCallback>
 8008c80:	e005      	b.n	8008c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fa9e 	bl	80091c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 faaf 	bl	80091ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	f003 0308 	and.w	r3, r3, #8
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d020      	beq.n	8008ce0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f003 0308 	and.w	r3, r3, #8
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d01b      	beq.n	8008ce0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f06f 0208 	mvn.w	r2, #8
 8008cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2204      	movs	r2, #4
 8008cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	f003 0303 	and.w	r3, r3, #3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d003      	beq.n	8008cce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fa86 	bl	80091d8 <HAL_TIM_IC_CaptureCallback>
 8008ccc:	e005      	b.n	8008cda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fa78 	bl	80091c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fa89 	bl	80091ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	f003 0310 	and.w	r3, r3, #16
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d020      	beq.n	8008d2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f003 0310 	and.w	r3, r3, #16
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d01b      	beq.n	8008d2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f06f 0210 	mvn.w	r2, #16
 8008cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2208      	movs	r2, #8
 8008d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	69db      	ldr	r3, [r3, #28]
 8008d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa60 	bl	80091d8 <HAL_TIM_IC_CaptureCallback>
 8008d18:	e005      	b.n	8008d26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fa52 	bl	80091c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fa63 	bl	80091ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00c      	beq.n	8008d50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d007      	beq.n	8008d50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f06f 0201 	mvn.w	r2, #1
 8008d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fa30 	bl	80091b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d104      	bne.n	8008d64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00c      	beq.n	8008d7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d007      	beq.n	8008d7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fead 	bl	8009ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00c      	beq.n	8008da2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d007      	beq.n	8008da2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fea5 	bl	8009aec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00c      	beq.n	8008dc6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d007      	beq.n	8008dc6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fa1d 	bl	8009200 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	f003 0320 	and.w	r3, r3, #32
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00c      	beq.n	8008dea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f003 0320 	and.w	r3, r3, #32
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d007      	beq.n	8008dea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f06f 0220 	mvn.w	r2, #32
 8008de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fe6d 	bl	8009ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dea:	bf00      	nop
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
	...

08008df4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d101      	bne.n	8008e12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e0e:	2302      	movs	r3, #2
 8008e10:	e0ff      	b.n	8009012 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b14      	cmp	r3, #20
 8008e1e:	f200 80f0 	bhi.w	8009002 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008e22:	a201      	add	r2, pc, #4	@ (adr r2, 8008e28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e28:	08008e7d 	.word	0x08008e7d
 8008e2c:	08009003 	.word	0x08009003
 8008e30:	08009003 	.word	0x08009003
 8008e34:	08009003 	.word	0x08009003
 8008e38:	08008ebd 	.word	0x08008ebd
 8008e3c:	08009003 	.word	0x08009003
 8008e40:	08009003 	.word	0x08009003
 8008e44:	08009003 	.word	0x08009003
 8008e48:	08008eff 	.word	0x08008eff
 8008e4c:	08009003 	.word	0x08009003
 8008e50:	08009003 	.word	0x08009003
 8008e54:	08009003 	.word	0x08009003
 8008e58:	08008f3f 	.word	0x08008f3f
 8008e5c:	08009003 	.word	0x08009003
 8008e60:	08009003 	.word	0x08009003
 8008e64:	08009003 	.word	0x08009003
 8008e68:	08008f81 	.word	0x08008f81
 8008e6c:	08009003 	.word	0x08009003
 8008e70:	08009003 	.word	0x08009003
 8008e74:	08009003 	.word	0x08009003
 8008e78:	08008fc1 	.word	0x08008fc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68b9      	ldr	r1, [r7, #8]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 fa72 	bl	800936c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	699a      	ldr	r2, [r3, #24]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f042 0208 	orr.w	r2, r2, #8
 8008e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	699a      	ldr	r2, [r3, #24]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f022 0204 	bic.w	r2, r2, #4
 8008ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6999      	ldr	r1, [r3, #24]
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	691a      	ldr	r2, [r3, #16]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	619a      	str	r2, [r3, #24]
      break;
 8008eba:	e0a5      	b.n	8009008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68b9      	ldr	r1, [r7, #8]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fac4 	bl	8009450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	699a      	ldr	r2, [r3, #24]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	699a      	ldr	r2, [r3, #24]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6999      	ldr	r1, [r3, #24]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	021a      	lsls	r2, r3, #8
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	430a      	orrs	r2, r1
 8008efa:	619a      	str	r2, [r3, #24]
      break;
 8008efc:	e084      	b.n	8009008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68b9      	ldr	r1, [r7, #8]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fb1b 	bl	8009540 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	69da      	ldr	r2, [r3, #28]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f042 0208 	orr.w	r2, r2, #8
 8008f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	69da      	ldr	r2, [r3, #28]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f022 0204 	bic.w	r2, r2, #4
 8008f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	69d9      	ldr	r1, [r3, #28]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	691a      	ldr	r2, [r3, #16]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	61da      	str	r2, [r3, #28]
      break;
 8008f3c:	e064      	b.n	8009008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68b9      	ldr	r1, [r7, #8]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fb71 	bl	800962c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	69da      	ldr	r2, [r3, #28]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	69da      	ldr	r2, [r3, #28]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	69d9      	ldr	r1, [r3, #28]
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	021a      	lsls	r2, r3, #8
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	61da      	str	r2, [r3, #28]
      break;
 8008f7e:	e043      	b.n	8009008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68b9      	ldr	r1, [r7, #8]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fba8 	bl	80096dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f042 0208 	orr.w	r2, r2, #8
 8008f9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f022 0204 	bic.w	r2, r2, #4
 8008faa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	691a      	ldr	r2, [r3, #16]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008fbe:	e023      	b.n	8009008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68b9      	ldr	r1, [r7, #8]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fbda 	bl	8009780 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	021a      	lsls	r2, r3, #8
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009000:	e002      	b.n	8009008 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	75fb      	strb	r3, [r7, #23]
      break;
 8009006:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009010:	7dfb      	ldrb	r3, [r7, #23]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop

0800901c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009030:	2b01      	cmp	r3, #1
 8009032:	d101      	bne.n	8009038 <HAL_TIM_ConfigClockSource+0x1c>
 8009034:	2302      	movs	r3, #2
 8009036:	e0b4      	b.n	80091a2 <HAL_TIM_ConfigClockSource+0x186>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2202      	movs	r2, #2
 8009044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	4b56      	ldr	r3, [pc, #344]	@ (80091ac <HAL_TIM_ConfigClockSource+0x190>)
 8009054:	4013      	ands	r3, r2
 8009056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800905e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009070:	d03e      	beq.n	80090f0 <HAL_TIM_ConfigClockSource+0xd4>
 8009072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009076:	f200 8087 	bhi.w	8009188 <HAL_TIM_ConfigClockSource+0x16c>
 800907a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800907e:	f000 8086 	beq.w	800918e <HAL_TIM_ConfigClockSource+0x172>
 8009082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009086:	d87f      	bhi.n	8009188 <HAL_TIM_ConfigClockSource+0x16c>
 8009088:	2b70      	cmp	r3, #112	@ 0x70
 800908a:	d01a      	beq.n	80090c2 <HAL_TIM_ConfigClockSource+0xa6>
 800908c:	2b70      	cmp	r3, #112	@ 0x70
 800908e:	d87b      	bhi.n	8009188 <HAL_TIM_ConfigClockSource+0x16c>
 8009090:	2b60      	cmp	r3, #96	@ 0x60
 8009092:	d050      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x11a>
 8009094:	2b60      	cmp	r3, #96	@ 0x60
 8009096:	d877      	bhi.n	8009188 <HAL_TIM_ConfigClockSource+0x16c>
 8009098:	2b50      	cmp	r3, #80	@ 0x50
 800909a:	d03c      	beq.n	8009116 <HAL_TIM_ConfigClockSource+0xfa>
 800909c:	2b50      	cmp	r3, #80	@ 0x50
 800909e:	d873      	bhi.n	8009188 <HAL_TIM_ConfigClockSource+0x16c>
 80090a0:	2b40      	cmp	r3, #64	@ 0x40
 80090a2:	d058      	beq.n	8009156 <HAL_TIM_ConfigClockSource+0x13a>
 80090a4:	2b40      	cmp	r3, #64	@ 0x40
 80090a6:	d86f      	bhi.n	8009188 <HAL_TIM_ConfigClockSource+0x16c>
 80090a8:	2b30      	cmp	r3, #48	@ 0x30
 80090aa:	d064      	beq.n	8009176 <HAL_TIM_ConfigClockSource+0x15a>
 80090ac:	2b30      	cmp	r3, #48	@ 0x30
 80090ae:	d86b      	bhi.n	8009188 <HAL_TIM_ConfigClockSource+0x16c>
 80090b0:	2b20      	cmp	r3, #32
 80090b2:	d060      	beq.n	8009176 <HAL_TIM_ConfigClockSource+0x15a>
 80090b4:	2b20      	cmp	r3, #32
 80090b6:	d867      	bhi.n	8009188 <HAL_TIM_ConfigClockSource+0x16c>
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d05c      	beq.n	8009176 <HAL_TIM_ConfigClockSource+0x15a>
 80090bc:	2b10      	cmp	r3, #16
 80090be:	d05a      	beq.n	8009176 <HAL_TIM_ConfigClockSource+0x15a>
 80090c0:	e062      	b.n	8009188 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090d2:	f000 fc23 	bl	800991c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80090e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	609a      	str	r2, [r3, #8]
      break;
 80090ee:	e04f      	b.n	8009190 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009100:	f000 fc0c 	bl	800991c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	689a      	ldr	r2, [r3, #8]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009112:	609a      	str	r2, [r3, #8]
      break;
 8009114:	e03c      	b.n	8009190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009122:	461a      	mov	r2, r3
 8009124:	f000 fb80 	bl	8009828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2150      	movs	r1, #80	@ 0x50
 800912e:	4618      	mov	r0, r3
 8009130:	f000 fbd9 	bl	80098e6 <TIM_ITRx_SetConfig>
      break;
 8009134:	e02c      	b.n	8009190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009142:	461a      	mov	r2, r3
 8009144:	f000 fb9f 	bl	8009886 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2160      	movs	r1, #96	@ 0x60
 800914e:	4618      	mov	r0, r3
 8009150:	f000 fbc9 	bl	80098e6 <TIM_ITRx_SetConfig>
      break;
 8009154:	e01c      	b.n	8009190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009162:	461a      	mov	r2, r3
 8009164:	f000 fb60 	bl	8009828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2140      	movs	r1, #64	@ 0x40
 800916e:	4618      	mov	r0, r3
 8009170:	f000 fbb9 	bl	80098e6 <TIM_ITRx_SetConfig>
      break;
 8009174:	e00c      	b.n	8009190 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4619      	mov	r1, r3
 8009180:	4610      	mov	r0, r2
 8009182:	f000 fbb0 	bl	80098e6 <TIM_ITRx_SetConfig>
      break;
 8009186:	e003      	b.n	8009190 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	73fb      	strb	r3, [r7, #15]
      break;
 800918c:	e000      	b.n	8009190 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800918e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	fffeff88 	.word	0xfffeff88

080091b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a46      	ldr	r2, [pc, #280]	@ (8009340 <TIM_Base_SetConfig+0x12c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d013      	beq.n	8009254 <TIM_Base_SetConfig+0x40>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009232:	d00f      	beq.n	8009254 <TIM_Base_SetConfig+0x40>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a43      	ldr	r2, [pc, #268]	@ (8009344 <TIM_Base_SetConfig+0x130>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d00b      	beq.n	8009254 <TIM_Base_SetConfig+0x40>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a42      	ldr	r2, [pc, #264]	@ (8009348 <TIM_Base_SetConfig+0x134>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d007      	beq.n	8009254 <TIM_Base_SetConfig+0x40>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a41      	ldr	r2, [pc, #260]	@ (800934c <TIM_Base_SetConfig+0x138>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d003      	beq.n	8009254 <TIM_Base_SetConfig+0x40>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a40      	ldr	r2, [pc, #256]	@ (8009350 <TIM_Base_SetConfig+0x13c>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d108      	bne.n	8009266 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800925a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	4313      	orrs	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a35      	ldr	r2, [pc, #212]	@ (8009340 <TIM_Base_SetConfig+0x12c>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d02b      	beq.n	80092c6 <TIM_Base_SetConfig+0xb2>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009274:	d027      	beq.n	80092c6 <TIM_Base_SetConfig+0xb2>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a32      	ldr	r2, [pc, #200]	@ (8009344 <TIM_Base_SetConfig+0x130>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d023      	beq.n	80092c6 <TIM_Base_SetConfig+0xb2>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a31      	ldr	r2, [pc, #196]	@ (8009348 <TIM_Base_SetConfig+0x134>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d01f      	beq.n	80092c6 <TIM_Base_SetConfig+0xb2>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a30      	ldr	r2, [pc, #192]	@ (800934c <TIM_Base_SetConfig+0x138>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d01b      	beq.n	80092c6 <TIM_Base_SetConfig+0xb2>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a2f      	ldr	r2, [pc, #188]	@ (8009350 <TIM_Base_SetConfig+0x13c>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d017      	beq.n	80092c6 <TIM_Base_SetConfig+0xb2>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a2e      	ldr	r2, [pc, #184]	@ (8009354 <TIM_Base_SetConfig+0x140>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d013      	beq.n	80092c6 <TIM_Base_SetConfig+0xb2>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a2d      	ldr	r2, [pc, #180]	@ (8009358 <TIM_Base_SetConfig+0x144>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d00f      	beq.n	80092c6 <TIM_Base_SetConfig+0xb2>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a2c      	ldr	r2, [pc, #176]	@ (800935c <TIM_Base_SetConfig+0x148>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d00b      	beq.n	80092c6 <TIM_Base_SetConfig+0xb2>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a2b      	ldr	r2, [pc, #172]	@ (8009360 <TIM_Base_SetConfig+0x14c>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d007      	beq.n	80092c6 <TIM_Base_SetConfig+0xb2>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a2a      	ldr	r2, [pc, #168]	@ (8009364 <TIM_Base_SetConfig+0x150>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d003      	beq.n	80092c6 <TIM_Base_SetConfig+0xb2>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a29      	ldr	r2, [pc, #164]	@ (8009368 <TIM_Base_SetConfig+0x154>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d108      	bne.n	80092d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	695b      	ldr	r3, [r3, #20]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	689a      	ldr	r2, [r3, #8]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a10      	ldr	r2, [pc, #64]	@ (8009340 <TIM_Base_SetConfig+0x12c>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d003      	beq.n	800930c <TIM_Base_SetConfig+0xf8>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a12      	ldr	r2, [pc, #72]	@ (8009350 <TIM_Base_SetConfig+0x13c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d103      	bne.n	8009314 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	691a      	ldr	r2, [r3, #16]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b01      	cmp	r3, #1
 8009324:	d105      	bne.n	8009332 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	f023 0201 	bic.w	r2, r3, #1
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	611a      	str	r2, [r3, #16]
  }
}
 8009332:	bf00      	nop
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	40010000 	.word	0x40010000
 8009344:	40000400 	.word	0x40000400
 8009348:	40000800 	.word	0x40000800
 800934c:	40000c00 	.word	0x40000c00
 8009350:	40010400 	.word	0x40010400
 8009354:	40014000 	.word	0x40014000
 8009358:	40014400 	.word	0x40014400
 800935c:	40014800 	.word	0x40014800
 8009360:	40001800 	.word	0x40001800
 8009364:	40001c00 	.word	0x40001c00
 8009368:	40002000 	.word	0x40002000

0800936c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800936c:	b480      	push	{r7}
 800936e:	b087      	sub	sp, #28
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a1b      	ldr	r3, [r3, #32]
 8009380:	f023 0201 	bic.w	r2, r3, #1
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	699b      	ldr	r3, [r3, #24]
 8009392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	4b2b      	ldr	r3, [pc, #172]	@ (8009444 <TIM_OC1_SetConfig+0xd8>)
 8009398:	4013      	ands	r3, r2
 800939a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f023 0303 	bic.w	r3, r3, #3
 80093a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f023 0302 	bic.w	r3, r3, #2
 80093b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	4313      	orrs	r3, r2
 80093be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a21      	ldr	r2, [pc, #132]	@ (8009448 <TIM_OC1_SetConfig+0xdc>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d003      	beq.n	80093d0 <TIM_OC1_SetConfig+0x64>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a20      	ldr	r2, [pc, #128]	@ (800944c <TIM_OC1_SetConfig+0xe0>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d10c      	bne.n	80093ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	f023 0308 	bic.w	r3, r3, #8
 80093d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	4313      	orrs	r3, r2
 80093e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f023 0304 	bic.w	r3, r3, #4
 80093e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a16      	ldr	r2, [pc, #88]	@ (8009448 <TIM_OC1_SetConfig+0xdc>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d003      	beq.n	80093fa <TIM_OC1_SetConfig+0x8e>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a15      	ldr	r2, [pc, #84]	@ (800944c <TIM_OC1_SetConfig+0xe0>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d111      	bne.n	800941e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	693a      	ldr	r2, [r7, #16]
 8009410:	4313      	orrs	r3, r2
 8009412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	693a      	ldr	r2, [r7, #16]
 800941a:	4313      	orrs	r3, r2
 800941c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	685a      	ldr	r2, [r3, #4]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	621a      	str	r2, [r3, #32]
}
 8009438:	bf00      	nop
 800943a:	371c      	adds	r7, #28
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	fffeff8f 	.word	0xfffeff8f
 8009448:	40010000 	.word	0x40010000
 800944c:	40010400 	.word	0x40010400

08009450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009450:	b480      	push	{r7}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a1b      	ldr	r3, [r3, #32]
 8009464:	f023 0210 	bic.w	r2, r3, #16
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4b2e      	ldr	r3, [pc, #184]	@ (8009534 <TIM_OC2_SetConfig+0xe4>)
 800947c:	4013      	ands	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	021b      	lsls	r3, r3, #8
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	4313      	orrs	r3, r2
 8009492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f023 0320 	bic.w	r3, r3, #32
 800949a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	011b      	lsls	r3, r3, #4
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a23      	ldr	r2, [pc, #140]	@ (8009538 <TIM_OC2_SetConfig+0xe8>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d003      	beq.n	80094b8 <TIM_OC2_SetConfig+0x68>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a22      	ldr	r2, [pc, #136]	@ (800953c <TIM_OC2_SetConfig+0xec>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d10d      	bne.n	80094d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	011b      	lsls	r3, r3, #4
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a18      	ldr	r2, [pc, #96]	@ (8009538 <TIM_OC2_SetConfig+0xe8>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d003      	beq.n	80094e4 <TIM_OC2_SetConfig+0x94>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a17      	ldr	r2, [pc, #92]	@ (800953c <TIM_OC2_SetConfig+0xec>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d113      	bne.n	800950c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80094ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80094f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	695b      	ldr	r3, [r3, #20]
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	4313      	orrs	r3, r2
 800950a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	685a      	ldr	r2, [r3, #4]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	621a      	str	r2, [r3, #32]
}
 8009526:	bf00      	nop
 8009528:	371c      	adds	r7, #28
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	feff8fff 	.word	0xfeff8fff
 8009538:	40010000 	.word	0x40010000
 800953c:	40010400 	.word	0x40010400

08009540 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a1b      	ldr	r3, [r3, #32]
 8009554:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	4b2d      	ldr	r3, [pc, #180]	@ (8009620 <TIM_OC3_SetConfig+0xe0>)
 800956c:	4013      	ands	r3, r2
 800956e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 0303 	bic.w	r3, r3, #3
 8009576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	4313      	orrs	r3, r2
 8009580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	021b      	lsls	r3, r3, #8
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	4313      	orrs	r3, r2
 8009594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a22      	ldr	r2, [pc, #136]	@ (8009624 <TIM_OC3_SetConfig+0xe4>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d003      	beq.n	80095a6 <TIM_OC3_SetConfig+0x66>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a21      	ldr	r2, [pc, #132]	@ (8009628 <TIM_OC3_SetConfig+0xe8>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d10d      	bne.n	80095c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	021b      	lsls	r3, r3, #8
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a17      	ldr	r2, [pc, #92]	@ (8009624 <TIM_OC3_SetConfig+0xe4>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d003      	beq.n	80095d2 <TIM_OC3_SetConfig+0x92>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a16      	ldr	r2, [pc, #88]	@ (8009628 <TIM_OC3_SetConfig+0xe8>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d113      	bne.n	80095fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80095e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	011b      	lsls	r3, r3, #4
 80095e8:	693a      	ldr	r2, [r7, #16]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	011b      	lsls	r3, r3, #4
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	693a      	ldr	r2, [r7, #16]
 80095fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	621a      	str	r2, [r3, #32]
}
 8009614:	bf00      	nop
 8009616:	371c      	adds	r7, #28
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	fffeff8f 	.word	0xfffeff8f
 8009624:	40010000 	.word	0x40010000
 8009628:	40010400 	.word	0x40010400

0800962c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800962c:	b480      	push	{r7}
 800962e:	b087      	sub	sp, #28
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a1b      	ldr	r3, [r3, #32]
 8009640:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	69db      	ldr	r3, [r3, #28]
 8009652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	4b1e      	ldr	r3, [pc, #120]	@ (80096d0 <TIM_OC4_SetConfig+0xa4>)
 8009658:	4013      	ands	r3, r2
 800965a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	021b      	lsls	r3, r3, #8
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	4313      	orrs	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	031b      	lsls	r3, r3, #12
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	4313      	orrs	r3, r2
 8009682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a13      	ldr	r2, [pc, #76]	@ (80096d4 <TIM_OC4_SetConfig+0xa8>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d003      	beq.n	8009694 <TIM_OC4_SetConfig+0x68>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a12      	ldr	r2, [pc, #72]	@ (80096d8 <TIM_OC4_SetConfig+0xac>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d109      	bne.n	80096a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800969a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	019b      	lsls	r3, r3, #6
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685a      	ldr	r2, [r3, #4]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	621a      	str	r2, [r3, #32]
}
 80096c2:	bf00      	nop
 80096c4:	371c      	adds	r7, #28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	feff8fff 	.word	0xfeff8fff
 80096d4:	40010000 	.word	0x40010000
 80096d8:	40010400 	.word	0x40010400

080096dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	4b1b      	ldr	r3, [pc, #108]	@ (8009774 <TIM_OC5_SetConfig+0x98>)
 8009708:	4013      	ands	r3, r2
 800970a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	4313      	orrs	r3, r2
 8009714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800971c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	041b      	lsls	r3, r3, #16
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	4313      	orrs	r3, r2
 8009728:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a12      	ldr	r2, [pc, #72]	@ (8009778 <TIM_OC5_SetConfig+0x9c>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d003      	beq.n	800973a <TIM_OC5_SetConfig+0x5e>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a11      	ldr	r2, [pc, #68]	@ (800977c <TIM_OC5_SetConfig+0xa0>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d109      	bne.n	800974e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009740:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	021b      	lsls	r3, r3, #8
 8009748:	697a      	ldr	r2, [r7, #20]
 800974a:	4313      	orrs	r3, r2
 800974c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	621a      	str	r2, [r3, #32]
}
 8009768:	bf00      	nop
 800976a:	371c      	adds	r7, #28
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	fffeff8f 	.word	0xfffeff8f
 8009778:	40010000 	.word	0x40010000
 800977c:	40010400 	.word	0x40010400

08009780 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a1b      	ldr	r3, [r3, #32]
 8009794:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	4b1c      	ldr	r3, [pc, #112]	@ (800981c <TIM_OC6_SetConfig+0x9c>)
 80097ac:	4013      	ands	r3, r2
 80097ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	021b      	lsls	r3, r3, #8
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80097c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	051b      	lsls	r3, r3, #20
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a13      	ldr	r2, [pc, #76]	@ (8009820 <TIM_OC6_SetConfig+0xa0>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d003      	beq.n	80097e0 <TIM_OC6_SetConfig+0x60>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a12      	ldr	r2, [pc, #72]	@ (8009824 <TIM_OC6_SetConfig+0xa4>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d109      	bne.n	80097f4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80097e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	029b      	lsls	r3, r3, #10
 80097ee:	697a      	ldr	r2, [r7, #20]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	621a      	str	r2, [r3, #32]
}
 800980e:	bf00      	nop
 8009810:	371c      	adds	r7, #28
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	feff8fff 	.word	0xfeff8fff
 8009820:	40010000 	.word	0x40010000
 8009824:	40010400 	.word	0x40010400

08009828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009828:	b480      	push	{r7}
 800982a:	b087      	sub	sp, #28
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6a1b      	ldr	r3, [r3, #32]
 8009838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	f023 0201 	bic.w	r2, r3, #1
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	011b      	lsls	r3, r3, #4
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	4313      	orrs	r3, r2
 800985c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f023 030a 	bic.w	r3, r3, #10
 8009864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	4313      	orrs	r3, r2
 800986c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	621a      	str	r2, [r3, #32]
}
 800987a:	bf00      	nop
 800987c:	371c      	adds	r7, #28
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009886:	b480      	push	{r7}
 8009888:	b087      	sub	sp, #28
 800988a:	af00      	add	r7, sp, #0
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a1b      	ldr	r3, [r3, #32]
 800989c:	f023 0210 	bic.w	r2, r3, #16
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80098b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	031b      	lsls	r3, r3, #12
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80098c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	011b      	lsls	r3, r3, #4
 80098c8:	697a      	ldr	r2, [r7, #20]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	621a      	str	r2, [r3, #32]
}
 80098da:	bf00      	nop
 80098dc:	371c      	adds	r7, #28
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr

080098e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b085      	sub	sp, #20
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4313      	orrs	r3, r2
 8009904:	f043 0307 	orr.w	r3, r3, #7
 8009908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	609a      	str	r2, [r3, #8]
}
 8009910:	bf00      	nop
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800991c:	b480      	push	{r7}
 800991e:	b087      	sub	sp, #28
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
 8009928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	021a      	lsls	r2, r3, #8
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	431a      	orrs	r2, r3
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	4313      	orrs	r3, r2
 8009944:	697a      	ldr	r2, [r7, #20]
 8009946:	4313      	orrs	r3, r2
 8009948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	609a      	str	r2, [r3, #8]
}
 8009950:	bf00      	nop
 8009952:	371c      	adds	r7, #28
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800995c:	b480      	push	{r7}
 800995e:	b087      	sub	sp, #28
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	f003 031f 	and.w	r3, r3, #31
 800996e:	2201      	movs	r2, #1
 8009970:	fa02 f303 	lsl.w	r3, r2, r3
 8009974:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6a1a      	ldr	r2, [r3, #32]
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	43db      	mvns	r3, r3
 800997e:	401a      	ands	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6a1a      	ldr	r2, [r3, #32]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f003 031f 	and.w	r3, r3, #31
 800998e:	6879      	ldr	r1, [r7, #4]
 8009990:	fa01 f303 	lsl.w	r3, r1, r3
 8009994:	431a      	orrs	r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	621a      	str	r2, [r3, #32]
}
 800999a:	bf00      	nop
 800999c:	371c      	adds	r7, #28
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
	...

080099a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d101      	bne.n	80099c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099bc:	2302      	movs	r3, #2
 80099be:	e06d      	b.n	8009a9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a30      	ldr	r2, [pc, #192]	@ (8009aa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d004      	beq.n	80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a2f      	ldr	r2, [pc, #188]	@ (8009aac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d108      	bne.n	8009a06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80099fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a20      	ldr	r2, [pc, #128]	@ (8009aa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d022      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a32:	d01d      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a1d      	ldr	r2, [pc, #116]	@ (8009ab0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d018      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a1c      	ldr	r2, [pc, #112]	@ (8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d013      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ab8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d00e      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a15      	ldr	r2, [pc, #84]	@ (8009aac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d009      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a16      	ldr	r2, [pc, #88]	@ (8009abc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d004      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a15      	ldr	r2, [pc, #84]	@ (8009ac0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d10c      	bne.n	8009a8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	40010000 	.word	0x40010000
 8009aac:	40010400 	.word	0x40010400
 8009ab0:	40000400 	.word	0x40000400
 8009ab4:	40000800 	.word	0x40000800
 8009ab8:	40000c00 	.word	0x40000c00
 8009abc:	40014000 	.word	0x40014000
 8009ac0:	40001800 	.word	0x40001800

08009ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d101      	bne.n	8009b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e040      	b.n	8009b94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d106      	bne.n	8009b28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7fa f9f0 	bl	8003f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2224      	movs	r2, #36	@ 0x24
 8009b2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f022 0201 	bic.w	r2, r2, #1
 8009b3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d002      	beq.n	8009b4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fe4c 	bl	800a7e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fbe5 	bl	800a31c <UART_SetConfig>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d101      	bne.n	8009b5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e01b      	b.n	8009b94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	689a      	ldr	r2, [r3, #8]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f042 0201 	orr.w	r2, r2, #1
 8009b8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fecb 	bl	800a928 <UART_CheckIdleState>
 8009b92:	4603      	mov	r3, r0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08a      	sub	sp, #40	@ 0x28
 8009ba0:	af02      	add	r7, sp, #8
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	603b      	str	r3, [r7, #0]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009bb0:	2b20      	cmp	r3, #32
 8009bb2:	d177      	bne.n	8009ca4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <HAL_UART_Transmit+0x24>
 8009bba:	88fb      	ldrh	r3, [r7, #6]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d101      	bne.n	8009bc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e070      	b.n	8009ca6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2221      	movs	r2, #33	@ 0x21
 8009bd0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bd2:	f7fa fbd1 	bl	8004378 <HAL_GetTick>
 8009bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	88fa      	ldrh	r2, [r7, #6]
 8009bdc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	88fa      	ldrh	r2, [r7, #6]
 8009be4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bf0:	d108      	bne.n	8009c04 <HAL_UART_Transmit+0x68>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d104      	bne.n	8009c04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	61bb      	str	r3, [r7, #24]
 8009c02:	e003      	b.n	8009c0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009c0c:	e02f      	b.n	8009c6e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2200      	movs	r2, #0
 8009c16:	2180      	movs	r1, #128	@ 0x80
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f000 fedc 	bl	800a9d6 <UART_WaitOnFlagUntilTimeout>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d004      	beq.n	8009c2e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2220      	movs	r2, #32
 8009c28:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e03b      	b.n	8009ca6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10b      	bne.n	8009c4c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	881b      	ldrh	r3, [r3, #0]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	3302      	adds	r3, #2
 8009c48:	61bb      	str	r3, [r7, #24]
 8009c4a:	e007      	b.n	8009c5c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	781a      	ldrb	r2, [r3, #0]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	3b01      	subs	r3, #1
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1c9      	bne.n	8009c0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2200      	movs	r2, #0
 8009c82:	2140      	movs	r1, #64	@ 0x40
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 fea6 	bl	800a9d6 <UART_WaitOnFlagUntilTimeout>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d004      	beq.n	8009c9a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2220      	movs	r2, #32
 8009c94:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009c96:	2303      	movs	r3, #3
 8009c98:	e005      	b.n	8009ca6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2220      	movs	r2, #32
 8009c9e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e000      	b.n	8009ca6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009ca4:	2302      	movs	r3, #2
  }
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3720      	adds	r7, #32
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b08a      	sub	sp, #40	@ 0x28
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	60f8      	str	r0, [r7, #12]
 8009cb6:	60b9      	str	r1, [r7, #8]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cc2:	2b20      	cmp	r3, #32
 8009cc4:	d132      	bne.n	8009d2c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <HAL_UART_Receive_IT+0x24>
 8009ccc:	88fb      	ldrh	r3, [r7, #6]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d101      	bne.n	8009cd6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e02b      	b.n	8009d2e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d018      	beq.n	8009d1c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	e853 3f00 	ldrex	r3, [r3]
 8009cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	461a      	mov	r2, r3
 8009d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d08:	623b      	str	r3, [r7, #32]
 8009d0a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0c:	69f9      	ldr	r1, [r7, #28]
 8009d0e:	6a3a      	ldr	r2, [r7, #32]
 8009d10:	e841 2300 	strex	r3, r2, [r1]
 8009d14:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1e6      	bne.n	8009cea <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009d1c:	88fb      	ldrh	r3, [r7, #6]
 8009d1e:	461a      	mov	r2, r3
 8009d20:	68b9      	ldr	r1, [r7, #8]
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f000 fec4 	bl	800aab0 <UART_Start_Receive_IT>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	e000      	b.n	8009d2e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009d2c:	2302      	movs	r3, #2
  }
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3728      	adds	r7, #40	@ 0x28
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b0ba      	sub	sp, #232	@ 0xe8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	69db      	ldr	r3, [r3, #28]
 8009d46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009d62:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009d66:	4013      	ands	r3, r2
 8009d68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009d6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d115      	bne.n	8009da0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d78:	f003 0320 	and.w	r3, r3, #32
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00f      	beq.n	8009da0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d84:	f003 0320 	and.w	r3, r3, #32
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d009      	beq.n	8009da0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 8297 	beq.w	800a2c4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	4798      	blx	r3
      }
      return;
 8009d9e:	e291      	b.n	800a2c4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009da0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f000 8117 	beq.w	8009fd8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dae:	f003 0301 	and.w	r3, r3, #1
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d106      	bne.n	8009dc4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009db6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009dba:	4b85      	ldr	r3, [pc, #532]	@ (8009fd0 <HAL_UART_IRQHandler+0x298>)
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f000 810a 	beq.w	8009fd8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d011      	beq.n	8009df4 <HAL_UART_IRQHandler+0xbc>
 8009dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00b      	beq.n	8009df4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2201      	movs	r2, #1
 8009de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dea:	f043 0201 	orr.w	r2, r3, #1
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009df8:	f003 0302 	and.w	r3, r3, #2
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d011      	beq.n	8009e24 <HAL_UART_IRQHandler+0xec>
 8009e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e04:	f003 0301 	and.w	r3, r3, #1
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00b      	beq.n	8009e24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2202      	movs	r2, #2
 8009e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e1a:	f043 0204 	orr.w	r2, r3, #4
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e28:	f003 0304 	and.w	r3, r3, #4
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d011      	beq.n	8009e54 <HAL_UART_IRQHandler+0x11c>
 8009e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e34:	f003 0301 	and.w	r3, r3, #1
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00b      	beq.n	8009e54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2204      	movs	r2, #4
 8009e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e4a:	f043 0202 	orr.w	r2, r3, #2
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e58:	f003 0308 	and.w	r3, r3, #8
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d017      	beq.n	8009e90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e64:	f003 0320 	and.w	r3, r3, #32
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d105      	bne.n	8009e78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00b      	beq.n	8009e90 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2208      	movs	r2, #8
 8009e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e86:	f043 0208 	orr.w	r2, r3, #8
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d012      	beq.n	8009ec2 <HAL_UART_IRQHandler+0x18a>
 8009e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ea0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00c      	beq.n	8009ec2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009eb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009eb8:	f043 0220 	orr.w	r2, r3, #32
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 81fd 	beq.w	800a2c8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ed2:	f003 0320 	and.w	r3, r3, #32
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00d      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ede:	f003 0320 	and.w	r3, r3, #32
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d007      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d003      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009efc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f0a:	2b40      	cmp	r3, #64	@ 0x40
 8009f0c:	d005      	beq.n	8009f1a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009f12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d04f      	beq.n	8009fba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fe8e 	bl	800ac3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f2a:	2b40      	cmp	r3, #64	@ 0x40
 8009f2c:	d141      	bne.n	8009fb2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3308      	adds	r3, #8
 8009f34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f3c:	e853 3f00 	ldrex	r3, [r3]
 8009f40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009f44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	3308      	adds	r3, #8
 8009f56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009f5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009f66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009f6a:	e841 2300 	strex	r3, r2, [r1]
 8009f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009f72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1d9      	bne.n	8009f2e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d013      	beq.n	8009faa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f86:	4a13      	ldr	r2, [pc, #76]	@ (8009fd4 <HAL_UART_IRQHandler+0x29c>)
 8009f88:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fa fcca 	bl	8004928 <HAL_DMA_Abort_IT>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d017      	beq.n	8009fca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fa8:	e00f      	b.n	8009fca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f9a0 	bl	800a2f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb0:	e00b      	b.n	8009fca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f99c 	bl	800a2f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb8:	e007      	b.n	8009fca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f998 	bl	800a2f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009fc8:	e17e      	b.n	800a2c8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fca:	bf00      	nop
    return;
 8009fcc:	e17c      	b.n	800a2c8 <HAL_UART_IRQHandler+0x590>
 8009fce:	bf00      	nop
 8009fd0:	04000120 	.word	0x04000120
 8009fd4:	0800ad05 	.word	0x0800ad05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	f040 814c 	bne.w	800a27a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fe6:	f003 0310 	and.w	r3, r3, #16
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f000 8145 	beq.w	800a27a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ff4:	f003 0310 	and.w	r3, r3, #16
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 813e 	beq.w	800a27a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2210      	movs	r2, #16
 800a004:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a010:	2b40      	cmp	r3, #64	@ 0x40
 800a012:	f040 80b6 	bne.w	800a182 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a022:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 8150 	beq.w	800a2cc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a036:	429a      	cmp	r2, r3
 800a038:	f080 8148 	bcs.w	800a2cc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a042:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a050:	f000 8086 	beq.w	800a160 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a060:	e853 3f00 	ldrex	r3, [r3]
 800a064:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a068:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a06c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a070:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	461a      	mov	r2, r3
 800a07a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a07e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a082:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a086:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a08a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a08e:	e841 2300 	strex	r3, r2, [r1]
 800a092:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a096:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1da      	bne.n	800a054 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3308      	adds	r3, #8
 800a0a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a0a8:	e853 3f00 	ldrex	r3, [r3]
 800a0ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a0ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0b0:	f023 0301 	bic.w	r3, r3, #1
 800a0b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a0c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a0c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a0ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a0ce:	e841 2300 	strex	r3, r2, [r1]
 800a0d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a0d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1e1      	bne.n	800a09e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3308      	adds	r3, #8
 800a0e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0e4:	e853 3f00 	ldrex	r3, [r3]
 800a0e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a0ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	3308      	adds	r3, #8
 800a0fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a0fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a100:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a102:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a104:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a106:	e841 2300 	strex	r3, r2, [r1]
 800a10a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a10c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1e3      	bne.n	800a0da <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2220      	movs	r2, #32
 800a116:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a128:	e853 3f00 	ldrex	r3, [r3]
 800a12c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a12e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a130:	f023 0310 	bic.w	r3, r3, #16
 800a134:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	461a      	mov	r2, r3
 800a13e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a142:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a144:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a146:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a148:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a14a:	e841 2300 	strex	r3, r2, [r1]
 800a14e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a150:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1e4      	bne.n	800a120 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fa fb74 	bl	8004848 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2202      	movs	r2, #2
 800a164:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a172:	b29b      	uxth	r3, r3
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	b29b      	uxth	r3, r3
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f8c2 	bl	800a304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a180:	e0a4      	b.n	800a2cc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a18e:	b29b      	uxth	r3, r3
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 8096 	beq.w	800a2d0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800a1a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 8091 	beq.w	800a2d0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b6:	e853 3f00 	ldrex	r3, [r3]
 800a1ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a1d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1d8:	e841 2300 	strex	r3, r2, [r1]
 800a1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1e4      	bne.n	800a1ae <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ee:	e853 3f00 	ldrex	r3, [r3]
 800a1f2:	623b      	str	r3, [r7, #32]
   return(result);
 800a1f4:	6a3b      	ldr	r3, [r7, #32]
 800a1f6:	f023 0301 	bic.w	r3, r3, #1
 800a1fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3308      	adds	r3, #8
 800a204:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a208:	633a      	str	r2, [r7, #48]	@ 0x30
 800a20a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a20e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a210:	e841 2300 	strex	r3, r2, [r1]
 800a214:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e3      	bne.n	800a1e4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2220      	movs	r2, #32
 800a220:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	e853 3f00 	ldrex	r3, [r3]
 800a23c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f023 0310 	bic.w	r3, r3, #16
 800a244:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	461a      	mov	r2, r3
 800a24e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a252:	61fb      	str	r3, [r7, #28]
 800a254:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a256:	69b9      	ldr	r1, [r7, #24]
 800a258:	69fa      	ldr	r2, [r7, #28]
 800a25a:	e841 2300 	strex	r3, r2, [r1]
 800a25e:	617b      	str	r3, [r7, #20]
   return(result);
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e4      	bne.n	800a230 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2202      	movs	r2, #2
 800a26a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a26c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f846 	bl	800a304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a278:	e02a      	b.n	800a2d0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a27a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a27e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00e      	beq.n	800a2a4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a28a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d008      	beq.n	800a2a4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a296:	2b00      	cmp	r3, #0
 800a298:	d01c      	beq.n	800a2d4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	4798      	blx	r3
    }
    return;
 800a2a2:	e017      	b.n	800a2d4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a2a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d012      	beq.n	800a2d6 <HAL_UART_IRQHandler+0x59e>
 800a2b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00c      	beq.n	800a2d6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fd37 	bl	800ad30 <UART_EndTransmit_IT>
    return;
 800a2c2:	e008      	b.n	800a2d6 <HAL_UART_IRQHandler+0x59e>
      return;
 800a2c4:	bf00      	nop
 800a2c6:	e006      	b.n	800a2d6 <HAL_UART_IRQHandler+0x59e>
    return;
 800a2c8:	bf00      	nop
 800a2ca:	e004      	b.n	800a2d6 <HAL_UART_IRQHandler+0x59e>
      return;
 800a2cc:	bf00      	nop
 800a2ce:	e002      	b.n	800a2d6 <HAL_UART_IRQHandler+0x59e>
      return;
 800a2d0:	bf00      	nop
 800a2d2:	e000      	b.n	800a2d6 <HAL_UART_IRQHandler+0x59e>
    return;
 800a2d4:	bf00      	nop
  }

}
 800a2d6:	37e8      	adds	r7, #232	@ 0xe8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a310:	bf00      	nop
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b088      	sub	sp, #32
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	689a      	ldr	r2, [r3, #8]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	431a      	orrs	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	431a      	orrs	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	69db      	ldr	r3, [r3, #28]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	4ba6      	ldr	r3, [pc, #664]	@ (800a5e0 <UART_SetConfig+0x2c4>)
 800a348:	4013      	ands	r3, r2
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	6812      	ldr	r2, [r2, #0]
 800a34e:	6979      	ldr	r1, [r7, #20]
 800a350:	430b      	orrs	r3, r1
 800a352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	68da      	ldr	r2, [r3, #12]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	430a      	orrs	r2, r1
 800a368:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a1b      	ldr	r3, [r3, #32]
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	4313      	orrs	r3, r2
 800a378:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	430a      	orrs	r2, r1
 800a38c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a94      	ldr	r2, [pc, #592]	@ (800a5e4 <UART_SetConfig+0x2c8>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d120      	bne.n	800a3da <UART_SetConfig+0xbe>
 800a398:	4b93      	ldr	r3, [pc, #588]	@ (800a5e8 <UART_SetConfig+0x2cc>)
 800a39a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a39e:	f003 0303 	and.w	r3, r3, #3
 800a3a2:	2b03      	cmp	r3, #3
 800a3a4:	d816      	bhi.n	800a3d4 <UART_SetConfig+0xb8>
 800a3a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3ac <UART_SetConfig+0x90>)
 800a3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ac:	0800a3bd 	.word	0x0800a3bd
 800a3b0:	0800a3c9 	.word	0x0800a3c9
 800a3b4:	0800a3c3 	.word	0x0800a3c3
 800a3b8:	0800a3cf 	.word	0x0800a3cf
 800a3bc:	2301      	movs	r3, #1
 800a3be:	77fb      	strb	r3, [r7, #31]
 800a3c0:	e150      	b.n	800a664 <UART_SetConfig+0x348>
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	77fb      	strb	r3, [r7, #31]
 800a3c6:	e14d      	b.n	800a664 <UART_SetConfig+0x348>
 800a3c8:	2304      	movs	r3, #4
 800a3ca:	77fb      	strb	r3, [r7, #31]
 800a3cc:	e14a      	b.n	800a664 <UART_SetConfig+0x348>
 800a3ce:	2308      	movs	r3, #8
 800a3d0:	77fb      	strb	r3, [r7, #31]
 800a3d2:	e147      	b.n	800a664 <UART_SetConfig+0x348>
 800a3d4:	2310      	movs	r3, #16
 800a3d6:	77fb      	strb	r3, [r7, #31]
 800a3d8:	e144      	b.n	800a664 <UART_SetConfig+0x348>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a83      	ldr	r2, [pc, #524]	@ (800a5ec <UART_SetConfig+0x2d0>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d132      	bne.n	800a44a <UART_SetConfig+0x12e>
 800a3e4:	4b80      	ldr	r3, [pc, #512]	@ (800a5e8 <UART_SetConfig+0x2cc>)
 800a3e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3ea:	f003 030c 	and.w	r3, r3, #12
 800a3ee:	2b0c      	cmp	r3, #12
 800a3f0:	d828      	bhi.n	800a444 <UART_SetConfig+0x128>
 800a3f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f8 <UART_SetConfig+0xdc>)
 800a3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f8:	0800a42d 	.word	0x0800a42d
 800a3fc:	0800a445 	.word	0x0800a445
 800a400:	0800a445 	.word	0x0800a445
 800a404:	0800a445 	.word	0x0800a445
 800a408:	0800a439 	.word	0x0800a439
 800a40c:	0800a445 	.word	0x0800a445
 800a410:	0800a445 	.word	0x0800a445
 800a414:	0800a445 	.word	0x0800a445
 800a418:	0800a433 	.word	0x0800a433
 800a41c:	0800a445 	.word	0x0800a445
 800a420:	0800a445 	.word	0x0800a445
 800a424:	0800a445 	.word	0x0800a445
 800a428:	0800a43f 	.word	0x0800a43f
 800a42c:	2300      	movs	r3, #0
 800a42e:	77fb      	strb	r3, [r7, #31]
 800a430:	e118      	b.n	800a664 <UART_SetConfig+0x348>
 800a432:	2302      	movs	r3, #2
 800a434:	77fb      	strb	r3, [r7, #31]
 800a436:	e115      	b.n	800a664 <UART_SetConfig+0x348>
 800a438:	2304      	movs	r3, #4
 800a43a:	77fb      	strb	r3, [r7, #31]
 800a43c:	e112      	b.n	800a664 <UART_SetConfig+0x348>
 800a43e:	2308      	movs	r3, #8
 800a440:	77fb      	strb	r3, [r7, #31]
 800a442:	e10f      	b.n	800a664 <UART_SetConfig+0x348>
 800a444:	2310      	movs	r3, #16
 800a446:	77fb      	strb	r3, [r7, #31]
 800a448:	e10c      	b.n	800a664 <UART_SetConfig+0x348>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a68      	ldr	r2, [pc, #416]	@ (800a5f0 <UART_SetConfig+0x2d4>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d120      	bne.n	800a496 <UART_SetConfig+0x17a>
 800a454:	4b64      	ldr	r3, [pc, #400]	@ (800a5e8 <UART_SetConfig+0x2cc>)
 800a456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a45a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a45e:	2b30      	cmp	r3, #48	@ 0x30
 800a460:	d013      	beq.n	800a48a <UART_SetConfig+0x16e>
 800a462:	2b30      	cmp	r3, #48	@ 0x30
 800a464:	d814      	bhi.n	800a490 <UART_SetConfig+0x174>
 800a466:	2b20      	cmp	r3, #32
 800a468:	d009      	beq.n	800a47e <UART_SetConfig+0x162>
 800a46a:	2b20      	cmp	r3, #32
 800a46c:	d810      	bhi.n	800a490 <UART_SetConfig+0x174>
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d002      	beq.n	800a478 <UART_SetConfig+0x15c>
 800a472:	2b10      	cmp	r3, #16
 800a474:	d006      	beq.n	800a484 <UART_SetConfig+0x168>
 800a476:	e00b      	b.n	800a490 <UART_SetConfig+0x174>
 800a478:	2300      	movs	r3, #0
 800a47a:	77fb      	strb	r3, [r7, #31]
 800a47c:	e0f2      	b.n	800a664 <UART_SetConfig+0x348>
 800a47e:	2302      	movs	r3, #2
 800a480:	77fb      	strb	r3, [r7, #31]
 800a482:	e0ef      	b.n	800a664 <UART_SetConfig+0x348>
 800a484:	2304      	movs	r3, #4
 800a486:	77fb      	strb	r3, [r7, #31]
 800a488:	e0ec      	b.n	800a664 <UART_SetConfig+0x348>
 800a48a:	2308      	movs	r3, #8
 800a48c:	77fb      	strb	r3, [r7, #31]
 800a48e:	e0e9      	b.n	800a664 <UART_SetConfig+0x348>
 800a490:	2310      	movs	r3, #16
 800a492:	77fb      	strb	r3, [r7, #31]
 800a494:	e0e6      	b.n	800a664 <UART_SetConfig+0x348>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a56      	ldr	r2, [pc, #344]	@ (800a5f4 <UART_SetConfig+0x2d8>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d120      	bne.n	800a4e2 <UART_SetConfig+0x1c6>
 800a4a0:	4b51      	ldr	r3, [pc, #324]	@ (800a5e8 <UART_SetConfig+0x2cc>)
 800a4a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a4aa:	2bc0      	cmp	r3, #192	@ 0xc0
 800a4ac:	d013      	beq.n	800a4d6 <UART_SetConfig+0x1ba>
 800a4ae:	2bc0      	cmp	r3, #192	@ 0xc0
 800a4b0:	d814      	bhi.n	800a4dc <UART_SetConfig+0x1c0>
 800a4b2:	2b80      	cmp	r3, #128	@ 0x80
 800a4b4:	d009      	beq.n	800a4ca <UART_SetConfig+0x1ae>
 800a4b6:	2b80      	cmp	r3, #128	@ 0x80
 800a4b8:	d810      	bhi.n	800a4dc <UART_SetConfig+0x1c0>
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d002      	beq.n	800a4c4 <UART_SetConfig+0x1a8>
 800a4be:	2b40      	cmp	r3, #64	@ 0x40
 800a4c0:	d006      	beq.n	800a4d0 <UART_SetConfig+0x1b4>
 800a4c2:	e00b      	b.n	800a4dc <UART_SetConfig+0x1c0>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	77fb      	strb	r3, [r7, #31]
 800a4c8:	e0cc      	b.n	800a664 <UART_SetConfig+0x348>
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	77fb      	strb	r3, [r7, #31]
 800a4ce:	e0c9      	b.n	800a664 <UART_SetConfig+0x348>
 800a4d0:	2304      	movs	r3, #4
 800a4d2:	77fb      	strb	r3, [r7, #31]
 800a4d4:	e0c6      	b.n	800a664 <UART_SetConfig+0x348>
 800a4d6:	2308      	movs	r3, #8
 800a4d8:	77fb      	strb	r3, [r7, #31]
 800a4da:	e0c3      	b.n	800a664 <UART_SetConfig+0x348>
 800a4dc:	2310      	movs	r3, #16
 800a4de:	77fb      	strb	r3, [r7, #31]
 800a4e0:	e0c0      	b.n	800a664 <UART_SetConfig+0x348>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a44      	ldr	r2, [pc, #272]	@ (800a5f8 <UART_SetConfig+0x2dc>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d125      	bne.n	800a538 <UART_SetConfig+0x21c>
 800a4ec:	4b3e      	ldr	r3, [pc, #248]	@ (800a5e8 <UART_SetConfig+0x2cc>)
 800a4ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4fa:	d017      	beq.n	800a52c <UART_SetConfig+0x210>
 800a4fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a500:	d817      	bhi.n	800a532 <UART_SetConfig+0x216>
 800a502:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a506:	d00b      	beq.n	800a520 <UART_SetConfig+0x204>
 800a508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a50c:	d811      	bhi.n	800a532 <UART_SetConfig+0x216>
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d003      	beq.n	800a51a <UART_SetConfig+0x1fe>
 800a512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a516:	d006      	beq.n	800a526 <UART_SetConfig+0x20a>
 800a518:	e00b      	b.n	800a532 <UART_SetConfig+0x216>
 800a51a:	2300      	movs	r3, #0
 800a51c:	77fb      	strb	r3, [r7, #31]
 800a51e:	e0a1      	b.n	800a664 <UART_SetConfig+0x348>
 800a520:	2302      	movs	r3, #2
 800a522:	77fb      	strb	r3, [r7, #31]
 800a524:	e09e      	b.n	800a664 <UART_SetConfig+0x348>
 800a526:	2304      	movs	r3, #4
 800a528:	77fb      	strb	r3, [r7, #31]
 800a52a:	e09b      	b.n	800a664 <UART_SetConfig+0x348>
 800a52c:	2308      	movs	r3, #8
 800a52e:	77fb      	strb	r3, [r7, #31]
 800a530:	e098      	b.n	800a664 <UART_SetConfig+0x348>
 800a532:	2310      	movs	r3, #16
 800a534:	77fb      	strb	r3, [r7, #31]
 800a536:	e095      	b.n	800a664 <UART_SetConfig+0x348>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a2f      	ldr	r2, [pc, #188]	@ (800a5fc <UART_SetConfig+0x2e0>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d125      	bne.n	800a58e <UART_SetConfig+0x272>
 800a542:	4b29      	ldr	r3, [pc, #164]	@ (800a5e8 <UART_SetConfig+0x2cc>)
 800a544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a548:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a54c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a550:	d017      	beq.n	800a582 <UART_SetConfig+0x266>
 800a552:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a556:	d817      	bhi.n	800a588 <UART_SetConfig+0x26c>
 800a558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a55c:	d00b      	beq.n	800a576 <UART_SetConfig+0x25a>
 800a55e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a562:	d811      	bhi.n	800a588 <UART_SetConfig+0x26c>
 800a564:	2b00      	cmp	r3, #0
 800a566:	d003      	beq.n	800a570 <UART_SetConfig+0x254>
 800a568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a56c:	d006      	beq.n	800a57c <UART_SetConfig+0x260>
 800a56e:	e00b      	b.n	800a588 <UART_SetConfig+0x26c>
 800a570:	2301      	movs	r3, #1
 800a572:	77fb      	strb	r3, [r7, #31]
 800a574:	e076      	b.n	800a664 <UART_SetConfig+0x348>
 800a576:	2302      	movs	r3, #2
 800a578:	77fb      	strb	r3, [r7, #31]
 800a57a:	e073      	b.n	800a664 <UART_SetConfig+0x348>
 800a57c:	2304      	movs	r3, #4
 800a57e:	77fb      	strb	r3, [r7, #31]
 800a580:	e070      	b.n	800a664 <UART_SetConfig+0x348>
 800a582:	2308      	movs	r3, #8
 800a584:	77fb      	strb	r3, [r7, #31]
 800a586:	e06d      	b.n	800a664 <UART_SetConfig+0x348>
 800a588:	2310      	movs	r3, #16
 800a58a:	77fb      	strb	r3, [r7, #31]
 800a58c:	e06a      	b.n	800a664 <UART_SetConfig+0x348>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a1b      	ldr	r2, [pc, #108]	@ (800a600 <UART_SetConfig+0x2e4>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d138      	bne.n	800a60a <UART_SetConfig+0x2ee>
 800a598:	4b13      	ldr	r3, [pc, #76]	@ (800a5e8 <UART_SetConfig+0x2cc>)
 800a59a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a59e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a5a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a5a6:	d017      	beq.n	800a5d8 <UART_SetConfig+0x2bc>
 800a5a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a5ac:	d82a      	bhi.n	800a604 <UART_SetConfig+0x2e8>
 800a5ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5b2:	d00b      	beq.n	800a5cc <UART_SetConfig+0x2b0>
 800a5b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5b8:	d824      	bhi.n	800a604 <UART_SetConfig+0x2e8>
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d003      	beq.n	800a5c6 <UART_SetConfig+0x2aa>
 800a5be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5c2:	d006      	beq.n	800a5d2 <UART_SetConfig+0x2b6>
 800a5c4:	e01e      	b.n	800a604 <UART_SetConfig+0x2e8>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	77fb      	strb	r3, [r7, #31]
 800a5ca:	e04b      	b.n	800a664 <UART_SetConfig+0x348>
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	77fb      	strb	r3, [r7, #31]
 800a5d0:	e048      	b.n	800a664 <UART_SetConfig+0x348>
 800a5d2:	2304      	movs	r3, #4
 800a5d4:	77fb      	strb	r3, [r7, #31]
 800a5d6:	e045      	b.n	800a664 <UART_SetConfig+0x348>
 800a5d8:	2308      	movs	r3, #8
 800a5da:	77fb      	strb	r3, [r7, #31]
 800a5dc:	e042      	b.n	800a664 <UART_SetConfig+0x348>
 800a5de:	bf00      	nop
 800a5e0:	efff69f3 	.word	0xefff69f3
 800a5e4:	40011000 	.word	0x40011000
 800a5e8:	40023800 	.word	0x40023800
 800a5ec:	40004400 	.word	0x40004400
 800a5f0:	40004800 	.word	0x40004800
 800a5f4:	40004c00 	.word	0x40004c00
 800a5f8:	40005000 	.word	0x40005000
 800a5fc:	40011400 	.word	0x40011400
 800a600:	40007800 	.word	0x40007800
 800a604:	2310      	movs	r3, #16
 800a606:	77fb      	strb	r3, [r7, #31]
 800a608:	e02c      	b.n	800a664 <UART_SetConfig+0x348>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a72      	ldr	r2, [pc, #456]	@ (800a7d8 <UART_SetConfig+0x4bc>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d125      	bne.n	800a660 <UART_SetConfig+0x344>
 800a614:	4b71      	ldr	r3, [pc, #452]	@ (800a7dc <UART_SetConfig+0x4c0>)
 800a616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a61a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a61e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a622:	d017      	beq.n	800a654 <UART_SetConfig+0x338>
 800a624:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a628:	d817      	bhi.n	800a65a <UART_SetConfig+0x33e>
 800a62a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a62e:	d00b      	beq.n	800a648 <UART_SetConfig+0x32c>
 800a630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a634:	d811      	bhi.n	800a65a <UART_SetConfig+0x33e>
 800a636:	2b00      	cmp	r3, #0
 800a638:	d003      	beq.n	800a642 <UART_SetConfig+0x326>
 800a63a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a63e:	d006      	beq.n	800a64e <UART_SetConfig+0x332>
 800a640:	e00b      	b.n	800a65a <UART_SetConfig+0x33e>
 800a642:	2300      	movs	r3, #0
 800a644:	77fb      	strb	r3, [r7, #31]
 800a646:	e00d      	b.n	800a664 <UART_SetConfig+0x348>
 800a648:	2302      	movs	r3, #2
 800a64a:	77fb      	strb	r3, [r7, #31]
 800a64c:	e00a      	b.n	800a664 <UART_SetConfig+0x348>
 800a64e:	2304      	movs	r3, #4
 800a650:	77fb      	strb	r3, [r7, #31]
 800a652:	e007      	b.n	800a664 <UART_SetConfig+0x348>
 800a654:	2308      	movs	r3, #8
 800a656:	77fb      	strb	r3, [r7, #31]
 800a658:	e004      	b.n	800a664 <UART_SetConfig+0x348>
 800a65a:	2310      	movs	r3, #16
 800a65c:	77fb      	strb	r3, [r7, #31]
 800a65e:	e001      	b.n	800a664 <UART_SetConfig+0x348>
 800a660:	2310      	movs	r3, #16
 800a662:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	69db      	ldr	r3, [r3, #28]
 800a668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a66c:	d15b      	bne.n	800a726 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a66e:	7ffb      	ldrb	r3, [r7, #31]
 800a670:	2b08      	cmp	r3, #8
 800a672:	d828      	bhi.n	800a6c6 <UART_SetConfig+0x3aa>
 800a674:	a201      	add	r2, pc, #4	@ (adr r2, 800a67c <UART_SetConfig+0x360>)
 800a676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67a:	bf00      	nop
 800a67c:	0800a6a1 	.word	0x0800a6a1
 800a680:	0800a6a9 	.word	0x0800a6a9
 800a684:	0800a6b1 	.word	0x0800a6b1
 800a688:	0800a6c7 	.word	0x0800a6c7
 800a68c:	0800a6b7 	.word	0x0800a6b7
 800a690:	0800a6c7 	.word	0x0800a6c7
 800a694:	0800a6c7 	.word	0x0800a6c7
 800a698:	0800a6c7 	.word	0x0800a6c7
 800a69c:	0800a6bf 	.word	0x0800a6bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6a0:	f7fc fcea 	bl	8007078 <HAL_RCC_GetPCLK1Freq>
 800a6a4:	61b8      	str	r0, [r7, #24]
        break;
 800a6a6:	e013      	b.n	800a6d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6a8:	f7fc fcfa 	bl	80070a0 <HAL_RCC_GetPCLK2Freq>
 800a6ac:	61b8      	str	r0, [r7, #24]
        break;
 800a6ae:	e00f      	b.n	800a6d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6b0:	4b4b      	ldr	r3, [pc, #300]	@ (800a7e0 <UART_SetConfig+0x4c4>)
 800a6b2:	61bb      	str	r3, [r7, #24]
        break;
 800a6b4:	e00c      	b.n	800a6d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6b6:	f7fc fbcd 	bl	8006e54 <HAL_RCC_GetSysClockFreq>
 800a6ba:	61b8      	str	r0, [r7, #24]
        break;
 800a6bc:	e008      	b.n	800a6d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6c2:	61bb      	str	r3, [r7, #24]
        break;
 800a6c4:	e004      	b.n	800a6d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	77bb      	strb	r3, [r7, #30]
        break;
 800a6ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d074      	beq.n	800a7c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	005a      	lsls	r2, r3, #1
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	085b      	lsrs	r3, r3, #1
 800a6e0:	441a      	add	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	2b0f      	cmp	r3, #15
 800a6f0:	d916      	bls.n	800a720 <UART_SetConfig+0x404>
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6f8:	d212      	bcs.n	800a720 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	f023 030f 	bic.w	r3, r3, #15
 800a702:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	085b      	lsrs	r3, r3, #1
 800a708:	b29b      	uxth	r3, r3
 800a70a:	f003 0307 	and.w	r3, r3, #7
 800a70e:	b29a      	uxth	r2, r3
 800a710:	89fb      	ldrh	r3, [r7, #14]
 800a712:	4313      	orrs	r3, r2
 800a714:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	89fa      	ldrh	r2, [r7, #14]
 800a71c:	60da      	str	r2, [r3, #12]
 800a71e:	e04f      	b.n	800a7c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	77bb      	strb	r3, [r7, #30]
 800a724:	e04c      	b.n	800a7c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a726:	7ffb      	ldrb	r3, [r7, #31]
 800a728:	2b08      	cmp	r3, #8
 800a72a:	d828      	bhi.n	800a77e <UART_SetConfig+0x462>
 800a72c:	a201      	add	r2, pc, #4	@ (adr r2, 800a734 <UART_SetConfig+0x418>)
 800a72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a732:	bf00      	nop
 800a734:	0800a759 	.word	0x0800a759
 800a738:	0800a761 	.word	0x0800a761
 800a73c:	0800a769 	.word	0x0800a769
 800a740:	0800a77f 	.word	0x0800a77f
 800a744:	0800a76f 	.word	0x0800a76f
 800a748:	0800a77f 	.word	0x0800a77f
 800a74c:	0800a77f 	.word	0x0800a77f
 800a750:	0800a77f 	.word	0x0800a77f
 800a754:	0800a777 	.word	0x0800a777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a758:	f7fc fc8e 	bl	8007078 <HAL_RCC_GetPCLK1Freq>
 800a75c:	61b8      	str	r0, [r7, #24]
        break;
 800a75e:	e013      	b.n	800a788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a760:	f7fc fc9e 	bl	80070a0 <HAL_RCC_GetPCLK2Freq>
 800a764:	61b8      	str	r0, [r7, #24]
        break;
 800a766:	e00f      	b.n	800a788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a768:	4b1d      	ldr	r3, [pc, #116]	@ (800a7e0 <UART_SetConfig+0x4c4>)
 800a76a:	61bb      	str	r3, [r7, #24]
        break;
 800a76c:	e00c      	b.n	800a788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a76e:	f7fc fb71 	bl	8006e54 <HAL_RCC_GetSysClockFreq>
 800a772:	61b8      	str	r0, [r7, #24]
        break;
 800a774:	e008      	b.n	800a788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a77a:	61bb      	str	r3, [r7, #24]
        break;
 800a77c:	e004      	b.n	800a788 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a77e:	2300      	movs	r3, #0
 800a780:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	77bb      	strb	r3, [r7, #30]
        break;
 800a786:	bf00      	nop
    }

    if (pclk != 0U)
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d018      	beq.n	800a7c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	085a      	lsrs	r2, r3, #1
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	441a      	add	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	2b0f      	cmp	r3, #15
 800a7a6:	d909      	bls.n	800a7bc <UART_SetConfig+0x4a0>
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7ae:	d205      	bcs.n	800a7bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	60da      	str	r2, [r3, #12]
 800a7ba:	e001      	b.n	800a7c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a7cc:	7fbb      	ldrb	r3, [r7, #30]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3720      	adds	r7, #32
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	40007c00 	.word	0x40007c00
 800a7dc:	40023800 	.word	0x40023800
 800a7e0:	00f42400 	.word	0x00f42400

0800a7e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f0:	f003 0308 	and.w	r3, r3, #8
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00a      	beq.n	800a80e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	430a      	orrs	r2, r1
 800a80c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a812:	f003 0301 	and.w	r3, r3, #1
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	430a      	orrs	r2, r1
 800a82e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a834:	f003 0302 	and.w	r3, r3, #2
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00a      	beq.n	800a852 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	430a      	orrs	r2, r1
 800a850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a856:	f003 0304 	and.w	r3, r3, #4
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00a      	beq.n	800a874 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	430a      	orrs	r2, r1
 800a872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a878:	f003 0310 	and.w	r3, r3, #16
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00a      	beq.n	800a896 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	430a      	orrs	r2, r1
 800a894:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a89a:	f003 0320 	and.w	r3, r3, #32
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00a      	beq.n	800a8b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	430a      	orrs	r2, r1
 800a8b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d01a      	beq.n	800a8fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	430a      	orrs	r2, r1
 800a8d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8e2:	d10a      	bne.n	800a8fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	430a      	orrs	r2, r1
 800a8f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00a      	beq.n	800a91c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	430a      	orrs	r2, r1
 800a91a:	605a      	str	r2, [r3, #4]
  }
}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b08c      	sub	sp, #48	@ 0x30
 800a92c:	af02      	add	r7, sp, #8
 800a92e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a938:	f7f9 fd1e 	bl	8004378 <HAL_GetTick>
 800a93c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 0308 	and.w	r3, r3, #8
 800a948:	2b08      	cmp	r3, #8
 800a94a:	d12e      	bne.n	800a9aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a94c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a954:	2200      	movs	r2, #0
 800a956:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f83b 	bl	800a9d6 <UART_WaitOnFlagUntilTimeout>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d021      	beq.n	800a9aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	e853 3f00 	ldrex	r3, [r3]
 800a972:	60fb      	str	r3, [r7, #12]
   return(result);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a97a:	623b      	str	r3, [r7, #32]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	461a      	mov	r2, r3
 800a982:	6a3b      	ldr	r3, [r7, #32]
 800a984:	61fb      	str	r3, [r7, #28]
 800a986:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a988:	69b9      	ldr	r1, [r7, #24]
 800a98a:	69fa      	ldr	r2, [r7, #28]
 800a98c:	e841 2300 	strex	r3, r2, [r1]
 800a990:	617b      	str	r3, [r7, #20]
   return(result);
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1e6      	bne.n	800a966 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2220      	movs	r2, #32
 800a99c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	e011      	b.n	800a9ce <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2220      	movs	r2, #32
 800a9ae:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2220      	movs	r2, #32
 800a9b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3728      	adds	r7, #40	@ 0x28
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b084      	sub	sp, #16
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	60f8      	str	r0, [r7, #12]
 800a9de:	60b9      	str	r1, [r7, #8]
 800a9e0:	603b      	str	r3, [r7, #0]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9e6:	e04f      	b.n	800aa88 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9ee:	d04b      	beq.n	800aa88 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9f0:	f7f9 fcc2 	bl	8004378 <HAL_GetTick>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	1ad3      	subs	r3, r2, r3
 800a9fa:	69ba      	ldr	r2, [r7, #24]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d302      	bcc.n	800aa06 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d101      	bne.n	800aa0a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa06:	2303      	movs	r3, #3
 800aa08:	e04e      	b.n	800aaa8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 0304 	and.w	r3, r3, #4
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d037      	beq.n	800aa88 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2b80      	cmp	r3, #128	@ 0x80
 800aa1c:	d034      	beq.n	800aa88 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b40      	cmp	r3, #64	@ 0x40
 800aa22:	d031      	beq.n	800aa88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	69db      	ldr	r3, [r3, #28]
 800aa2a:	f003 0308 	and.w	r3, r3, #8
 800aa2e:	2b08      	cmp	r3, #8
 800aa30:	d110      	bne.n	800aa54 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2208      	movs	r2, #8
 800aa38:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f000 f8fe 	bl	800ac3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2208      	movs	r2, #8
 800aa44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e029      	b.n	800aaa8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	69db      	ldr	r3, [r3, #28]
 800aa5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa62:	d111      	bne.n	800aa88 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f000 f8e4 	bl	800ac3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2220      	movs	r2, #32
 800aa78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e00f      	b.n	800aaa8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	69da      	ldr	r2, [r3, #28]
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	4013      	ands	r3, r2
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	bf0c      	ite	eq
 800aa98:	2301      	moveq	r3, #1
 800aa9a:	2300      	movne	r3, #0
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	79fb      	ldrb	r3, [r7, #7]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d0a0      	beq.n	800a9e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b097      	sub	sp, #92	@ 0x5c
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	4613      	mov	r3, r2
 800aabc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	88fa      	ldrh	r2, [r7, #6]
 800aac8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	88fa      	ldrh	r2, [r7, #6]
 800aad0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2200      	movs	r2, #0
 800aad8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aae2:	d10e      	bne.n	800ab02 <UART_Start_Receive_IT+0x52>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d105      	bne.n	800aaf8 <UART_Start_Receive_IT+0x48>
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800aaf2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800aaf6:	e02d      	b.n	800ab54 <UART_Start_Receive_IT+0xa4>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	22ff      	movs	r2, #255	@ 0xff
 800aafc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ab00:	e028      	b.n	800ab54 <UART_Start_Receive_IT+0xa4>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10d      	bne.n	800ab26 <UART_Start_Receive_IT+0x76>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d104      	bne.n	800ab1c <UART_Start_Receive_IT+0x6c>
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	22ff      	movs	r2, #255	@ 0xff
 800ab16:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ab1a:	e01b      	b.n	800ab54 <UART_Start_Receive_IT+0xa4>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	227f      	movs	r2, #127	@ 0x7f
 800ab20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ab24:	e016      	b.n	800ab54 <UART_Start_Receive_IT+0xa4>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab2e:	d10d      	bne.n	800ab4c <UART_Start_Receive_IT+0x9c>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d104      	bne.n	800ab42 <UART_Start_Receive_IT+0x92>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	227f      	movs	r2, #127	@ 0x7f
 800ab3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ab40:	e008      	b.n	800ab54 <UART_Start_Receive_IT+0xa4>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	223f      	movs	r2, #63	@ 0x3f
 800ab46:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ab4a:	e003      	b.n	800ab54 <UART_Start_Receive_IT+0xa4>
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2222      	movs	r2, #34	@ 0x22
 800ab60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	3308      	adds	r3, #8
 800ab6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab6e:	e853 3f00 	ldrex	r3, [r3]
 800ab72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab76:	f043 0301 	orr.w	r3, r3, #1
 800ab7a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	3308      	adds	r3, #8
 800ab82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab84:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ab86:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab88:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab8c:	e841 2300 	strex	r3, r2, [r1]
 800ab90:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ab92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1e5      	bne.n	800ab64 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aba0:	d107      	bne.n	800abb2 <UART_Start_Receive_IT+0x102>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d103      	bne.n	800abb2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	4a21      	ldr	r2, [pc, #132]	@ (800ac34 <UART_Start_Receive_IT+0x184>)
 800abae:	669a      	str	r2, [r3, #104]	@ 0x68
 800abb0:	e002      	b.n	800abb8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	4a20      	ldr	r2, [pc, #128]	@ (800ac38 <UART_Start_Receive_IT+0x188>)
 800abb6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d019      	beq.n	800abf4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc8:	e853 3f00 	ldrex	r3, [r3]
 800abcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800abd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	461a      	mov	r2, r3
 800abdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abde:	637b      	str	r3, [r7, #52]	@ 0x34
 800abe0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800abe4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800abe6:	e841 2300 	strex	r3, r2, [r1]
 800abea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800abec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1e6      	bne.n	800abc0 <UART_Start_Receive_IT+0x110>
 800abf2:	e018      	b.n	800ac26 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	e853 3f00 	ldrex	r3, [r3]
 800ac00:	613b      	str	r3, [r7, #16]
   return(result);
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f043 0320 	orr.w	r3, r3, #32
 800ac08:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac12:	623b      	str	r3, [r7, #32]
 800ac14:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac16:	69f9      	ldr	r1, [r7, #28]
 800ac18:	6a3a      	ldr	r2, [r7, #32]
 800ac1a:	e841 2300 	strex	r3, r2, [r1]
 800ac1e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1e6      	bne.n	800abf4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	375c      	adds	r7, #92	@ 0x5c
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr
 800ac34:	0800af2d 	.word	0x0800af2d
 800ac38:	0800ad85 	.word	0x0800ad85

0800ac3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b095      	sub	sp, #84	@ 0x54
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac4c:	e853 3f00 	ldrex	r3, [r3]
 800ac50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac62:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac64:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac6a:	e841 2300 	strex	r3, r2, [r1]
 800ac6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d1e6      	bne.n	800ac44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	3308      	adds	r3, #8
 800ac7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	e853 3f00 	ldrex	r3, [r3]
 800ac84:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	f023 0301 	bic.w	r3, r3, #1
 800ac8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3308      	adds	r3, #8
 800ac94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac9e:	e841 2300 	strex	r3, r2, [r1]
 800aca2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1e5      	bne.n	800ac76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d118      	bne.n	800ace4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	e853 3f00 	ldrex	r3, [r3]
 800acbe:	60bb      	str	r3, [r7, #8]
   return(result);
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	f023 0310 	bic.w	r3, r3, #16
 800acc6:	647b      	str	r3, [r7, #68]	@ 0x44
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	461a      	mov	r2, r3
 800acce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acd0:	61bb      	str	r3, [r7, #24]
 800acd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd4:	6979      	ldr	r1, [r7, #20]
 800acd6:	69ba      	ldr	r2, [r7, #24]
 800acd8:	e841 2300 	strex	r3, r2, [r1]
 800acdc:	613b      	str	r3, [r7, #16]
   return(result);
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1e6      	bne.n	800acb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2220      	movs	r2, #32
 800ace8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800acf8:	bf00      	nop
 800acfa:	3754      	adds	r7, #84	@ 0x54
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f7ff fae4 	bl	800a2f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad28:	bf00      	nop
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b088      	sub	sp, #32
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	e853 3f00 	ldrex	r3, [r3]
 800ad44:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad4c:	61fb      	str	r3, [r7, #28]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	461a      	mov	r2, r3
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	61bb      	str	r3, [r7, #24]
 800ad58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5a:	6979      	ldr	r1, [r7, #20]
 800ad5c:	69ba      	ldr	r2, [r7, #24]
 800ad5e:	e841 2300 	strex	r3, r2, [r1]
 800ad62:	613b      	str	r3, [r7, #16]
   return(result);
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1e6      	bne.n	800ad38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2220      	movs	r2, #32
 800ad6e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f7ff fab0 	bl	800a2dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad7c:	bf00      	nop
 800ad7e:	3720      	adds	r7, #32
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b09c      	sub	sp, #112	@ 0x70
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad92:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad9c:	2b22      	cmp	r3, #34	@ 0x22
 800ad9e:	f040 80b9 	bne.w	800af14 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800adac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800adb0:	b2d9      	uxtb	r1, r3
 800adb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adbc:	400a      	ands	r2, r1
 800adbe:	b2d2      	uxtb	r2, r2
 800adc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adc6:	1c5a      	adds	r2, r3, #1
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800add2:	b29b      	uxth	r3, r3
 800add4:	3b01      	subs	r3, #1
 800add6:	b29a      	uxth	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f040 809c 	bne.w	800af24 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adf4:	e853 3f00 	ldrex	r3, [r3]
 800adf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800adfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae00:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	461a      	mov	r2, r3
 800ae08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae12:	e841 2300 	strex	r3, r2, [r1]
 800ae16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1e6      	bne.n	800adec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3308      	adds	r3, #8
 800ae24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae28:	e853 3f00 	ldrex	r3, [r3]
 800ae2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae30:	f023 0301 	bic.w	r3, r3, #1
 800ae34:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3308      	adds	r3, #8
 800ae3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ae3e:	647a      	str	r2, [r7, #68]	@ 0x44
 800ae40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae46:	e841 2300 	strex	r3, r2, [r1]
 800ae4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1e5      	bne.n	800ae1e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2220      	movs	r2, #32
 800ae56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d018      	beq.n	800aea6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7c:	e853 3f00 	ldrex	r3, [r3]
 800ae80:	623b      	str	r3, [r7, #32]
   return(result);
 800ae82:	6a3b      	ldr	r3, [r7, #32]
 800ae84:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae88:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae92:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae94:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae9a:	e841 2300 	strex	r3, r2, [r1]
 800ae9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1e6      	bne.n	800ae74 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d12e      	bne.n	800af0c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	e853 3f00 	ldrex	r3, [r3]
 800aec0:	60fb      	str	r3, [r7, #12]
   return(result);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f023 0310 	bic.w	r3, r3, #16
 800aec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aed2:	61fb      	str	r3, [r7, #28]
 800aed4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed6:	69b9      	ldr	r1, [r7, #24]
 800aed8:	69fa      	ldr	r2, [r7, #28]
 800aeda:	e841 2300 	strex	r3, r2, [r1]
 800aede:	617b      	str	r3, [r7, #20]
   return(result);
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1e6      	bne.n	800aeb4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	69db      	ldr	r3, [r3, #28]
 800aeec:	f003 0310 	and.w	r3, r3, #16
 800aef0:	2b10      	cmp	r3, #16
 800aef2:	d103      	bne.n	800aefc <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2210      	movs	r2, #16
 800aefa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800af02:	4619      	mov	r1, r3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7ff f9fd 	bl	800a304 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800af0a:	e00b      	b.n	800af24 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7f8 fd37 	bl	8003980 <HAL_UART_RxCpltCallback>
}
 800af12:	e007      	b.n	800af24 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	699a      	ldr	r2, [r3, #24]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f042 0208 	orr.w	r2, r2, #8
 800af22:	619a      	str	r2, [r3, #24]
}
 800af24:	bf00      	nop
 800af26:	3770      	adds	r7, #112	@ 0x70
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b09c      	sub	sp, #112	@ 0x70
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af3a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af44:	2b22      	cmp	r3, #34	@ 0x22
 800af46:	f040 80b9 	bne.w	800b0bc <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af50:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af58:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800af5a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800af5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800af62:	4013      	ands	r3, r2
 800af64:	b29a      	uxth	r2, r3
 800af66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af68:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af6e:	1c9a      	adds	r2, r3, #2
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	3b01      	subs	r3, #1
 800af7e:	b29a      	uxth	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f040 809c 	bne.w	800b0cc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af9c:	e853 3f00 	ldrex	r3, [r3]
 800afa0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800afa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800afa8:	667b      	str	r3, [r7, #100]	@ 0x64
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	461a      	mov	r2, r3
 800afb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afb2:	657b      	str	r3, [r7, #84]	@ 0x54
 800afb4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800afb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800afba:	e841 2300 	strex	r3, r2, [r1]
 800afbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800afc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1e6      	bne.n	800af94 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3308      	adds	r3, #8
 800afcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afd0:	e853 3f00 	ldrex	r3, [r3]
 800afd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800afd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd8:	f023 0301 	bic.w	r3, r3, #1
 800afdc:	663b      	str	r3, [r7, #96]	@ 0x60
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	3308      	adds	r3, #8
 800afe4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800afe6:	643a      	str	r2, [r7, #64]	@ 0x40
 800afe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800afec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800afee:	e841 2300 	strex	r3, r2, [r1]
 800aff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d1e5      	bne.n	800afc6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2220      	movs	r2, #32
 800affe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d018      	beq.n	800b04e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b022:	6a3b      	ldr	r3, [r7, #32]
 800b024:	e853 3f00 	ldrex	r3, [r3]
 800b028:	61fb      	str	r3, [r7, #28]
   return(result);
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b030:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	461a      	mov	r2, r3
 800b038:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b03a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b03c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b042:	e841 2300 	strex	r3, r2, [r1]
 800b046:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d1e6      	bne.n	800b01c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b052:	2b01      	cmp	r3, #1
 800b054:	d12e      	bne.n	800b0b4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	e853 3f00 	ldrex	r3, [r3]
 800b068:	60bb      	str	r3, [r7, #8]
   return(result);
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	f023 0310 	bic.w	r3, r3, #16
 800b070:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	461a      	mov	r2, r3
 800b078:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b07a:	61bb      	str	r3, [r7, #24]
 800b07c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07e:	6979      	ldr	r1, [r7, #20]
 800b080:	69ba      	ldr	r2, [r7, #24]
 800b082:	e841 2300 	strex	r3, r2, [r1]
 800b086:	613b      	str	r3, [r7, #16]
   return(result);
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1e6      	bne.n	800b05c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	69db      	ldr	r3, [r3, #28]
 800b094:	f003 0310 	and.w	r3, r3, #16
 800b098:	2b10      	cmp	r3, #16
 800b09a:	d103      	bne.n	800b0a4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2210      	movs	r2, #16
 800b0a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7ff f929 	bl	800a304 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b0b2:	e00b      	b.n	800b0cc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f7f8 fc63 	bl	8003980 <HAL_UART_RxCpltCallback>
}
 800b0ba:	e007      	b.n	800b0cc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	699a      	ldr	r2, [r3, #24]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f042 0208 	orr.w	r2, r2, #8
 800b0ca:	619a      	str	r2, [r3, #24]
}
 800b0cc:	bf00      	nop
 800b0ce:	3770      	adds	r7, #112	@ 0x70
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b084      	sub	sp, #16
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	f107 001c 	add.w	r0, r7, #28
 800b0e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b0e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d127      	bne.n	800b13e <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	68da      	ldr	r2, [r3, #12]
 800b0fe:	4b3a      	ldr	r3, [pc, #232]	@ (800b1e8 <USB_CoreInit+0x114>)
 800b100:	4013      	ands	r3, r2
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	f043 0210 	orr.w	r2, r3, #16
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b11e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b122:	2b01      	cmp	r3, #1
 800b124:	d105      	bne.n	800b132 <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f001 fb1c 	bl	800c770 <USB_CoreReset>
 800b138:	4603      	mov	r3, r0
 800b13a:	73fb      	strb	r3, [r7, #15]
 800b13c:	e03c      	b.n	800b1b8 <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800b13e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b142:	2b03      	cmp	r3, #3
 800b144:	d127      	bne.n	800b196 <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b14a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	68da      	ldr	r2, [r3, #12]
 800b156:	4b24      	ldr	r3, [pc, #144]	@ (800b1e8 <USB_CoreInit+0x114>)
 800b158:	4013      	ands	r3, r2
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	f023 0210 	bic.w	r2, r3, #16
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800b176:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d105      	bne.n	800b18a <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f001 faf0 	bl	800c770 <USB_CoreReset>
 800b190:	4603      	mov	r3, r0
 800b192:	73fb      	strb	r3, [r7, #15]
 800b194:	e010      	b.n	800b1b8 <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f001 fae4 	bl	800c770 <USB_CoreReset>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800b1b8:	7fbb      	ldrb	r3, [r7, #30]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d10b      	bne.n	800b1d6 <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	f043 0206 	orr.w	r2, r3, #6
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	f043 0220 	orr.w	r2, r3, #32
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b1e2:	b004      	add	sp, #16
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	ffbdffbf 	.word	0xffbdffbf

0800b1ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b087      	sub	sp, #28
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b1fa:	79fb      	ldrb	r3, [r7, #7]
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d165      	bne.n	800b2cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	4a41      	ldr	r2, [pc, #260]	@ (800b308 <USB_SetTurnaroundTime+0x11c>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d906      	bls.n	800b216 <USB_SetTurnaroundTime+0x2a>
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	4a40      	ldr	r2, [pc, #256]	@ (800b30c <USB_SetTurnaroundTime+0x120>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d202      	bcs.n	800b216 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b210:	230f      	movs	r3, #15
 800b212:	617b      	str	r3, [r7, #20]
 800b214:	e062      	b.n	800b2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	4a3c      	ldr	r2, [pc, #240]	@ (800b30c <USB_SetTurnaroundTime+0x120>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d306      	bcc.n	800b22c <USB_SetTurnaroundTime+0x40>
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	4a3b      	ldr	r2, [pc, #236]	@ (800b310 <USB_SetTurnaroundTime+0x124>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d202      	bcs.n	800b22c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b226:	230e      	movs	r3, #14
 800b228:	617b      	str	r3, [r7, #20]
 800b22a:	e057      	b.n	800b2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	4a38      	ldr	r2, [pc, #224]	@ (800b310 <USB_SetTurnaroundTime+0x124>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d306      	bcc.n	800b242 <USB_SetTurnaroundTime+0x56>
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	4a37      	ldr	r2, [pc, #220]	@ (800b314 <USB_SetTurnaroundTime+0x128>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d202      	bcs.n	800b242 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b23c:	230d      	movs	r3, #13
 800b23e:	617b      	str	r3, [r7, #20]
 800b240:	e04c      	b.n	800b2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	4a33      	ldr	r2, [pc, #204]	@ (800b314 <USB_SetTurnaroundTime+0x128>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d306      	bcc.n	800b258 <USB_SetTurnaroundTime+0x6c>
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	4a32      	ldr	r2, [pc, #200]	@ (800b318 <USB_SetTurnaroundTime+0x12c>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d802      	bhi.n	800b258 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b252:	230c      	movs	r3, #12
 800b254:	617b      	str	r3, [r7, #20]
 800b256:	e041      	b.n	800b2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	4a2f      	ldr	r2, [pc, #188]	@ (800b318 <USB_SetTurnaroundTime+0x12c>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d906      	bls.n	800b26e <USB_SetTurnaroundTime+0x82>
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	4a2e      	ldr	r2, [pc, #184]	@ (800b31c <USB_SetTurnaroundTime+0x130>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d802      	bhi.n	800b26e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b268:	230b      	movs	r3, #11
 800b26a:	617b      	str	r3, [r7, #20]
 800b26c:	e036      	b.n	800b2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	4a2a      	ldr	r2, [pc, #168]	@ (800b31c <USB_SetTurnaroundTime+0x130>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d906      	bls.n	800b284 <USB_SetTurnaroundTime+0x98>
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	4a29      	ldr	r2, [pc, #164]	@ (800b320 <USB_SetTurnaroundTime+0x134>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d802      	bhi.n	800b284 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b27e:	230a      	movs	r3, #10
 800b280:	617b      	str	r3, [r7, #20]
 800b282:	e02b      	b.n	800b2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	4a26      	ldr	r2, [pc, #152]	@ (800b320 <USB_SetTurnaroundTime+0x134>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d906      	bls.n	800b29a <USB_SetTurnaroundTime+0xae>
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	4a25      	ldr	r2, [pc, #148]	@ (800b324 <USB_SetTurnaroundTime+0x138>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d202      	bcs.n	800b29a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b294:	2309      	movs	r3, #9
 800b296:	617b      	str	r3, [r7, #20]
 800b298:	e020      	b.n	800b2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	4a21      	ldr	r2, [pc, #132]	@ (800b324 <USB_SetTurnaroundTime+0x138>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d306      	bcc.n	800b2b0 <USB_SetTurnaroundTime+0xc4>
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	4a20      	ldr	r2, [pc, #128]	@ (800b328 <USB_SetTurnaroundTime+0x13c>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d802      	bhi.n	800b2b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b2aa:	2308      	movs	r3, #8
 800b2ac:	617b      	str	r3, [r7, #20]
 800b2ae:	e015      	b.n	800b2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	4a1d      	ldr	r2, [pc, #116]	@ (800b328 <USB_SetTurnaroundTime+0x13c>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d906      	bls.n	800b2c6 <USB_SetTurnaroundTime+0xda>
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	4a1c      	ldr	r2, [pc, #112]	@ (800b32c <USB_SetTurnaroundTime+0x140>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d202      	bcs.n	800b2c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b2c0:	2307      	movs	r3, #7
 800b2c2:	617b      	str	r3, [r7, #20]
 800b2c4:	e00a      	b.n	800b2dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b2c6:	2306      	movs	r3, #6
 800b2c8:	617b      	str	r3, [r7, #20]
 800b2ca:	e007      	b.n	800b2dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b2cc:	79fb      	ldrb	r3, [r7, #7]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d102      	bne.n	800b2d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b2d2:	2309      	movs	r3, #9
 800b2d4:	617b      	str	r3, [r7, #20]
 800b2d6:	e001      	b.n	800b2dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b2d8:	2309      	movs	r3, #9
 800b2da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	68da      	ldr	r2, [r3, #12]
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	029b      	lsls	r3, r3, #10
 800b2f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b2f4:	431a      	orrs	r2, r3
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	371c      	adds	r7, #28
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	00d8acbf 	.word	0x00d8acbf
 800b30c:	00e4e1c0 	.word	0x00e4e1c0
 800b310:	00f42400 	.word	0x00f42400
 800b314:	01067380 	.word	0x01067380
 800b318:	011a499f 	.word	0x011a499f
 800b31c:	01312cff 	.word	0x01312cff
 800b320:	014ca43f 	.word	0x014ca43f
 800b324:	016e3600 	.word	0x016e3600
 800b328:	01a6ab1f 	.word	0x01a6ab1f
 800b32c:	01e84800 	.word	0x01e84800

0800b330 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	f043 0201 	orr.w	r2, r3, #1
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b352:	b480      	push	{r7}
 800b354:	b083      	sub	sp, #12
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	f023 0201 	bic.w	r2, r3, #1
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	460b      	mov	r3, r1
 800b37e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b380:	2300      	movs	r3, #0
 800b382:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b390:	78fb      	ldrb	r3, [r7, #3]
 800b392:	2b01      	cmp	r3, #1
 800b394:	d115      	bne.n	800b3c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b3a2:	200a      	movs	r0, #10
 800b3a4:	f7f8 fff4 	bl	8004390 <HAL_Delay>
      ms += 10U;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	330a      	adds	r3, #10
 800b3ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f001 f94d 	bl	800c64e <USB_GetMode>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d01e      	beq.n	800b3f8 <USB_SetCurrentMode+0x84>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2bc7      	cmp	r3, #199	@ 0xc7
 800b3be:	d9f0      	bls.n	800b3a2 <USB_SetCurrentMode+0x2e>
 800b3c0:	e01a      	b.n	800b3f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b3c2:	78fb      	ldrb	r3, [r7, #3]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d115      	bne.n	800b3f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b3d4:	200a      	movs	r0, #10
 800b3d6:	f7f8 ffdb 	bl	8004390 <HAL_Delay>
      ms += 10U;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	330a      	adds	r3, #10
 800b3de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f001 f934 	bl	800c64e <USB_GetMode>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d005      	beq.n	800b3f8 <USB_SetCurrentMode+0x84>
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2bc7      	cmp	r3, #199	@ 0xc7
 800b3f0:	d9f0      	bls.n	800b3d4 <USB_SetCurrentMode+0x60>
 800b3f2:	e001      	b.n	800b3f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e005      	b.n	800b404 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2bc8      	cmp	r3, #200	@ 0xc8
 800b3fc:	d101      	bne.n	800b402 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e000      	b.n	800b404 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b402:	2300      	movs	r3, #0
}
 800b404:	4618      	mov	r0, r3
 800b406:	3710      	adds	r7, #16
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b40c:	b084      	sub	sp, #16
 800b40e:	b580      	push	{r7, lr}
 800b410:	b086      	sub	sp, #24
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
 800b416:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b41a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b41e:	2300      	movs	r3, #0
 800b420:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b426:	2300      	movs	r3, #0
 800b428:	613b      	str	r3, [r7, #16]
 800b42a:	e009      	b.n	800b440 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	3340      	adds	r3, #64	@ 0x40
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	4413      	add	r3, r2
 800b436:	2200      	movs	r2, #0
 800b438:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	3301      	adds	r3, #1
 800b43e:	613b      	str	r3, [r7, #16]
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	2b0e      	cmp	r3, #14
 800b444:	d9f2      	bls.n	800b42c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b446:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d11c      	bne.n	800b488 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b45c:	f043 0302 	orr.w	r3, r3, #2
 800b460:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b466:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	601a      	str	r2, [r3, #0]
 800b486:	e005      	b.n	800b494 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b48c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b49a:	461a      	mov	r2, r3
 800b49c:	2300      	movs	r3, #0
 800b49e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b4a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d10d      	bne.n	800b4c4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b4a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d104      	bne.n	800b4ba <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 f97a 	bl	800b7ac <USB_SetDevSpeed>
 800b4b8:	e01a      	b.n	800b4f0 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b4ba:	2101      	movs	r1, #1
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f975 	bl	800b7ac <USB_SetDevSpeed>
 800b4c2:	e015      	b.n	800b4f0 <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800b4c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b4c8:	2b03      	cmp	r3, #3
 800b4ca:	d10d      	bne.n	800b4e8 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d104      	bne.n	800b4de <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f968 	bl	800b7ac <USB_SetDevSpeed>
 800b4dc:	e008      	b.n	800b4f0 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b4de:	2101      	movs	r1, #1
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f963 	bl	800b7ac <USB_SetDevSpeed>
 800b4e6:	e003      	b.n	800b4f0 <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b4e8:	2103      	movs	r1, #3
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 f95e 	bl	800b7ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b4f0:	2110      	movs	r1, #16
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f8fa 	bl	800b6ec <USB_FlushTxFifo>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d001      	beq.n	800b502 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 f924 	bl	800b750 <USB_FlushRxFifo>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d001      	beq.n	800b512 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b518:	461a      	mov	r2, r3
 800b51a:	2300      	movs	r3, #0
 800b51c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b524:	461a      	mov	r2, r3
 800b526:	2300      	movs	r3, #0
 800b528:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b530:	461a      	mov	r2, r3
 800b532:	2300      	movs	r3, #0
 800b534:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b536:	2300      	movs	r3, #0
 800b538:	613b      	str	r3, [r7, #16]
 800b53a:	e043      	b.n	800b5c4 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	015a      	lsls	r2, r3, #5
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	4413      	add	r3, r2
 800b544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b54e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b552:	d118      	bne.n	800b586 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10a      	bne.n	800b570 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	015a      	lsls	r2, r3, #5
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	4413      	add	r3, r2
 800b562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b566:	461a      	mov	r2, r3
 800b568:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	e013      	b.n	800b598 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	015a      	lsls	r2, r3, #5
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	4413      	add	r3, r2
 800b578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b57c:	461a      	mov	r2, r3
 800b57e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b582:	6013      	str	r3, [r2, #0]
 800b584:	e008      	b.n	800b598 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	015a      	lsls	r2, r3, #5
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	4413      	add	r3, r2
 800b58e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b592:	461a      	mov	r2, r3
 800b594:	2300      	movs	r3, #0
 800b596:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	015a      	lsls	r2, r3, #5
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	4413      	add	r3, r2
 800b5a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	015a      	lsls	r2, r3, #5
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b5bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	613b      	str	r3, [r7, #16]
 800b5c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d3b5      	bcc.n	800b53c <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	613b      	str	r3, [r7, #16]
 800b5d4:	e043      	b.n	800b65e <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	015a      	lsls	r2, r3, #5
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	4413      	add	r3, r2
 800b5de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5ec:	d118      	bne.n	800b620 <USB_DevInit+0x214>
    {
      if (i == 0U)
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10a      	bne.n	800b60a <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	015a      	lsls	r2, r3, #5
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b600:	461a      	mov	r2, r3
 800b602:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b606:	6013      	str	r3, [r2, #0]
 800b608:	e013      	b.n	800b632 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	015a      	lsls	r2, r3, #5
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	4413      	add	r3, r2
 800b612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b616:	461a      	mov	r2, r3
 800b618:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	e008      	b.n	800b632 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	015a      	lsls	r2, r3, #5
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4413      	add	r3, r2
 800b628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b62c:	461a      	mov	r2, r3
 800b62e:	2300      	movs	r3, #0
 800b630:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	015a      	lsls	r2, r3, #5
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	4413      	add	r3, r2
 800b63a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b63e:	461a      	mov	r2, r3
 800b640:	2300      	movs	r3, #0
 800b642:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	015a      	lsls	r2, r3, #5
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	4413      	add	r3, r2
 800b64c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b650:	461a      	mov	r2, r3
 800b652:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b656:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	3301      	adds	r3, #1
 800b65c:	613b      	str	r3, [r7, #16]
 800b65e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b662:	461a      	mov	r2, r3
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	4293      	cmp	r3, r2
 800b668:	d3b5      	bcc.n	800b5d6 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b67c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b68a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b68c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b690:	2b00      	cmp	r3, #0
 800b692:	d105      	bne.n	800b6a0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	699b      	ldr	r3, [r3, #24]
 800b698:	f043 0210 	orr.w	r2, r3, #16
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	699a      	ldr	r2, [r3, #24]
 800b6a4:	4b0f      	ldr	r3, [pc, #60]	@ (800b6e4 <USB_DevInit+0x2d8>)
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b6ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d005      	beq.n	800b6c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	699b      	ldr	r3, [r3, #24]
 800b6b8:	f043 0208 	orr.w	r2, r3, #8
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b6c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d105      	bne.n	800b6d4 <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	699a      	ldr	r2, [r3, #24]
 800b6cc:	4b06      	ldr	r3, [pc, #24]	@ (800b6e8 <USB_DevInit+0x2dc>)
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b6d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3718      	adds	r7, #24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6e0:	b004      	add	sp, #16
 800b6e2:	4770      	bx	lr
 800b6e4:	803c3800 	.word	0x803c3800
 800b6e8:	40000004 	.word	0x40000004

0800b6ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b706:	d901      	bls.n	800b70c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b708:	2303      	movs	r3, #3
 800b70a:	e01b      	b.n	800b744 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	2b00      	cmp	r3, #0
 800b712:	daf2      	bge.n	800b6fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b714:	2300      	movs	r3, #0
 800b716:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	019b      	lsls	r3, r3, #6
 800b71c:	f043 0220 	orr.w	r2, r3, #32
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	3301      	adds	r3, #1
 800b728:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b730:	d901      	bls.n	800b736 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b732:	2303      	movs	r3, #3
 800b734:	e006      	b.n	800b744 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	f003 0320 	and.w	r3, r3, #32
 800b73e:	2b20      	cmp	r3, #32
 800b740:	d0f0      	beq.n	800b724 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b742:	2300      	movs	r3, #0
}
 800b744:	4618      	mov	r0, r3
 800b746:	3714      	adds	r7, #20
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b758:	2300      	movs	r3, #0
 800b75a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	3301      	adds	r3, #1
 800b760:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b768:	d901      	bls.n	800b76e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b76a:	2303      	movs	r3, #3
 800b76c:	e018      	b.n	800b7a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	691b      	ldr	r3, [r3, #16]
 800b772:	2b00      	cmp	r3, #0
 800b774:	daf2      	bge.n	800b75c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b776:	2300      	movs	r3, #0
 800b778:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2210      	movs	r2, #16
 800b77e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	3301      	adds	r3, #1
 800b784:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b78c:	d901      	bls.n	800b792 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b78e:	2303      	movs	r3, #3
 800b790:	e006      	b.n	800b7a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	f003 0310 	and.w	r3, r3, #16
 800b79a:	2b10      	cmp	r3, #16
 800b79c:	d0f0      	beq.n	800b780 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3714      	adds	r7, #20
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr

0800b7ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	78fb      	ldrb	r3, [r7, #3]
 800b7c6:	68f9      	ldr	r1, [r7, #12]
 800b7c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3714      	adds	r7, #20
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr

0800b7de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b087      	sub	sp, #28
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	f003 0306 	and.w	r3, r3, #6
 800b7f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d102      	bne.n	800b804 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b7fe:	2300      	movs	r3, #0
 800b800:	75fb      	strb	r3, [r7, #23]
 800b802:	e00a      	b.n	800b81a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b02      	cmp	r3, #2
 800b808:	d002      	beq.n	800b810 <USB_GetDevSpeed+0x32>
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b06      	cmp	r3, #6
 800b80e:	d102      	bne.n	800b816 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b810:	2302      	movs	r3, #2
 800b812:	75fb      	strb	r3, [r7, #23]
 800b814:	e001      	b.n	800b81a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b816:	230f      	movs	r3, #15
 800b818:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	371c      	adds	r7, #28
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	785b      	ldrb	r3, [r3, #1]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d139      	bne.n	800b8b8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b84a:	69da      	ldr	r2, [r3, #28]
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	f003 030f 	and.w	r3, r3, #15
 800b854:	2101      	movs	r1, #1
 800b856:	fa01 f303 	lsl.w	r3, r1, r3
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	68f9      	ldr	r1, [r7, #12]
 800b85e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b862:	4313      	orrs	r3, r2
 800b864:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	015a      	lsls	r2, r3, #5
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	4413      	add	r3, r2
 800b86e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d153      	bne.n	800b924 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	015a      	lsls	r2, r3, #5
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	4413      	add	r3, r2
 800b884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	791b      	ldrb	r3, [r3, #4]
 800b896:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b898:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	059b      	lsls	r3, r3, #22
 800b89e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b8a0:	431a      	orrs	r2, r3
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	0159      	lsls	r1, r3, #5
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	440b      	add	r3, r1
 800b8aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	4b20      	ldr	r3, [pc, #128]	@ (800b934 <USB_ActivateEndpoint+0x10c>)
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	600b      	str	r3, [r1, #0]
 800b8b6:	e035      	b.n	800b924 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8be:	69da      	ldr	r2, [r3, #28]
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	f003 030f 	and.w	r3, r3, #15
 800b8c8:	2101      	movs	r1, #1
 800b8ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ce:	041b      	lsls	r3, r3, #16
 800b8d0:	68f9      	ldr	r1, [r7, #12]
 800b8d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	015a      	lsls	r2, r3, #5
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d119      	bne.n	800b924 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	015a      	lsls	r2, r3, #5
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	791b      	ldrb	r3, [r3, #4]
 800b90a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b90c:	430b      	orrs	r3, r1
 800b90e:	431a      	orrs	r2, r3
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	0159      	lsls	r1, r3, #5
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	440b      	add	r3, r1
 800b918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b91c:	4619      	mov	r1, r3
 800b91e:	4b05      	ldr	r3, [pc, #20]	@ (800b934 <USB_ActivateEndpoint+0x10c>)
 800b920:	4313      	orrs	r3, r2
 800b922:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3714      	adds	r7, #20
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	10008000 	.word	0x10008000

0800b938 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	785b      	ldrb	r3, [r3, #1]
 800b950:	2b01      	cmp	r3, #1
 800b952:	d161      	bne.n	800ba18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	015a      	lsls	r2, r3, #5
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	4413      	add	r3, r2
 800b95c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b966:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b96a:	d11f      	bne.n	800b9ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	015a      	lsls	r2, r3, #5
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	4413      	add	r3, r2
 800b974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	0151      	lsls	r1, r2, #5
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	440a      	add	r2, r1
 800b982:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b986:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b98a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	015a      	lsls	r2, r3, #5
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	4413      	add	r3, r2
 800b994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	0151      	lsls	r1, r2, #5
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	440a      	add	r2, r1
 800b9a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b9aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	f003 030f 	and.w	r3, r3, #15
 800b9bc:	2101      	movs	r1, #1
 800b9be:	fa01 f303 	lsl.w	r3, r1, r3
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	43db      	mvns	r3, r3
 800b9c6:	68f9      	ldr	r1, [r7, #12]
 800b9c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9d6:	69da      	ldr	r2, [r3, #28]
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	f003 030f 	and.w	r3, r3, #15
 800b9e0:	2101      	movs	r1, #1
 800b9e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	43db      	mvns	r3, r3
 800b9ea:	68f9      	ldr	r1, [r7, #12]
 800b9ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	015a      	lsls	r2, r3, #5
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	0159      	lsls	r1, r3, #5
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	440b      	add	r3, r1
 800ba0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba0e:	4619      	mov	r1, r3
 800ba10:	4b35      	ldr	r3, [pc, #212]	@ (800bae8 <USB_DeactivateEndpoint+0x1b0>)
 800ba12:	4013      	ands	r3, r2
 800ba14:	600b      	str	r3, [r1, #0]
 800ba16:	e060      	b.n	800bada <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	015a      	lsls	r2, r3, #5
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	4413      	add	r3, r2
 800ba20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba2e:	d11f      	bne.n	800ba70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	015a      	lsls	r2, r3, #5
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	4413      	add	r3, r2
 800ba38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	0151      	lsls	r1, r2, #5
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	440a      	add	r2, r1
 800ba46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ba4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	015a      	lsls	r2, r3, #5
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	4413      	add	r3, r2
 800ba58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	68ba      	ldr	r2, [r7, #8]
 800ba60:	0151      	lsls	r1, r2, #5
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	440a      	add	r2, r1
 800ba66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ba6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	f003 030f 	and.w	r3, r3, #15
 800ba80:	2101      	movs	r1, #1
 800ba82:	fa01 f303 	lsl.w	r3, r1, r3
 800ba86:	041b      	lsls	r3, r3, #16
 800ba88:	43db      	mvns	r3, r3
 800ba8a:	68f9      	ldr	r1, [r7, #12]
 800ba8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ba90:	4013      	ands	r3, r2
 800ba92:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba9a:	69da      	ldr	r2, [r3, #28]
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	f003 030f 	and.w	r3, r3, #15
 800baa4:	2101      	movs	r1, #1
 800baa6:	fa01 f303 	lsl.w	r3, r1, r3
 800baaa:	041b      	lsls	r3, r3, #16
 800baac:	43db      	mvns	r3, r3
 800baae:	68f9      	ldr	r1, [r7, #12]
 800bab0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bab4:	4013      	ands	r3, r2
 800bab6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	015a      	lsls	r2, r3, #5
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	4413      	add	r3, r2
 800bac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	0159      	lsls	r1, r3, #5
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	440b      	add	r3, r1
 800bace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bad2:	4619      	mov	r1, r3
 800bad4:	4b05      	ldr	r3, [pc, #20]	@ (800baec <USB_DeactivateEndpoint+0x1b4>)
 800bad6:	4013      	ands	r3, r2
 800bad8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3714      	adds	r7, #20
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr
 800bae8:	ec337800 	.word	0xec337800
 800baec:	eff37800 	.word	0xeff37800

0800baf0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b08a      	sub	sp, #40	@ 0x28
 800baf4:	af02      	add	r7, sp, #8
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	4613      	mov	r3, r2
 800bafc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	785b      	ldrb	r3, [r3, #1]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	f040 8181 	bne.w	800be14 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d132      	bne.n	800bb80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	015a      	lsls	r2, r3, #5
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	4413      	add	r3, r2
 800bb22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb26:	691a      	ldr	r2, [r3, #16]
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	0159      	lsls	r1, r3, #5
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	440b      	add	r3, r1
 800bb30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb34:	4619      	mov	r1, r3
 800bb36:	4ba5      	ldr	r3, [pc, #660]	@ (800bdcc <USB_EPStartXfer+0x2dc>)
 800bb38:	4013      	ands	r3, r2
 800bb3a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	015a      	lsls	r2, r3, #5
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	4413      	add	r3, r2
 800bb44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	69ba      	ldr	r2, [r7, #24]
 800bb4c:	0151      	lsls	r1, r2, #5
 800bb4e:	69fa      	ldr	r2, [r7, #28]
 800bb50:	440a      	add	r2, r1
 800bb52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bb5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb68:	691a      	ldr	r2, [r3, #16]
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	0159      	lsls	r1, r3, #5
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	440b      	add	r3, r1
 800bb72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb76:	4619      	mov	r1, r3
 800bb78:	4b95      	ldr	r3, [pc, #596]	@ (800bdd0 <USB_EPStartXfer+0x2e0>)
 800bb7a:	4013      	ands	r3, r2
 800bb7c:	610b      	str	r3, [r1, #16]
 800bb7e:	e092      	b.n	800bca6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	015a      	lsls	r2, r3, #5
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	4413      	add	r3, r2
 800bb88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb8c:	691a      	ldr	r2, [r3, #16]
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	0159      	lsls	r1, r3, #5
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	440b      	add	r3, r1
 800bb96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	4b8c      	ldr	r3, [pc, #560]	@ (800bdd0 <USB_EPStartXfer+0x2e0>)
 800bb9e:	4013      	ands	r3, r2
 800bba0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bba2:	69bb      	ldr	r3, [r7, #24]
 800bba4:	015a      	lsls	r2, r3, #5
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	4413      	add	r3, r2
 800bbaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbae:	691a      	ldr	r2, [r3, #16]
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	0159      	lsls	r1, r3, #5
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	440b      	add	r3, r1
 800bbb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	4b83      	ldr	r3, [pc, #524]	@ (800bdcc <USB_EPStartXfer+0x2dc>)
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d11a      	bne.n	800bc00 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	691a      	ldr	r2, [r3, #16]
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d903      	bls.n	800bbde <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	689a      	ldr	r2, [r3, #8]
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	015a      	lsls	r2, r3, #5
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbea:	691b      	ldr	r3, [r3, #16]
 800bbec:	69ba      	ldr	r2, [r7, #24]
 800bbee:	0151      	lsls	r1, r2, #5
 800bbf0:	69fa      	ldr	r2, [r7, #28]
 800bbf2:	440a      	add	r2, r1
 800bbf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bbf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bbfc:	6113      	str	r3, [r2, #16]
 800bbfe:	e01b      	b.n	800bc38 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	015a      	lsls	r2, r3, #5
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	4413      	add	r3, r2
 800bc08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc0c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	6919      	ldr	r1, [r3, #16]
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	440b      	add	r3, r1
 800bc18:	1e59      	subs	r1, r3, #1
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc22:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bc24:	4b6b      	ldr	r3, [pc, #428]	@ (800bdd4 <USB_EPStartXfer+0x2e4>)
 800bc26:	400b      	ands	r3, r1
 800bc28:	69b9      	ldr	r1, [r7, #24]
 800bc2a:	0148      	lsls	r0, r1, #5
 800bc2c:	69f9      	ldr	r1, [r7, #28]
 800bc2e:	4401      	add	r1, r0
 800bc30:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bc34:	4313      	orrs	r3, r2
 800bc36:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bc38:	69bb      	ldr	r3, [r7, #24]
 800bc3a:	015a      	lsls	r2, r3, #5
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	4413      	add	r3, r2
 800bc40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc44:	691a      	ldr	r2, [r3, #16]
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	691b      	ldr	r3, [r3, #16]
 800bc4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc4e:	69b9      	ldr	r1, [r7, #24]
 800bc50:	0148      	lsls	r0, r1, #5
 800bc52:	69f9      	ldr	r1, [r7, #28]
 800bc54:	4401      	add	r1, r0
 800bc56:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	791b      	ldrb	r3, [r3, #4]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d11f      	bne.n	800bca6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	015a      	lsls	r2, r3, #5
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc72:	691b      	ldr	r3, [r3, #16]
 800bc74:	69ba      	ldr	r2, [r7, #24]
 800bc76:	0151      	lsls	r1, r2, #5
 800bc78:	69fa      	ldr	r2, [r7, #28]
 800bc7a:	440a      	add	r2, r1
 800bc7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc80:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800bc84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	015a      	lsls	r2, r3, #5
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	69ba      	ldr	r2, [r7, #24]
 800bc96:	0151      	lsls	r1, r2, #5
 800bc98:	69fa      	ldr	r2, [r7, #28]
 800bc9a:	440a      	add	r2, r1
 800bc9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bca0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bca4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bca6:	79fb      	ldrb	r3, [r7, #7]
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d14b      	bne.n	800bd44 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	69db      	ldr	r3, [r3, #28]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d009      	beq.n	800bcc8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	015a      	lsls	r2, r3, #5
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	4413      	add	r3, r2
 800bcbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	69db      	ldr	r3, [r3, #28]
 800bcc6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	791b      	ldrb	r3, [r3, #4]
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d128      	bne.n	800bd22 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d110      	bne.n	800bd02 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	015a      	lsls	r2, r3, #5
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	4413      	add	r3, r2
 800bce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	69ba      	ldr	r2, [r7, #24]
 800bcf0:	0151      	lsls	r1, r2, #5
 800bcf2:	69fa      	ldr	r2, [r7, #28]
 800bcf4:	440a      	add	r2, r1
 800bcf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bcfa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bcfe:	6013      	str	r3, [r2, #0]
 800bd00:	e00f      	b.n	800bd22 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	015a      	lsls	r2, r3, #5
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	4413      	add	r3, r2
 800bd0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	69ba      	ldr	r2, [r7, #24]
 800bd12:	0151      	lsls	r1, r2, #5
 800bd14:	69fa      	ldr	r2, [r7, #28]
 800bd16:	440a      	add	r2, r1
 800bd18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd20:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	015a      	lsls	r2, r3, #5
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	4413      	add	r3, r2
 800bd2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	69ba      	ldr	r2, [r7, #24]
 800bd32:	0151      	lsls	r1, r2, #5
 800bd34:	69fa      	ldr	r2, [r7, #28]
 800bd36:	440a      	add	r2, r1
 800bd38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd3c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bd40:	6013      	str	r3, [r2, #0]
 800bd42:	e16a      	b.n	800c01a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd44:	69bb      	ldr	r3, [r7, #24]
 800bd46:	015a      	lsls	r2, r3, #5
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	69ba      	ldr	r2, [r7, #24]
 800bd54:	0151      	lsls	r1, r2, #5
 800bd56:	69fa      	ldr	r2, [r7, #28]
 800bd58:	440a      	add	r2, r1
 800bd5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd5e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bd62:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	791b      	ldrb	r3, [r3, #4]
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d015      	beq.n	800bd98 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	691b      	ldr	r3, [r3, #16]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 8152 	beq.w	800c01a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	f003 030f 	and.w	r3, r3, #15
 800bd86:	2101      	movs	r1, #1
 800bd88:	fa01 f303 	lsl.w	r3, r1, r3
 800bd8c:	69f9      	ldr	r1, [r7, #28]
 800bd8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd92:	4313      	orrs	r3, r2
 800bd94:	634b      	str	r3, [r1, #52]	@ 0x34
 800bd96:	e140      	b.n	800c01a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d117      	bne.n	800bdd8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bda8:	69bb      	ldr	r3, [r7, #24]
 800bdaa:	015a      	lsls	r2, r3, #5
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	4413      	add	r3, r2
 800bdb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	69ba      	ldr	r2, [r7, #24]
 800bdb8:	0151      	lsls	r1, r2, #5
 800bdba:	69fa      	ldr	r2, [r7, #28]
 800bdbc:	440a      	add	r2, r1
 800bdbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bdc2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bdc6:	6013      	str	r3, [r2, #0]
 800bdc8:	e016      	b.n	800bdf8 <USB_EPStartXfer+0x308>
 800bdca:	bf00      	nop
 800bdcc:	e007ffff 	.word	0xe007ffff
 800bdd0:	fff80000 	.word	0xfff80000
 800bdd4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	015a      	lsls	r2, r3, #5
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	4413      	add	r3, r2
 800bde0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	69ba      	ldr	r2, [r7, #24]
 800bde8:	0151      	lsls	r1, r2, #5
 800bdea:	69fa      	ldr	r2, [r7, #28]
 800bdec:	440a      	add	r2, r1
 800bdee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bdf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bdf6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	68d9      	ldr	r1, [r3, #12]
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	781a      	ldrb	r2, [r3, #0]
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	691b      	ldr	r3, [r3, #16]
 800be04:	b298      	uxth	r0, r3
 800be06:	79fb      	ldrb	r3, [r7, #7]
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	4603      	mov	r3, r0
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f000 f9b9 	bl	800c184 <USB_WritePacket>
 800be12:	e102      	b.n	800c01a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	015a      	lsls	r2, r3, #5
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	4413      	add	r3, r2
 800be1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be20:	691a      	ldr	r2, [r3, #16]
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	0159      	lsls	r1, r3, #5
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	440b      	add	r3, r1
 800be2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be2e:	4619      	mov	r1, r3
 800be30:	4b7c      	ldr	r3, [pc, #496]	@ (800c024 <USB_EPStartXfer+0x534>)
 800be32:	4013      	ands	r3, r2
 800be34:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	015a      	lsls	r2, r3, #5
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	4413      	add	r3, r2
 800be3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be42:	691a      	ldr	r2, [r3, #16]
 800be44:	69bb      	ldr	r3, [r7, #24]
 800be46:	0159      	lsls	r1, r3, #5
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	440b      	add	r3, r1
 800be4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be50:	4619      	mov	r1, r3
 800be52:	4b75      	ldr	r3, [pc, #468]	@ (800c028 <USB_EPStartXfer+0x538>)
 800be54:	4013      	ands	r3, r2
 800be56:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d12f      	bne.n	800bebe <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d003      	beq.n	800be6e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	689a      	ldr	r2, [r3, #8]
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	689a      	ldr	r2, [r3, #8]
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	015a      	lsls	r2, r3, #5
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	4413      	add	r3, r2
 800be7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be82:	691a      	ldr	r2, [r3, #16]
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	6a1b      	ldr	r3, [r3, #32]
 800be88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be8c:	69b9      	ldr	r1, [r7, #24]
 800be8e:	0148      	lsls	r0, r1, #5
 800be90:	69f9      	ldr	r1, [r7, #28]
 800be92:	4401      	add	r1, r0
 800be94:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800be98:	4313      	orrs	r3, r2
 800be9a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	015a      	lsls	r2, r3, #5
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	4413      	add	r3, r2
 800bea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bea8:	691b      	ldr	r3, [r3, #16]
 800beaa:	69ba      	ldr	r2, [r7, #24]
 800beac:	0151      	lsls	r1, r2, #5
 800beae:	69fa      	ldr	r2, [r7, #28]
 800beb0:	440a      	add	r2, r1
 800beb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800beb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800beba:	6113      	str	r3, [r2, #16]
 800bebc:	e05f      	b.n	800bf7e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d123      	bne.n	800bf0e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	015a      	lsls	r2, r3, #5
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	4413      	add	r3, r2
 800bece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bed2:	691a      	ldr	r2, [r3, #16]
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bedc:	69b9      	ldr	r1, [r7, #24]
 800bede:	0148      	lsls	r0, r1, #5
 800bee0:	69f9      	ldr	r1, [r7, #28]
 800bee2:	4401      	add	r1, r0
 800bee4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bee8:	4313      	orrs	r3, r2
 800beea:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	015a      	lsls	r2, r3, #5
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	4413      	add	r3, r2
 800bef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	69ba      	ldr	r2, [r7, #24]
 800befc:	0151      	lsls	r1, r2, #5
 800befe:	69fa      	ldr	r2, [r7, #28]
 800bf00:	440a      	add	r2, r1
 800bf02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bf0a:	6113      	str	r3, [r2, #16]
 800bf0c:	e037      	b.n	800bf7e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	691a      	ldr	r2, [r3, #16]
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	4413      	add	r3, r2
 800bf18:	1e5a      	subs	r2, r3, #1
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf22:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	8afa      	ldrh	r2, [r7, #22]
 800bf2a:	fb03 f202 	mul.w	r2, r3, r2
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	015a      	lsls	r2, r3, #5
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	4413      	add	r3, r2
 800bf3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf3e:	691a      	ldr	r2, [r3, #16]
 800bf40:	8afb      	ldrh	r3, [r7, #22]
 800bf42:	04d9      	lsls	r1, r3, #19
 800bf44:	4b39      	ldr	r3, [pc, #228]	@ (800c02c <USB_EPStartXfer+0x53c>)
 800bf46:	400b      	ands	r3, r1
 800bf48:	69b9      	ldr	r1, [r7, #24]
 800bf4a:	0148      	lsls	r0, r1, #5
 800bf4c:	69f9      	ldr	r1, [r7, #28]
 800bf4e:	4401      	add	r1, r0
 800bf50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bf54:	4313      	orrs	r3, r2
 800bf56:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	015a      	lsls	r2, r3, #5
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	4413      	add	r3, r2
 800bf60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf64:	691a      	ldr	r2, [r3, #16]
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	6a1b      	ldr	r3, [r3, #32]
 800bf6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf6e:	69b9      	ldr	r1, [r7, #24]
 800bf70:	0148      	lsls	r0, r1, #5
 800bf72:	69f9      	ldr	r1, [r7, #28]
 800bf74:	4401      	add	r1, r0
 800bf76:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800bf7e:	79fb      	ldrb	r3, [r7, #7]
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d10d      	bne.n	800bfa0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d009      	beq.n	800bfa0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	68d9      	ldr	r1, [r3, #12]
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf9c:	460a      	mov	r2, r1
 800bf9e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	791b      	ldrb	r3, [r3, #4]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d128      	bne.n	800bffa <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d110      	bne.n	800bfda <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	015a      	lsls	r2, r3, #5
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	69ba      	ldr	r2, [r7, #24]
 800bfc8:	0151      	lsls	r1, r2, #5
 800bfca:	69fa      	ldr	r2, [r7, #28]
 800bfcc:	440a      	add	r2, r1
 800bfce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bfd2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bfd6:	6013      	str	r3, [r2, #0]
 800bfd8:	e00f      	b.n	800bffa <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	015a      	lsls	r2, r3, #5
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	69ba      	ldr	r2, [r7, #24]
 800bfea:	0151      	lsls	r1, r2, #5
 800bfec:	69fa      	ldr	r2, [r7, #28]
 800bfee:	440a      	add	r2, r1
 800bff0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bff8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	015a      	lsls	r2, r3, #5
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	4413      	add	r3, r2
 800c002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	69ba      	ldr	r2, [r7, #24]
 800c00a:	0151      	lsls	r1, r2, #5
 800c00c:	69fa      	ldr	r2, [r7, #28]
 800c00e:	440a      	add	r2, r1
 800c010:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c014:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c018:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3720      	adds	r7, #32
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	fff80000 	.word	0xfff80000
 800c028:	e007ffff 	.word	0xe007ffff
 800c02c:	1ff80000 	.word	0x1ff80000

0800c030 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c030:	b480      	push	{r7}
 800c032:	b087      	sub	sp, #28
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c03a:	2300      	movs	r3, #0
 800c03c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c03e:	2300      	movs	r3, #0
 800c040:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	785b      	ldrb	r3, [r3, #1]
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d14a      	bne.n	800c0e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	015a      	lsls	r2, r3, #5
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	4413      	add	r3, r2
 800c058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c062:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c066:	f040 8086 	bne.w	800c176 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	015a      	lsls	r2, r3, #5
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	4413      	add	r3, r2
 800c074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	683a      	ldr	r2, [r7, #0]
 800c07c:	7812      	ldrb	r2, [r2, #0]
 800c07e:	0151      	lsls	r1, r2, #5
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	440a      	add	r2, r1
 800c084:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c088:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c08c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	015a      	lsls	r2, r3, #5
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	4413      	add	r3, r2
 800c098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	683a      	ldr	r2, [r7, #0]
 800c0a0:	7812      	ldrb	r2, [r2, #0]
 800c0a2:	0151      	lsls	r1, r2, #5
 800c0a4:	693a      	ldr	r2, [r7, #16]
 800c0a6:	440a      	add	r2, r1
 800c0a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c0ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c0b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d902      	bls.n	800c0c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	75fb      	strb	r3, [r7, #23]
          break;
 800c0c6:	e056      	b.n	800c176 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	015a      	lsls	r2, r3, #5
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c0dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c0e0:	d0e7      	beq.n	800c0b2 <USB_EPStopXfer+0x82>
 800c0e2:	e048      	b.n	800c176 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	015a      	lsls	r2, r3, #5
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c0f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c0fc:	d13b      	bne.n	800c176 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	015a      	lsls	r2, r3, #5
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	4413      	add	r3, r2
 800c108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	7812      	ldrb	r2, [r2, #0]
 800c112:	0151      	lsls	r1, r2, #5
 800c114:	693a      	ldr	r2, [r7, #16]
 800c116:	440a      	add	r2, r1
 800c118:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c11c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c120:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	015a      	lsls	r2, r3, #5
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	4413      	add	r3, r2
 800c12c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	683a      	ldr	r2, [r7, #0]
 800c134:	7812      	ldrb	r2, [r2, #0]
 800c136:	0151      	lsls	r1, r2, #5
 800c138:	693a      	ldr	r2, [r7, #16]
 800c13a:	440a      	add	r2, r1
 800c13c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c140:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c144:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	3301      	adds	r3, #1
 800c14a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c152:	4293      	cmp	r3, r2
 800c154:	d902      	bls.n	800c15c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	75fb      	strb	r3, [r7, #23]
          break;
 800c15a:	e00c      	b.n	800c176 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	015a      	lsls	r2, r3, #5
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	4413      	add	r3, r2
 800c166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c170:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c174:	d0e7      	beq.n	800c146 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c176:	7dfb      	ldrb	r3, [r7, #23]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	371c      	adds	r7, #28
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c184:	b480      	push	{r7}
 800c186:	b089      	sub	sp, #36	@ 0x24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	4611      	mov	r1, r2
 800c190:	461a      	mov	r2, r3
 800c192:	460b      	mov	r3, r1
 800c194:	71fb      	strb	r3, [r7, #7]
 800c196:	4613      	mov	r3, r2
 800c198:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c1a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d123      	bne.n	800c1f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c1aa:	88bb      	ldrh	r3, [r7, #4]
 800c1ac:	3303      	adds	r3, #3
 800c1ae:	089b      	lsrs	r3, r3, #2
 800c1b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	61bb      	str	r3, [r7, #24]
 800c1b6:	e018      	b.n	800c1ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c1b8:	79fb      	ldrb	r3, [r7, #7]
 800c1ba:	031a      	lsls	r2, r3, #12
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	4413      	add	r3, r2
 800c1c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	61bb      	str	r3, [r7, #24]
 800c1ea:	69ba      	ldr	r2, [r7, #24]
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d3e2      	bcc.n	800c1b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c1f2:	2300      	movs	r3, #0
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3724      	adds	r7, #36	@ 0x24
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c200:	b480      	push	{r7}
 800c202:	b08b      	sub	sp, #44	@ 0x2c
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	4613      	mov	r3, r2
 800c20c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c216:	88fb      	ldrh	r3, [r7, #6]
 800c218:	089b      	lsrs	r3, r3, #2
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c21e:	88fb      	ldrh	r3, [r7, #6]
 800c220:	f003 0303 	and.w	r3, r3, #3
 800c224:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c226:	2300      	movs	r3, #0
 800c228:	623b      	str	r3, [r7, #32]
 800c22a:	e014      	b.n	800c256 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c236:	601a      	str	r2, [r3, #0]
    pDest++;
 800c238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23a:	3301      	adds	r3, #1
 800c23c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c240:	3301      	adds	r3, #1
 800c242:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c246:	3301      	adds	r3, #1
 800c248:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c24c:	3301      	adds	r3, #1
 800c24e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c250:	6a3b      	ldr	r3, [r7, #32]
 800c252:	3301      	adds	r3, #1
 800c254:	623b      	str	r3, [r7, #32]
 800c256:	6a3a      	ldr	r2, [r7, #32]
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d3e6      	bcc.n	800c22c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c25e:	8bfb      	ldrh	r3, [r7, #30]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d01e      	beq.n	800c2a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c264:	2300      	movs	r3, #0
 800c266:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c26e:	461a      	mov	r2, r3
 800c270:	f107 0310 	add.w	r3, r7, #16
 800c274:	6812      	ldr	r2, [r2, #0]
 800c276:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	6a3b      	ldr	r3, [r7, #32]
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	00db      	lsls	r3, r3, #3
 800c280:	fa22 f303 	lsr.w	r3, r2, r3
 800c284:	b2da      	uxtb	r2, r3
 800c286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c288:	701a      	strb	r2, [r3, #0]
      i++;
 800c28a:	6a3b      	ldr	r3, [r7, #32]
 800c28c:	3301      	adds	r3, #1
 800c28e:	623b      	str	r3, [r7, #32]
      pDest++;
 800c290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c292:	3301      	adds	r3, #1
 800c294:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c296:	8bfb      	ldrh	r3, [r7, #30]
 800c298:	3b01      	subs	r3, #1
 800c29a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c29c:	8bfb      	ldrh	r3, [r7, #30]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1ea      	bne.n	800c278 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	372c      	adds	r7, #44	@ 0x2c
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	785b      	ldrb	r3, [r3, #1]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d12c      	bne.n	800c326 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	015a      	lsls	r2, r3, #5
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	db12      	blt.n	800c304 <USB_EPSetStall+0x54>
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00f      	beq.n	800c304 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	015a      	lsls	r2, r3, #5
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	68ba      	ldr	r2, [r7, #8]
 800c2f4:	0151      	lsls	r1, r2, #5
 800c2f6:	68fa      	ldr	r2, [r7, #12]
 800c2f8:	440a      	add	r2, r1
 800c2fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c2fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c302:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	015a      	lsls	r2, r3, #5
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	4413      	add	r3, r2
 800c30c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	0151      	lsls	r1, r2, #5
 800c316:	68fa      	ldr	r2, [r7, #12]
 800c318:	440a      	add	r2, r1
 800c31a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c31e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c322:	6013      	str	r3, [r2, #0]
 800c324:	e02b      	b.n	800c37e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	015a      	lsls	r2, r3, #5
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	4413      	add	r3, r2
 800c32e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	db12      	blt.n	800c35e <USB_EPSetStall+0xae>
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00f      	beq.n	800c35e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	015a      	lsls	r2, r3, #5
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	4413      	add	r3, r2
 800c346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	0151      	lsls	r1, r2, #5
 800c350:	68fa      	ldr	r2, [r7, #12]
 800c352:	440a      	add	r2, r1
 800c354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c358:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c35c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	015a      	lsls	r2, r3, #5
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	4413      	add	r3, r2
 800c366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	68ba      	ldr	r2, [r7, #8]
 800c36e:	0151      	lsls	r1, r2, #5
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	440a      	add	r2, r1
 800c374:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c378:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c37c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3714      	adds	r7, #20
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b085      	sub	sp, #20
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	785b      	ldrb	r3, [r3, #1]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d128      	bne.n	800c3fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	015a      	lsls	r2, r3, #5
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	68ba      	ldr	r2, [r7, #8]
 800c3b8:	0151      	lsls	r1, r2, #5
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	440a      	add	r2, r1
 800c3be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c3c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c3c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	791b      	ldrb	r3, [r3, #4]
 800c3cc:	2b03      	cmp	r3, #3
 800c3ce:	d003      	beq.n	800c3d8 <USB_EPClearStall+0x4c>
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	791b      	ldrb	r3, [r3, #4]
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d138      	bne.n	800c44a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	015a      	lsls	r2, r3, #5
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	4413      	add	r3, r2
 800c3e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	0151      	lsls	r1, r2, #5
 800c3ea:	68fa      	ldr	r2, [r7, #12]
 800c3ec:	440a      	add	r2, r1
 800c3ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c3f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c3f6:	6013      	str	r3, [r2, #0]
 800c3f8:	e027      	b.n	800c44a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	015a      	lsls	r2, r3, #5
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	4413      	add	r3, r2
 800c402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	0151      	lsls	r1, r2, #5
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	440a      	add	r2, r1
 800c410:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c414:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c418:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	791b      	ldrb	r3, [r3, #4]
 800c41e:	2b03      	cmp	r3, #3
 800c420:	d003      	beq.n	800c42a <USB_EPClearStall+0x9e>
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	791b      	ldrb	r3, [r3, #4]
 800c426:	2b02      	cmp	r3, #2
 800c428:	d10f      	bne.n	800c44a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	015a      	lsls	r2, r3, #5
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	4413      	add	r3, r2
 800c432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	0151      	lsls	r1, r2, #5
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	440a      	add	r2, r1
 800c440:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c448:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3714      	adds	r7, #20
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c458:	b480      	push	{r7}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	460b      	mov	r3, r1
 800c462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c476:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c47a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	78fb      	ldrb	r3, [r7, #3]
 800c486:	011b      	lsls	r3, r3, #4
 800c488:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c48c:	68f9      	ldr	r1, [r7, #12]
 800c48e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c492:	4313      	orrs	r3, r2
 800c494:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3714      	adds	r7, #20
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c4be:	f023 0303 	bic.w	r3, r3, #3
 800c4c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c4d2:	f023 0302 	bic.w	r3, r3, #2
 800c4d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3714      	adds	r7, #20
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c4e6:	b480      	push	{r7}
 800c4e8:	b085      	sub	sp, #20
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c500:	f023 0303 	bic.w	r3, r3, #3
 800c504:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c514:	f043 0302 	orr.w	r3, r3, #2
 800c518:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3714      	adds	r7, #20
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c528:	b480      	push	{r7}
 800c52a:	b085      	sub	sp, #20
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	695b      	ldr	r3, [r3, #20]
 800c534:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	699b      	ldr	r3, [r3, #24]
 800c53a:	68fa      	ldr	r2, [r7, #12]
 800c53c:	4013      	ands	r3, r2
 800c53e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c540:	68fb      	ldr	r3, [r7, #12]
}
 800c542:	4618      	mov	r0, r3
 800c544:	3714      	adds	r7, #20
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr

0800c54e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c54e:	b480      	push	{r7}
 800c550:	b085      	sub	sp, #20
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c56a:	69db      	ldr	r3, [r3, #28]
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	4013      	ands	r3, r2
 800c570:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	0c1b      	lsrs	r3, r3, #16
}
 800c576:	4618      	mov	r0, r3
 800c578:	3714      	adds	r7, #20
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr

0800c582 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c582:	b480      	push	{r7}
 800c584:	b085      	sub	sp, #20
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c594:	699b      	ldr	r3, [r3, #24]
 800c596:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c59e:	69db      	ldr	r3, [r3, #28]
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	4013      	ands	r3, r2
 800c5a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	b29b      	uxth	r3, r3
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3714      	adds	r7, #20
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr

0800c5b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c5b6:	b480      	push	{r7}
 800c5b8:	b085      	sub	sp, #20
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	460b      	mov	r3, r1
 800c5c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c5c6:	78fb      	ldrb	r3, [r7, #3]
 800c5c8:	015a      	lsls	r2, r3, #5
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5dc:	695b      	ldr	r3, [r3, #20]
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	4013      	ands	r3, r2
 800c5e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c5e4:	68bb      	ldr	r3, [r7, #8]
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3714      	adds	r7, #20
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c5f2:	b480      	push	{r7}
 800c5f4:	b087      	sub	sp, #28
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c608:	691b      	ldr	r3, [r3, #16]
 800c60a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c614:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c616:	78fb      	ldrb	r3, [r7, #3]
 800c618:	f003 030f 	and.w	r3, r3, #15
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	fa22 f303 	lsr.w	r3, r2, r3
 800c622:	01db      	lsls	r3, r3, #7
 800c624:	b2db      	uxtb	r3, r3
 800c626:	693a      	ldr	r2, [r7, #16]
 800c628:	4313      	orrs	r3, r2
 800c62a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c62c:	78fb      	ldrb	r3, [r7, #3]
 800c62e:	015a      	lsls	r2, r3, #5
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	4413      	add	r3, r2
 800c634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	693a      	ldr	r2, [r7, #16]
 800c63c:	4013      	ands	r3, r2
 800c63e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c640:	68bb      	ldr	r3, [r7, #8]
}
 800c642:	4618      	mov	r0, r3
 800c644:	371c      	adds	r7, #28
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr

0800c64e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c64e:	b480      	push	{r7}
 800c650:	b083      	sub	sp, #12
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	695b      	ldr	r3, [r3, #20]
 800c65a:	f003 0301 	and.w	r3, r3, #1
}
 800c65e:	4618      	mov	r0, r3
 800c660:	370c      	adds	r7, #12
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
	...

0800c66c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b085      	sub	sp, #20
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c686:	4619      	mov	r1, r3
 800c688:	4b09      	ldr	r3, [pc, #36]	@ (800c6b0 <USB_ActivateSetup+0x44>)
 800c68a:	4013      	ands	r3, r2
 800c68c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	68fa      	ldr	r2, [r7, #12]
 800c698:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c69c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c6a2:	2300      	movs	r3, #0
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr
 800c6b0:	fffff800 	.word	0xfffff800

0800c6b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b087      	sub	sp, #28
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	607a      	str	r2, [r7, #4]
 800c6c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	333c      	adds	r3, #60	@ 0x3c
 800c6ca:	3304      	adds	r3, #4
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	4a26      	ldr	r2, [pc, #152]	@ (800c76c <USB_EP0_OutStart+0xb8>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d90a      	bls.n	800c6ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c6e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c6e8:	d101      	bne.n	800c6ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	e037      	b.n	800c75e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c700:	691b      	ldr	r3, [r3, #16]
 800c702:	697a      	ldr	r2, [r7, #20]
 800c704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c708:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c70c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c714:	691b      	ldr	r3, [r3, #16]
 800c716:	697a      	ldr	r2, [r7, #20]
 800c718:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c71c:	f043 0318 	orr.w	r3, r3, #24
 800c720:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	697a      	ldr	r2, [r7, #20]
 800c72c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c730:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c734:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c736:	7afb      	ldrb	r3, [r7, #11]
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d10f      	bne.n	800c75c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c742:	461a      	mov	r2, r3
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	697a      	ldr	r2, [r7, #20]
 800c752:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c756:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c75a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	371c      	adds	r7, #28
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop
 800c76c:	4f54300a 	.word	0x4f54300a

0800c770 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c778:	2300      	movs	r3, #0
 800c77a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	3301      	adds	r3, #1
 800c780:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c788:	d901      	bls.n	800c78e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c78a:	2303      	movs	r3, #3
 800c78c:	e01b      	b.n	800c7c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	691b      	ldr	r3, [r3, #16]
 800c792:	2b00      	cmp	r3, #0
 800c794:	daf2      	bge.n	800c77c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c796:	2300      	movs	r3, #0
 800c798:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	691b      	ldr	r3, [r3, #16]
 800c79e:	f043 0201 	orr.w	r2, r3, #1
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c7b2:	d901      	bls.n	800c7b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c7b4:	2303      	movs	r3, #3
 800c7b6:	e006      	b.n	800c7c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	691b      	ldr	r3, [r3, #16]
 800c7bc:	f003 0301 	and.w	r3, r3, #1
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d0f0      	beq.n	800c7a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
	...

0800c7d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c7e0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c7e4:	f002 fd8a 	bl	800f2fc <malloc>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d109      	bne.n	800c806 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	32b0      	adds	r2, #176	@ 0xb0
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c802:	2302      	movs	r3, #2
 800c804:	e0d4      	b.n	800c9b0 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c806:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c80a:	2100      	movs	r1, #0
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f003 ff29 	bl	8010664 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	32b0      	adds	r2, #176	@ 0xb0
 800c81c:	68f9      	ldr	r1, [r7, #12]
 800c81e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	32b0      	adds	r2, #176	@ 0xb0
 800c82c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	7c1b      	ldrb	r3, [r3, #16]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d138      	bne.n	800c8b0 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c83e:	4b5e      	ldr	r3, [pc, #376]	@ (800c9b8 <USBD_CDC_Init+0x1e4>)
 800c840:	7819      	ldrb	r1, [r3, #0]
 800c842:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c846:	2202      	movs	r2, #2
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f002 fbb4 	bl	800efb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c84e:	4b5a      	ldr	r3, [pc, #360]	@ (800c9b8 <USBD_CDC_Init+0x1e4>)
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	f003 020f 	and.w	r2, r3, #15
 800c856:	6879      	ldr	r1, [r7, #4]
 800c858:	4613      	mov	r3, r2
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	4413      	add	r3, r2
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	440b      	add	r3, r1
 800c862:	3324      	adds	r3, #36	@ 0x24
 800c864:	2201      	movs	r2, #1
 800c866:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c868:	4b54      	ldr	r3, [pc, #336]	@ (800c9bc <USBD_CDC_Init+0x1e8>)
 800c86a:	7819      	ldrb	r1, [r3, #0]
 800c86c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c870:	2202      	movs	r2, #2
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f002 fb9f 	bl	800efb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c878:	4b50      	ldr	r3, [pc, #320]	@ (800c9bc <USBD_CDC_Init+0x1e8>)
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	f003 020f 	and.w	r2, r3, #15
 800c880:	6879      	ldr	r1, [r7, #4]
 800c882:	4613      	mov	r3, r2
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	4413      	add	r3, r2
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	440b      	add	r3, r1
 800c88c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c890:	2201      	movs	r2, #1
 800c892:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c894:	4b4a      	ldr	r3, [pc, #296]	@ (800c9c0 <USBD_CDC_Init+0x1ec>)
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	f003 020f 	and.w	r2, r3, #15
 800c89c:	6879      	ldr	r1, [r7, #4]
 800c89e:	4613      	mov	r3, r2
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	4413      	add	r3, r2
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	440b      	add	r3, r1
 800c8a8:	3326      	adds	r3, #38	@ 0x26
 800c8aa:	2210      	movs	r2, #16
 800c8ac:	801a      	strh	r2, [r3, #0]
 800c8ae:	e035      	b.n	800c91c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c8b0:	4b41      	ldr	r3, [pc, #260]	@ (800c9b8 <USBD_CDC_Init+0x1e4>)
 800c8b2:	7819      	ldrb	r1, [r3, #0]
 800c8b4:	2340      	movs	r3, #64	@ 0x40
 800c8b6:	2202      	movs	r2, #2
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f002 fb7c 	bl	800efb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c8be:	4b3e      	ldr	r3, [pc, #248]	@ (800c9b8 <USBD_CDC_Init+0x1e4>)
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	f003 020f 	and.w	r2, r3, #15
 800c8c6:	6879      	ldr	r1, [r7, #4]
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4413      	add	r3, r2
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	440b      	add	r3, r1
 800c8d2:	3324      	adds	r3, #36	@ 0x24
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c8d8:	4b38      	ldr	r3, [pc, #224]	@ (800c9bc <USBD_CDC_Init+0x1e8>)
 800c8da:	7819      	ldrb	r1, [r3, #0]
 800c8dc:	2340      	movs	r3, #64	@ 0x40
 800c8de:	2202      	movs	r2, #2
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f002 fb68 	bl	800efb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c8e6:	4b35      	ldr	r3, [pc, #212]	@ (800c9bc <USBD_CDC_Init+0x1e8>)
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	f003 020f 	and.w	r2, r3, #15
 800c8ee:	6879      	ldr	r1, [r7, #4]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	4413      	add	r3, r2
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	440b      	add	r3, r1
 800c8fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c8fe:	2201      	movs	r2, #1
 800c900:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c902:	4b2f      	ldr	r3, [pc, #188]	@ (800c9c0 <USBD_CDC_Init+0x1ec>)
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	f003 020f 	and.w	r2, r3, #15
 800c90a:	6879      	ldr	r1, [r7, #4]
 800c90c:	4613      	mov	r3, r2
 800c90e:	009b      	lsls	r3, r3, #2
 800c910:	4413      	add	r3, r2
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	440b      	add	r3, r1
 800c916:	3326      	adds	r3, #38	@ 0x26
 800c918:	2210      	movs	r2, #16
 800c91a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c91c:	4b28      	ldr	r3, [pc, #160]	@ (800c9c0 <USBD_CDC_Init+0x1ec>)
 800c91e:	7819      	ldrb	r1, [r3, #0]
 800c920:	2308      	movs	r3, #8
 800c922:	2203      	movs	r2, #3
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f002 fb46 	bl	800efb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c92a:	4b25      	ldr	r3, [pc, #148]	@ (800c9c0 <USBD_CDC_Init+0x1ec>)
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	f003 020f 	and.w	r2, r3, #15
 800c932:	6879      	ldr	r1, [r7, #4]
 800c934:	4613      	mov	r3, r2
 800c936:	009b      	lsls	r3, r3, #2
 800c938:	4413      	add	r3, r2
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	440b      	add	r3, r1
 800c93e:	3324      	adds	r3, #36	@ 0x24
 800c940:	2201      	movs	r2, #1
 800c942:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	33b0      	adds	r3, #176	@ 0xb0
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	4413      	add	r3, r2
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2200      	movs	r2, #0
 800c964:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c976:	2b00      	cmp	r3, #0
 800c978:	d101      	bne.n	800c97e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800c97a:	2302      	movs	r3, #2
 800c97c:	e018      	b.n	800c9b0 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	7c1b      	ldrb	r3, [r3, #16]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d10a      	bne.n	800c99c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c986:	4b0d      	ldr	r3, [pc, #52]	@ (800c9bc <USBD_CDC_Init+0x1e8>)
 800c988:	7819      	ldrb	r1, [r3, #0]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c990:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f002 fbfd 	bl	800f194 <USBD_LL_PrepareReceive>
 800c99a:	e008      	b.n	800c9ae <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c99c:	4b07      	ldr	r3, [pc, #28]	@ (800c9bc <USBD_CDC_Init+0x1e8>)
 800c99e:	7819      	ldrb	r1, [r3, #0]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c9a6:	2340      	movs	r3, #64	@ 0x40
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f002 fbf3 	bl	800f194 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	200000f7 	.word	0x200000f7
 800c9bc:	200000f8 	.word	0x200000f8
 800c9c0:	200000f9 	.word	0x200000f9

0800c9c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c9d0:	4b3a      	ldr	r3, [pc, #232]	@ (800cabc <USBD_CDC_DeInit+0xf8>)
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f002 fb13 	bl	800f002 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c9dc:	4b37      	ldr	r3, [pc, #220]	@ (800cabc <USBD_CDC_DeInit+0xf8>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	f003 020f 	and.w	r2, r3, #15
 800c9e4:	6879      	ldr	r1, [r7, #4]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	4413      	add	r3, r2
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	440b      	add	r3, r1
 800c9f0:	3324      	adds	r3, #36	@ 0x24
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c9f6:	4b32      	ldr	r3, [pc, #200]	@ (800cac0 <USBD_CDC_DeInit+0xfc>)
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f002 fb00 	bl	800f002 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ca02:	4b2f      	ldr	r3, [pc, #188]	@ (800cac0 <USBD_CDC_DeInit+0xfc>)
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	f003 020f 	and.w	r2, r3, #15
 800ca0a:	6879      	ldr	r1, [r7, #4]
 800ca0c:	4613      	mov	r3, r2
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	4413      	add	r3, r2
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	440b      	add	r3, r1
 800ca16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ca1e:	4b29      	ldr	r3, [pc, #164]	@ (800cac4 <USBD_CDC_DeInit+0x100>)
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	4619      	mov	r1, r3
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f002 faec 	bl	800f002 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ca2a:	4b26      	ldr	r3, [pc, #152]	@ (800cac4 <USBD_CDC_DeInit+0x100>)
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	f003 020f 	and.w	r2, r3, #15
 800ca32:	6879      	ldr	r1, [r7, #4]
 800ca34:	4613      	mov	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4413      	add	r3, r2
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	440b      	add	r3, r1
 800ca3e:	3324      	adds	r3, #36	@ 0x24
 800ca40:	2200      	movs	r2, #0
 800ca42:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ca44:	4b1f      	ldr	r3, [pc, #124]	@ (800cac4 <USBD_CDC_DeInit+0x100>)
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	f003 020f 	and.w	r2, r3, #15
 800ca4c:	6879      	ldr	r1, [r7, #4]
 800ca4e:	4613      	mov	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4413      	add	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	440b      	add	r3, r1
 800ca58:	3326      	adds	r3, #38	@ 0x26
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	32b0      	adds	r2, #176	@ 0xb0
 800ca68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d01f      	beq.n	800cab0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	33b0      	adds	r3, #176	@ 0xb0
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	4413      	add	r3, r2
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	32b0      	adds	r2, #176	@ 0xb0
 800ca8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f002 fc3a 	bl	800f30c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	32b0      	adds	r2, #176	@ 0xb0
 800caa2:	2100      	movs	r1, #0
 800caa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cab0:	2300      	movs	r3, #0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	200000f7 	.word	0x200000f7
 800cac0:	200000f8 	.word	0x200000f8
 800cac4:	200000f9 	.word	0x200000f9

0800cac8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b086      	sub	sp, #24
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	32b0      	adds	r2, #176	@ 0xb0
 800cadc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cae0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cae2:	2300      	movs	r3, #0
 800cae4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cae6:	2300      	movs	r3, #0
 800cae8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800caea:	2300      	movs	r3, #0
 800caec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d101      	bne.n	800caf8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800caf4:	2303      	movs	r3, #3
 800caf6:	e0bf      	b.n	800cc78 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d050      	beq.n	800cba6 <USBD_CDC_Setup+0xde>
 800cb04:	2b20      	cmp	r3, #32
 800cb06:	f040 80af 	bne.w	800cc68 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	88db      	ldrh	r3, [r3, #6]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d03a      	beq.n	800cb88 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	b25b      	sxtb	r3, r3
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	da1b      	bge.n	800cb54 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	33b0      	adds	r3, #176	@ 0xb0
 800cb26:	009b      	lsls	r3, r3, #2
 800cb28:	4413      	add	r3, r2
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	683a      	ldr	r2, [r7, #0]
 800cb30:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cb32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cb34:	683a      	ldr	r2, [r7, #0]
 800cb36:	88d2      	ldrh	r2, [r2, #6]
 800cb38:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	88db      	ldrh	r3, [r3, #6]
 800cb3e:	2b07      	cmp	r3, #7
 800cb40:	bf28      	it	cs
 800cb42:	2307      	movcs	r3, #7
 800cb44:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	89fa      	ldrh	r2, [r7, #14]
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f001 fdbd 	bl	800e6cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cb52:	e090      	b.n	800cc76 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	785a      	ldrb	r2, [r3, #1]
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	88db      	ldrh	r3, [r3, #6]
 800cb62:	2b3f      	cmp	r3, #63	@ 0x3f
 800cb64:	d803      	bhi.n	800cb6e <USBD_CDC_Setup+0xa6>
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	88db      	ldrh	r3, [r3, #6]
 800cb6a:	b2da      	uxtb	r2, r3
 800cb6c:	e000      	b.n	800cb70 <USBD_CDC_Setup+0xa8>
 800cb6e:	2240      	movs	r2, #64	@ 0x40
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cb76:	6939      	ldr	r1, [r7, #16]
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800cb7e:	461a      	mov	r2, r3
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f001 fdcf 	bl	800e724 <USBD_CtlPrepareRx>
      break;
 800cb86:	e076      	b.n	800cc76 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	33b0      	adds	r3, #176	@ 0xb0
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4413      	add	r3, r2
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	689b      	ldr	r3, [r3, #8]
 800cb9a:	683a      	ldr	r2, [r7, #0]
 800cb9c:	7850      	ldrb	r0, [r2, #1]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	6839      	ldr	r1, [r7, #0]
 800cba2:	4798      	blx	r3
      break;
 800cba4:	e067      	b.n	800cc76 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	785b      	ldrb	r3, [r3, #1]
 800cbaa:	2b0b      	cmp	r3, #11
 800cbac:	d851      	bhi.n	800cc52 <USBD_CDC_Setup+0x18a>
 800cbae:	a201      	add	r2, pc, #4	@ (adr r2, 800cbb4 <USBD_CDC_Setup+0xec>)
 800cbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb4:	0800cbe5 	.word	0x0800cbe5
 800cbb8:	0800cc61 	.word	0x0800cc61
 800cbbc:	0800cc53 	.word	0x0800cc53
 800cbc0:	0800cc53 	.word	0x0800cc53
 800cbc4:	0800cc53 	.word	0x0800cc53
 800cbc8:	0800cc53 	.word	0x0800cc53
 800cbcc:	0800cc53 	.word	0x0800cc53
 800cbd0:	0800cc53 	.word	0x0800cc53
 800cbd4:	0800cc53 	.word	0x0800cc53
 800cbd8:	0800cc53 	.word	0x0800cc53
 800cbdc:	0800cc0f 	.word	0x0800cc0f
 800cbe0:	0800cc39 	.word	0x0800cc39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	2b03      	cmp	r3, #3
 800cbee:	d107      	bne.n	800cc00 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cbf0:	f107 030a 	add.w	r3, r7, #10
 800cbf4:	2202      	movs	r2, #2
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f001 fd67 	bl	800e6cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cbfe:	e032      	b.n	800cc66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cc00:	6839      	ldr	r1, [r7, #0]
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f001 fce5 	bl	800e5d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800cc08:	2303      	movs	r3, #3
 800cc0a:	75fb      	strb	r3, [r7, #23]
          break;
 800cc0c:	e02b      	b.n	800cc66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	2b03      	cmp	r3, #3
 800cc18:	d107      	bne.n	800cc2a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cc1a:	f107 030d 	add.w	r3, r7, #13
 800cc1e:	2201      	movs	r2, #1
 800cc20:	4619      	mov	r1, r3
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f001 fd52 	bl	800e6cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cc28:	e01d      	b.n	800cc66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cc2a:	6839      	ldr	r1, [r7, #0]
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f001 fcd0 	bl	800e5d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800cc32:	2303      	movs	r3, #3
 800cc34:	75fb      	strb	r3, [r7, #23]
          break;
 800cc36:	e016      	b.n	800cc66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	2b03      	cmp	r3, #3
 800cc42:	d00f      	beq.n	800cc64 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cc44:	6839      	ldr	r1, [r7, #0]
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f001 fcc3 	bl	800e5d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cc50:	e008      	b.n	800cc64 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cc52:	6839      	ldr	r1, [r7, #0]
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f001 fcbc 	bl	800e5d2 <USBD_CtlError>
          ret = USBD_FAIL;
 800cc5a:	2303      	movs	r3, #3
 800cc5c:	75fb      	strb	r3, [r7, #23]
          break;
 800cc5e:	e002      	b.n	800cc66 <USBD_CDC_Setup+0x19e>
          break;
 800cc60:	bf00      	nop
 800cc62:	e008      	b.n	800cc76 <USBD_CDC_Setup+0x1ae>
          break;
 800cc64:	bf00      	nop
      }
      break;
 800cc66:	e006      	b.n	800cc76 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cc68:	6839      	ldr	r1, [r7, #0]
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f001 fcb1 	bl	800e5d2 <USBD_CtlError>
      ret = USBD_FAIL;
 800cc70:	2303      	movs	r3, #3
 800cc72:	75fb      	strb	r3, [r7, #23]
      break;
 800cc74:	bf00      	nop
  }

  return (uint8_t)ret;
 800cc76:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3718      	adds	r7, #24
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	460b      	mov	r3, r1
 800cc8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	32b0      	adds	r2, #176	@ 0xb0
 800cc9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d101      	bne.n	800ccaa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cca6:	2303      	movs	r3, #3
 800cca8:	e065      	b.n	800cd76 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	32b0      	adds	r2, #176	@ 0xb0
 800ccb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ccba:	78fb      	ldrb	r3, [r7, #3]
 800ccbc:	f003 020f 	and.w	r2, r3, #15
 800ccc0:	6879      	ldr	r1, [r7, #4]
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	4413      	add	r3, r2
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	440b      	add	r3, r1
 800cccc:	3318      	adds	r3, #24
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d02f      	beq.n	800cd34 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ccd4:	78fb      	ldrb	r3, [r7, #3]
 800ccd6:	f003 020f 	and.w	r2, r3, #15
 800ccda:	6879      	ldr	r1, [r7, #4]
 800ccdc:	4613      	mov	r3, r2
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	4413      	add	r3, r2
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	440b      	add	r3, r1
 800cce6:	3318      	adds	r3, #24
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	78fb      	ldrb	r3, [r7, #3]
 800ccec:	f003 010f 	and.w	r1, r3, #15
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	00db      	lsls	r3, r3, #3
 800ccf6:	440b      	add	r3, r1
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	4403      	add	r3, r0
 800ccfc:	331c      	adds	r3, #28
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	fbb2 f1f3 	udiv	r1, r2, r3
 800cd04:	fb01 f303 	mul.w	r3, r1, r3
 800cd08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d112      	bne.n	800cd34 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cd0e:	78fb      	ldrb	r3, [r7, #3]
 800cd10:	f003 020f 	and.w	r2, r3, #15
 800cd14:	6879      	ldr	r1, [r7, #4]
 800cd16:	4613      	mov	r3, r2
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	4413      	add	r3, r2
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	440b      	add	r3, r1
 800cd20:	3318      	adds	r3, #24
 800cd22:	2200      	movs	r2, #0
 800cd24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cd26:	78f9      	ldrb	r1, [r7, #3]
 800cd28:	2300      	movs	r3, #0
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f002 fa10 	bl	800f152 <USBD_LL_Transmit>
 800cd32:	e01f      	b.n	800cd74 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	33b0      	adds	r3, #176	@ 0xb0
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4413      	add	r3, r2
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	691b      	ldr	r3, [r3, #16]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d010      	beq.n	800cd74 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	33b0      	adds	r3, #176	@ 0xb0
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	4413      	add	r3, r2
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	691b      	ldr	r3, [r3, #16]
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800cd70:	78fa      	ldrb	r2, [r7, #3]
 800cd72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b084      	sub	sp, #16
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	460b      	mov	r3, r1
 800cd88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	32b0      	adds	r2, #176	@ 0xb0
 800cd94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	32b0      	adds	r2, #176	@ 0xb0
 800cda4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d101      	bne.n	800cdb0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e01a      	b.n	800cde6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cdb0:	78fb      	ldrb	r3, [r7, #3]
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f002 fa0e 	bl	800f1d6 <USBD_LL_GetRxDataSize>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	33b0      	adds	r3, #176	@ 0xb0
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	4413      	add	r3, r2
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800cde0:	4611      	mov	r1, r2
 800cde2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b084      	sub	sp, #16
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	32b0      	adds	r2, #176	@ 0xb0
 800ce00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d101      	bne.n	800ce10 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ce0c:	2303      	movs	r3, #3
 800ce0e:	e024      	b.n	800ce5a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	33b0      	adds	r3, #176	@ 0xb0
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	4413      	add	r3, r2
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d019      	beq.n	800ce58 <USBD_CDC_EP0_RxReady+0x6a>
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ce2a:	2bff      	cmp	r3, #255	@ 0xff
 800ce2c:	d014      	beq.n	800ce58 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	33b0      	adds	r3, #176	@ 0xb0
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	4413      	add	r3, r2
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	689b      	ldr	r3, [r3, #8]
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ce46:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ce48:	68fa      	ldr	r2, [r7, #12]
 800ce4a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ce4e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	22ff      	movs	r2, #255	@ 0xff
 800ce54:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ce58:	2300      	movs	r3, #0
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
	...

0800ce64 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b086      	sub	sp, #24
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ce6c:	2182      	movs	r1, #130	@ 0x82
 800ce6e:	4818      	ldr	r0, [pc, #96]	@ (800ced0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ce70:	f000 fd4f 	bl	800d912 <USBD_GetEpDesc>
 800ce74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ce76:	2101      	movs	r1, #1
 800ce78:	4815      	ldr	r0, [pc, #84]	@ (800ced0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ce7a:	f000 fd4a 	bl	800d912 <USBD_GetEpDesc>
 800ce7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ce80:	2181      	movs	r1, #129	@ 0x81
 800ce82:	4813      	ldr	r0, [pc, #76]	@ (800ced0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ce84:	f000 fd45 	bl	800d912 <USBD_GetEpDesc>
 800ce88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d002      	beq.n	800ce96 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	2210      	movs	r2, #16
 800ce94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d006      	beq.n	800ceaa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cea4:	711a      	strb	r2, [r3, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d006      	beq.n	800cebe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ceb8:	711a      	strb	r2, [r3, #4]
 800ceba:	2200      	movs	r2, #0
 800cebc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2243      	movs	r2, #67	@ 0x43
 800cec2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cec4:	4b02      	ldr	r3, [pc, #8]	@ (800ced0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3718      	adds	r7, #24
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	200000b4 	.word	0x200000b4

0800ced4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cedc:	2182      	movs	r1, #130	@ 0x82
 800cede:	4818      	ldr	r0, [pc, #96]	@ (800cf40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cee0:	f000 fd17 	bl	800d912 <USBD_GetEpDesc>
 800cee4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cee6:	2101      	movs	r1, #1
 800cee8:	4815      	ldr	r0, [pc, #84]	@ (800cf40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ceea:	f000 fd12 	bl	800d912 <USBD_GetEpDesc>
 800ceee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cef0:	2181      	movs	r1, #129	@ 0x81
 800cef2:	4813      	ldr	r0, [pc, #76]	@ (800cf40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cef4:	f000 fd0d 	bl	800d912 <USBD_GetEpDesc>
 800cef8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d002      	beq.n	800cf06 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	2210      	movs	r2, #16
 800cf04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d006      	beq.n	800cf1a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	711a      	strb	r2, [r3, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	f042 0202 	orr.w	r2, r2, #2
 800cf18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d006      	beq.n	800cf2e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2200      	movs	r2, #0
 800cf24:	711a      	strb	r2, [r3, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f042 0202 	orr.w	r2, r2, #2
 800cf2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2243      	movs	r2, #67	@ 0x43
 800cf32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cf34:	4b02      	ldr	r3, [pc, #8]	@ (800cf40 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3718      	adds	r7, #24
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	200000b4 	.word	0x200000b4

0800cf44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b086      	sub	sp, #24
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cf4c:	2182      	movs	r1, #130	@ 0x82
 800cf4e:	4818      	ldr	r0, [pc, #96]	@ (800cfb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cf50:	f000 fcdf 	bl	800d912 <USBD_GetEpDesc>
 800cf54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cf56:	2101      	movs	r1, #1
 800cf58:	4815      	ldr	r0, [pc, #84]	@ (800cfb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cf5a:	f000 fcda 	bl	800d912 <USBD_GetEpDesc>
 800cf5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cf60:	2181      	movs	r1, #129	@ 0x81
 800cf62:	4813      	ldr	r0, [pc, #76]	@ (800cfb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cf64:	f000 fcd5 	bl	800d912 <USBD_GetEpDesc>
 800cf68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d002      	beq.n	800cf76 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	2210      	movs	r2, #16
 800cf74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d006      	beq.n	800cf8a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cf84:	711a      	strb	r2, [r3, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d006      	beq.n	800cf9e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cf98:	711a      	strb	r2, [r3, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2243      	movs	r2, #67	@ 0x43
 800cfa2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cfa4:	4b02      	ldr	r3, [pc, #8]	@ (800cfb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3718      	adds	r7, #24
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	200000b4 	.word	0x200000b4

0800cfb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	220a      	movs	r2, #10
 800cfc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cfc2:	4b03      	ldr	r3, [pc, #12]	@ (800cfd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr
 800cfd0:	20000070 	.word	0x20000070

0800cfd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d101      	bne.n	800cfe8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cfe4:	2303      	movs	r3, #3
 800cfe6:	e009      	b.n	800cffc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	33b0      	adds	r3, #176	@ 0xb0
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4413      	add	r3, r2
 800cff6:	683a      	ldr	r2, [r7, #0]
 800cff8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cffa:	2300      	movs	r3, #0
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	370c      	adds	r7, #12
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d008:	b480      	push	{r7}
 800d00a:	b087      	sub	sp, #28
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	32b0      	adds	r2, #176	@ 0xb0
 800d01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d022:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d101      	bne.n	800d02e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d02a:	2303      	movs	r3, #3
 800d02c:	e008      	b.n	800d040 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	68ba      	ldr	r2, [r7, #8]
 800d032:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d03e:	2300      	movs	r3, #0
}
 800d040:	4618      	mov	r0, r3
 800d042:	371c      	adds	r7, #28
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b085      	sub	sp, #20
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	32b0      	adds	r2, #176	@ 0xb0
 800d060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d064:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d101      	bne.n	800d070 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d06c:	2303      	movs	r3, #3
 800d06e:	e004      	b.n	800d07a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	683a      	ldr	r2, [r7, #0]
 800d074:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3714      	adds	r7, #20
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
	...

0800d088 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	32b0      	adds	r2, #176	@ 0xb0
 800d09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d09e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d101      	bne.n	800d0ae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d0aa:	2303      	movs	r3, #3
 800d0ac:	e025      	b.n	800d0fa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d11f      	bne.n	800d0f8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d0c0:	4b10      	ldr	r3, [pc, #64]	@ (800d104 <USBD_CDC_TransmitPacket+0x7c>)
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	f003 020f 	and.w	r2, r3, #15
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	4413      	add	r3, r2
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	4403      	add	r3, r0
 800d0da:	3318      	adds	r3, #24
 800d0dc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d0de:	4b09      	ldr	r3, [pc, #36]	@ (800d104 <USBD_CDC_TransmitPacket+0x7c>)
 800d0e0:	7819      	ldrb	r1, [r3, #0]
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f002 f82f 	bl	800f152 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	200000f7 	.word	0x200000f7

0800d108 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	32b0      	adds	r2, #176	@ 0xb0
 800d11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d11e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	32b0      	adds	r2, #176	@ 0xb0
 800d12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d101      	bne.n	800d136 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d132:	2303      	movs	r3, #3
 800d134:	e018      	b.n	800d168 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	7c1b      	ldrb	r3, [r3, #16]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10a      	bne.n	800d154 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d13e:	4b0c      	ldr	r3, [pc, #48]	@ (800d170 <USBD_CDC_ReceivePacket+0x68>)
 800d140:	7819      	ldrb	r1, [r3, #0]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d148:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f002 f821 	bl	800f194 <USBD_LL_PrepareReceive>
 800d152:	e008      	b.n	800d166 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d154:	4b06      	ldr	r3, [pc, #24]	@ (800d170 <USBD_CDC_ReceivePacket+0x68>)
 800d156:	7819      	ldrb	r1, [r3, #0]
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d15e:	2340      	movs	r3, #64	@ 0x40
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f002 f817 	bl	800f194 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d166:	2300      	movs	r3, #0
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	200000f8 	.word	0x200000f8

0800d174 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b086      	sub	sp, #24
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	4613      	mov	r3, r2
 800d180:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d101      	bne.n	800d18c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d188:	2303      	movs	r3, #3
 800d18a:	e01f      	b.n	800d1cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2200      	movs	r2, #0
 800d190:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2200      	movs	r2, #0
 800d198:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d003      	beq.n	800d1b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	79fa      	ldrb	r2, [r7, #7]
 800d1be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f001 fe8d 	bl	800eee0 <USBD_LL_Init>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d1ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3718      	adds	r7, #24
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d101      	bne.n	800d1ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d1e8:	2303      	movs	r3, #3
 800d1ea:	e025      	b.n	800d238 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	683a      	ldr	r2, [r7, #0]
 800d1f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	32ae      	adds	r2, #174	@ 0xae
 800d1fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00f      	beq.n	800d228 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	32ae      	adds	r2, #174	@ 0xae
 800d212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d218:	f107 020e 	add.w	r2, r7, #14
 800d21c:	4610      	mov	r0, r2
 800d21e:	4798      	blx	r3
 800d220:	4602      	mov	r2, r0
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d22e:	1c5a      	adds	r2, r3, #1
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d236:	2300      	movs	r3, #0
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f001 fe99 	bl	800ef80 <USBD_LL_Start>
 800d24e:	4603      	mov	r3, r0
}
 800d250:	4618      	mov	r0, r3
 800d252:	3708      	adds	r7, #8
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d260:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d262:	4618      	mov	r0, r3
 800d264:	370c      	adds	r7, #12
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr

0800d26e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b084      	sub	sp, #16
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
 800d276:	460b      	mov	r3, r1
 800d278:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d284:	2b00      	cmp	r3, #0
 800d286:	d009      	beq.n	800d29c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	78fa      	ldrb	r2, [r7, #3]
 800d292:	4611      	mov	r1, r2
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	4798      	blx	r3
 800d298:	4603      	mov	r3, r0
 800d29a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3710      	adds	r7, #16
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}

0800d2a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b084      	sub	sp, #16
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6078      	str	r0, [r7, #4]
 800d2ae:	460b      	mov	r3, r1
 800d2b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	78fa      	ldrb	r2, [r7, #3]
 800d2c0:	4611      	mov	r1, r2
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	4798      	blx	r3
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d001      	beq.n	800d2d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d2cc:	2303      	movs	r3, #3
 800d2ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3710      	adds	r7, #16
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d2da:	b580      	push	{r7, lr}
 800d2dc:	b084      	sub	sp, #16
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
 800d2e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d2ea:	6839      	ldr	r1, [r7, #0]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f001 f936 	bl	800e55e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d300:	461a      	mov	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d30e:	f003 031f 	and.w	r3, r3, #31
 800d312:	2b02      	cmp	r3, #2
 800d314:	d01a      	beq.n	800d34c <USBD_LL_SetupStage+0x72>
 800d316:	2b02      	cmp	r3, #2
 800d318:	d822      	bhi.n	800d360 <USBD_LL_SetupStage+0x86>
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d002      	beq.n	800d324 <USBD_LL_SetupStage+0x4a>
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d00a      	beq.n	800d338 <USBD_LL_SetupStage+0x5e>
 800d322:	e01d      	b.n	800d360 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d32a:	4619      	mov	r1, r3
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 fb63 	bl	800d9f8 <USBD_StdDevReq>
 800d332:	4603      	mov	r3, r0
 800d334:	73fb      	strb	r3, [r7, #15]
      break;
 800d336:	e020      	b.n	800d37a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d33e:	4619      	mov	r1, r3
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 fbcb 	bl	800dadc <USBD_StdItfReq>
 800d346:	4603      	mov	r3, r0
 800d348:	73fb      	strb	r3, [r7, #15]
      break;
 800d34a:	e016      	b.n	800d37a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 fc2d 	bl	800dbb4 <USBD_StdEPReq>
 800d35a:	4603      	mov	r3, r0
 800d35c:	73fb      	strb	r3, [r7, #15]
      break;
 800d35e:	e00c      	b.n	800d37a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d366:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	4619      	mov	r1, r3
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f001 fe66 	bl	800f040 <USBD_LL_StallEP>
 800d374:	4603      	mov	r3, r0
 800d376:	73fb      	strb	r3, [r7, #15]
      break;
 800d378:	bf00      	nop
  }

  return ret;
 800d37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3710      	adds	r7, #16
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	460b      	mov	r3, r1
 800d38e:	607a      	str	r2, [r7, #4]
 800d390:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d392:	2300      	movs	r3, #0
 800d394:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d396:	7afb      	ldrb	r3, [r7, #11]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d16e      	bne.n	800d47a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d3a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d3aa:	2b03      	cmp	r3, #3
 800d3ac:	f040 8098 	bne.w	800d4e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	689a      	ldr	r2, [r3, #8]
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d913      	bls.n	800d3e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	689a      	ldr	r2, [r3, #8]
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	1ad2      	subs	r2, r2, r3
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	68da      	ldr	r2, [r3, #12]
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	bf28      	it	cs
 800d3d6:	4613      	movcs	r3, r2
 800d3d8:	461a      	mov	r2, r3
 800d3da:	6879      	ldr	r1, [r7, #4]
 800d3dc:	68f8      	ldr	r0, [r7, #12]
 800d3de:	f001 f9be 	bl	800e75e <USBD_CtlContinueRx>
 800d3e2:	e07d      	b.n	800d4e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d3ea:	f003 031f 	and.w	r3, r3, #31
 800d3ee:	2b02      	cmp	r3, #2
 800d3f0:	d014      	beq.n	800d41c <USBD_LL_DataOutStage+0x98>
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	d81d      	bhi.n	800d432 <USBD_LL_DataOutStage+0xae>
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d002      	beq.n	800d400 <USBD_LL_DataOutStage+0x7c>
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d003      	beq.n	800d406 <USBD_LL_DataOutStage+0x82>
 800d3fe:	e018      	b.n	800d432 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d400:	2300      	movs	r3, #0
 800d402:	75bb      	strb	r3, [r7, #22]
            break;
 800d404:	e018      	b.n	800d438 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	4619      	mov	r1, r3
 800d410:	68f8      	ldr	r0, [r7, #12]
 800d412:	f000 fa64 	bl	800d8de <USBD_CoreFindIF>
 800d416:	4603      	mov	r3, r0
 800d418:	75bb      	strb	r3, [r7, #22]
            break;
 800d41a:	e00d      	b.n	800d438 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d422:	b2db      	uxtb	r3, r3
 800d424:	4619      	mov	r1, r3
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f000 fa66 	bl	800d8f8 <USBD_CoreFindEP>
 800d42c:	4603      	mov	r3, r0
 800d42e:	75bb      	strb	r3, [r7, #22]
            break;
 800d430:	e002      	b.n	800d438 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d432:	2300      	movs	r3, #0
 800d434:	75bb      	strb	r3, [r7, #22]
            break;
 800d436:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d438:	7dbb      	ldrb	r3, [r7, #22]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d119      	bne.n	800d472 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d444:	b2db      	uxtb	r3, r3
 800d446:	2b03      	cmp	r3, #3
 800d448:	d113      	bne.n	800d472 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d44a:	7dba      	ldrb	r2, [r7, #22]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	32ae      	adds	r2, #174	@ 0xae
 800d450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d454:	691b      	ldr	r3, [r3, #16]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00b      	beq.n	800d472 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d45a:	7dba      	ldrb	r2, [r7, #22]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d462:	7dba      	ldrb	r2, [r7, #22]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	32ae      	adds	r2, #174	@ 0xae
 800d468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d46c:	691b      	ldr	r3, [r3, #16]
 800d46e:	68f8      	ldr	r0, [r7, #12]
 800d470:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d472:	68f8      	ldr	r0, [r7, #12]
 800d474:	f001 f984 	bl	800e780 <USBD_CtlSendStatus>
 800d478:	e032      	b.n	800d4e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d47a:	7afb      	ldrb	r3, [r7, #11]
 800d47c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d480:	b2db      	uxtb	r3, r3
 800d482:	4619      	mov	r1, r3
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f000 fa37 	bl	800d8f8 <USBD_CoreFindEP>
 800d48a:	4603      	mov	r3, r0
 800d48c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d48e:	7dbb      	ldrb	r3, [r7, #22]
 800d490:	2bff      	cmp	r3, #255	@ 0xff
 800d492:	d025      	beq.n	800d4e0 <USBD_LL_DataOutStage+0x15c>
 800d494:	7dbb      	ldrb	r3, [r7, #22]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d122      	bne.n	800d4e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	2b03      	cmp	r3, #3
 800d4a4:	d117      	bne.n	800d4d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d4a6:	7dba      	ldrb	r2, [r7, #22]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	32ae      	adds	r2, #174	@ 0xae
 800d4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4b0:	699b      	ldr	r3, [r3, #24]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00f      	beq.n	800d4d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d4b6:	7dba      	ldrb	r2, [r7, #22]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d4be:	7dba      	ldrb	r2, [r7, #22]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	32ae      	adds	r2, #174	@ 0xae
 800d4c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4c8:	699b      	ldr	r3, [r3, #24]
 800d4ca:	7afa      	ldrb	r2, [r7, #11]
 800d4cc:	4611      	mov	r1, r2
 800d4ce:	68f8      	ldr	r0, [r7, #12]
 800d4d0:	4798      	blx	r3
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d4d6:	7dfb      	ldrb	r3, [r7, #23]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d001      	beq.n	800d4e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d4dc:	7dfb      	ldrb	r3, [r7, #23]
 800d4de:	e000      	b.n	800d4e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d4e0:	2300      	movs	r3, #0
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3718      	adds	r7, #24
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}

0800d4ea <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d4ea:	b580      	push	{r7, lr}
 800d4ec:	b086      	sub	sp, #24
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	60f8      	str	r0, [r7, #12]
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	607a      	str	r2, [r7, #4]
 800d4f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d4f8:	7afb      	ldrb	r3, [r7, #11]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d16f      	bne.n	800d5de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	3314      	adds	r3, #20
 800d502:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d15a      	bne.n	800d5c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	689a      	ldr	r2, [r3, #8]
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	68db      	ldr	r3, [r3, #12]
 800d516:	429a      	cmp	r2, r3
 800d518:	d914      	bls.n	800d544 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	689a      	ldr	r2, [r3, #8]
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	1ad2      	subs	r2, r2, r3
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	689b      	ldr	r3, [r3, #8]
 800d52c:	461a      	mov	r2, r3
 800d52e:	6879      	ldr	r1, [r7, #4]
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f001 f8e6 	bl	800e702 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d536:	2300      	movs	r3, #0
 800d538:	2200      	movs	r2, #0
 800d53a:	2100      	movs	r1, #0
 800d53c:	68f8      	ldr	r0, [r7, #12]
 800d53e:	f001 fe29 	bl	800f194 <USBD_LL_PrepareReceive>
 800d542:	e03f      	b.n	800d5c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	68da      	ldr	r2, [r3, #12]
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d11c      	bne.n	800d58a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	685a      	ldr	r2, [r3, #4]
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d558:	429a      	cmp	r2, r3
 800d55a:	d316      	bcc.n	800d58a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	685a      	ldr	r2, [r3, #4]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d566:	429a      	cmp	r2, r3
 800d568:	d20f      	bcs.n	800d58a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d56a:	2200      	movs	r2, #0
 800d56c:	2100      	movs	r1, #0
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	f001 f8c7 	bl	800e702 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2200      	movs	r2, #0
 800d578:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d57c:	2300      	movs	r3, #0
 800d57e:	2200      	movs	r2, #0
 800d580:	2100      	movs	r1, #0
 800d582:	68f8      	ldr	r0, [r7, #12]
 800d584:	f001 fe06 	bl	800f194 <USBD_LL_PrepareReceive>
 800d588:	e01c      	b.n	800d5c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d590:	b2db      	uxtb	r3, r3
 800d592:	2b03      	cmp	r3, #3
 800d594:	d10f      	bne.n	800d5b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d009      	beq.n	800d5b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	68f8      	ldr	r0, [r7, #12]
 800d5b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5b6:	2180      	movs	r1, #128	@ 0x80
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	f001 fd41 	bl	800f040 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d5be:	68f8      	ldr	r0, [r7, #12]
 800d5c0:	f001 f8f1 	bl	800e7a6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d03a      	beq.n	800d644 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d5ce:	68f8      	ldr	r0, [r7, #12]
 800d5d0:	f7ff fe42 	bl	800d258 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d5dc:	e032      	b.n	800d644 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d5de:	7afb      	ldrb	r3, [r7, #11]
 800d5e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f000 f985 	bl	800d8f8 <USBD_CoreFindEP>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d5f2:	7dfb      	ldrb	r3, [r7, #23]
 800d5f4:	2bff      	cmp	r3, #255	@ 0xff
 800d5f6:	d025      	beq.n	800d644 <USBD_LL_DataInStage+0x15a>
 800d5f8:	7dfb      	ldrb	r3, [r7, #23]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d122      	bne.n	800d644 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d604:	b2db      	uxtb	r3, r3
 800d606:	2b03      	cmp	r3, #3
 800d608:	d11c      	bne.n	800d644 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d60a:	7dfa      	ldrb	r2, [r7, #23]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	32ae      	adds	r2, #174	@ 0xae
 800d610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d614:	695b      	ldr	r3, [r3, #20]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d014      	beq.n	800d644 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d61a:	7dfa      	ldrb	r2, [r7, #23]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d622:	7dfa      	ldrb	r2, [r7, #23]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	32ae      	adds	r2, #174	@ 0xae
 800d628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d62c:	695b      	ldr	r3, [r3, #20]
 800d62e:	7afa      	ldrb	r2, [r7, #11]
 800d630:	4611      	mov	r1, r2
 800d632:	68f8      	ldr	r0, [r7, #12]
 800d634:	4798      	blx	r3
 800d636:	4603      	mov	r3, r0
 800d638:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d63a:	7dbb      	ldrb	r3, [r7, #22]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d001      	beq.n	800d644 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d640:	7dbb      	ldrb	r3, [r7, #22]
 800d642:	e000      	b.n	800d646 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3718      	adds	r7, #24
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b084      	sub	sp, #16
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d656:	2300      	movs	r3, #0
 800d658:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2200      	movs	r2, #0
 800d67c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d686:	2b00      	cmp	r3, #0
 800d688:	d014      	beq.n	800d6b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00e      	beq.n	800d6b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	6852      	ldr	r2, [r2, #4]
 800d6a2:	b2d2      	uxtb	r2, r2
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	4798      	blx	r3
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d001      	beq.n	800d6b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d6b0:	2303      	movs	r3, #3
 800d6b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d6b4:	2340      	movs	r3, #64	@ 0x40
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f001 fc7b 	bl	800efb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2240      	movs	r2, #64	@ 0x40
 800d6cc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d6d0:	2340      	movs	r3, #64	@ 0x40
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	2180      	movs	r1, #128	@ 0x80
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f001 fc6d 	bl	800efb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2201      	movs	r2, #1
 800d6e0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2240      	movs	r2, #64	@ 0x40
 800d6e6:	621a      	str	r2, [r3, #32]

  return ret;
 800d6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d6f2:	b480      	push	{r7}
 800d6f4:	b083      	sub	sp, #12
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	78fa      	ldrb	r2, [r7, #3]
 800d702:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d704:	2300      	movs	r3, #0
}
 800d706:	4618      	mov	r0, r3
 800d708:	370c      	adds	r7, #12
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr

0800d712 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d712:	b480      	push	{r7}
 800d714:	b083      	sub	sp, #12
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d720:	b2db      	uxtb	r3, r3
 800d722:	2b04      	cmp	r3, #4
 800d724:	d006      	beq.n	800d734 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d72c:	b2da      	uxtb	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2204      	movs	r2, #4
 800d738:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	370c      	adds	r7, #12
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr

0800d74a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d74a:	b480      	push	{r7}
 800d74c:	b083      	sub	sp, #12
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	2b04      	cmp	r3, #4
 800d75c:	d106      	bne.n	800d76c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d764:	b2da      	uxtb	r2, r3
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d76c:	2300      	movs	r3, #0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	370c      	adds	r7, #12
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr

0800d77a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b082      	sub	sp, #8
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	2b03      	cmp	r3, #3
 800d78c:	d110      	bne.n	800d7b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d794:	2b00      	cmp	r3, #0
 800d796:	d00b      	beq.n	800d7b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d79e:	69db      	ldr	r3, [r3, #28]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d005      	beq.n	800d7b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7aa:	69db      	ldr	r3, [r3, #28]
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d7b0:	2300      	movs	r3, #0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3708      	adds	r7, #8
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b082      	sub	sp, #8
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	32ae      	adds	r2, #174	@ 0xae
 800d7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d101      	bne.n	800d7dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d7d8:	2303      	movs	r3, #3
 800d7da:	e01c      	b.n	800d816 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	2b03      	cmp	r3, #3
 800d7e6:	d115      	bne.n	800d814 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	32ae      	adds	r2, #174	@ 0xae
 800d7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7f6:	6a1b      	ldr	r3, [r3, #32]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00b      	beq.n	800d814 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	32ae      	adds	r2, #174	@ 0xae
 800d806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d80a:	6a1b      	ldr	r3, [r3, #32]
 800d80c:	78fa      	ldrb	r2, [r7, #3]
 800d80e:	4611      	mov	r1, r2
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b082      	sub	sp, #8
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	460b      	mov	r3, r1
 800d828:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	32ae      	adds	r2, #174	@ 0xae
 800d834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d101      	bne.n	800d840 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d83c:	2303      	movs	r3, #3
 800d83e:	e01c      	b.n	800d87a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d846:	b2db      	uxtb	r3, r3
 800d848:	2b03      	cmp	r3, #3
 800d84a:	d115      	bne.n	800d878 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	32ae      	adds	r2, #174	@ 0xae
 800d856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d85a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00b      	beq.n	800d878 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	32ae      	adds	r2, #174	@ 0xae
 800d86a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d86e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d870:	78fa      	ldrb	r2, [r7, #3]
 800d872:	4611      	mov	r1, r2
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d878:	2300      	movs	r3, #0
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d882:	b480      	push	{r7}
 800d884:	b083      	sub	sp, #12
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d88a:	2300      	movs	r3, #0
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d00e      	beq.n	800d8d4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	6852      	ldr	r2, [r2, #4]
 800d8c2:	b2d2      	uxtb	r2, r2
 800d8c4:	4611      	mov	r1, r2
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	4798      	blx	r3
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d001      	beq.n	800d8d4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d8d0:	2303      	movs	r3, #3
 800d8d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d8de:	b480      	push	{r7}
 800d8e0:	b083      	sub	sp, #12
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d8ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	370c      	adds	r7, #12
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr

0800d8f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b083      	sub	sp, #12
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	460b      	mov	r3, r1
 800d902:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d904:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d906:	4618      	mov	r0, r3
 800d908:	370c      	adds	r7, #12
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr

0800d912 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b086      	sub	sp, #24
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
 800d91a:	460b      	mov	r3, r1
 800d91c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d926:	2300      	movs	r3, #0
 800d928:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	885b      	ldrh	r3, [r3, #2]
 800d92e:	b29b      	uxth	r3, r3
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	7812      	ldrb	r2, [r2, #0]
 800d934:	4293      	cmp	r3, r2
 800d936:	d91f      	bls.n	800d978 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d93e:	e013      	b.n	800d968 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d940:	f107 030a 	add.w	r3, r7, #10
 800d944:	4619      	mov	r1, r3
 800d946:	6978      	ldr	r0, [r7, #20]
 800d948:	f000 f81b 	bl	800d982 <USBD_GetNextDesc>
 800d94c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	785b      	ldrb	r3, [r3, #1]
 800d952:	2b05      	cmp	r3, #5
 800d954:	d108      	bne.n	800d968 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	789b      	ldrb	r3, [r3, #2]
 800d95e:	78fa      	ldrb	r2, [r7, #3]
 800d960:	429a      	cmp	r2, r3
 800d962:	d008      	beq.n	800d976 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d964:	2300      	movs	r3, #0
 800d966:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	885b      	ldrh	r3, [r3, #2]
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	897b      	ldrh	r3, [r7, #10]
 800d970:	429a      	cmp	r2, r3
 800d972:	d8e5      	bhi.n	800d940 <USBD_GetEpDesc+0x2e>
 800d974:	e000      	b.n	800d978 <USBD_GetEpDesc+0x66>
          break;
 800d976:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d978:	693b      	ldr	r3, [r7, #16]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3718      	adds	r7, #24
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}

0800d982 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d982:	b480      	push	{r7}
 800d984:	b085      	sub	sp, #20
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
 800d98a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	881b      	ldrh	r3, [r3, #0]
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	7812      	ldrb	r2, [r2, #0]
 800d998:	4413      	add	r3, r2
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3714      	adds	r7, #20
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr

0800d9ba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d9ba:	b480      	push	{r7}
 800d9bc:	b087      	sub	sp, #28
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d9d8:	8a3b      	ldrh	r3, [r7, #16]
 800d9da:	021b      	lsls	r3, r3, #8
 800d9dc:	b21a      	sxth	r2, r3
 800d9de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	b21b      	sxth	r3, r3
 800d9e6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d9e8:	89fb      	ldrh	r3, [r7, #14]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	371c      	adds	r7, #28
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr
	...

0800d9f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da02:	2300      	movs	r3, #0
 800da04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800da0e:	2b40      	cmp	r3, #64	@ 0x40
 800da10:	d005      	beq.n	800da1e <USBD_StdDevReq+0x26>
 800da12:	2b40      	cmp	r3, #64	@ 0x40
 800da14:	d857      	bhi.n	800dac6 <USBD_StdDevReq+0xce>
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00f      	beq.n	800da3a <USBD_StdDevReq+0x42>
 800da1a:	2b20      	cmp	r3, #32
 800da1c:	d153      	bne.n	800dac6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	32ae      	adds	r2, #174	@ 0xae
 800da28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	6839      	ldr	r1, [r7, #0]
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	4798      	blx	r3
 800da34:	4603      	mov	r3, r0
 800da36:	73fb      	strb	r3, [r7, #15]
      break;
 800da38:	e04a      	b.n	800dad0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	785b      	ldrb	r3, [r3, #1]
 800da3e:	2b09      	cmp	r3, #9
 800da40:	d83b      	bhi.n	800daba <USBD_StdDevReq+0xc2>
 800da42:	a201      	add	r2, pc, #4	@ (adr r2, 800da48 <USBD_StdDevReq+0x50>)
 800da44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da48:	0800da9d 	.word	0x0800da9d
 800da4c:	0800dab1 	.word	0x0800dab1
 800da50:	0800dabb 	.word	0x0800dabb
 800da54:	0800daa7 	.word	0x0800daa7
 800da58:	0800dabb 	.word	0x0800dabb
 800da5c:	0800da7b 	.word	0x0800da7b
 800da60:	0800da71 	.word	0x0800da71
 800da64:	0800dabb 	.word	0x0800dabb
 800da68:	0800da93 	.word	0x0800da93
 800da6c:	0800da85 	.word	0x0800da85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800da70:	6839      	ldr	r1, [r7, #0]
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 fa3c 	bl	800def0 <USBD_GetDescriptor>
          break;
 800da78:	e024      	b.n	800dac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800da7a:	6839      	ldr	r1, [r7, #0]
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 fbcb 	bl	800e218 <USBD_SetAddress>
          break;
 800da82:	e01f      	b.n	800dac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800da84:	6839      	ldr	r1, [r7, #0]
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 fc0a 	bl	800e2a0 <USBD_SetConfig>
 800da8c:	4603      	mov	r3, r0
 800da8e:	73fb      	strb	r3, [r7, #15]
          break;
 800da90:	e018      	b.n	800dac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800da92:	6839      	ldr	r1, [r7, #0]
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f000 fcad 	bl	800e3f4 <USBD_GetConfig>
          break;
 800da9a:	e013      	b.n	800dac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800da9c:	6839      	ldr	r1, [r7, #0]
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 fcde 	bl	800e460 <USBD_GetStatus>
          break;
 800daa4:	e00e      	b.n	800dac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800daa6:	6839      	ldr	r1, [r7, #0]
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 fd0d 	bl	800e4c8 <USBD_SetFeature>
          break;
 800daae:	e009      	b.n	800dac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dab0:	6839      	ldr	r1, [r7, #0]
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 fd31 	bl	800e51a <USBD_ClrFeature>
          break;
 800dab8:	e004      	b.n	800dac4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800daba:	6839      	ldr	r1, [r7, #0]
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 fd88 	bl	800e5d2 <USBD_CtlError>
          break;
 800dac2:	bf00      	nop
      }
      break;
 800dac4:	e004      	b.n	800dad0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dac6:	6839      	ldr	r1, [r7, #0]
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 fd82 	bl	800e5d2 <USBD_CtlError>
      break;
 800dace:	bf00      	nop
  }

  return ret;
 800dad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop

0800dadc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dae6:	2300      	movs	r3, #0
 800dae8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800daf2:	2b40      	cmp	r3, #64	@ 0x40
 800daf4:	d005      	beq.n	800db02 <USBD_StdItfReq+0x26>
 800daf6:	2b40      	cmp	r3, #64	@ 0x40
 800daf8:	d852      	bhi.n	800dba0 <USBD_StdItfReq+0xc4>
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <USBD_StdItfReq+0x26>
 800dafe:	2b20      	cmp	r3, #32
 800db00:	d14e      	bne.n	800dba0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	3b01      	subs	r3, #1
 800db0c:	2b02      	cmp	r3, #2
 800db0e:	d840      	bhi.n	800db92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	889b      	ldrh	r3, [r3, #4]
 800db14:	b2db      	uxtb	r3, r3
 800db16:	2b01      	cmp	r3, #1
 800db18:	d836      	bhi.n	800db88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	889b      	ldrh	r3, [r3, #4]
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	4619      	mov	r1, r3
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f7ff fedb 	bl	800d8de <USBD_CoreFindIF>
 800db28:	4603      	mov	r3, r0
 800db2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db2c:	7bbb      	ldrb	r3, [r7, #14]
 800db2e:	2bff      	cmp	r3, #255	@ 0xff
 800db30:	d01d      	beq.n	800db6e <USBD_StdItfReq+0x92>
 800db32:	7bbb      	ldrb	r3, [r7, #14]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d11a      	bne.n	800db6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800db38:	7bba      	ldrb	r2, [r7, #14]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	32ae      	adds	r2, #174	@ 0xae
 800db3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d00f      	beq.n	800db68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800db48:	7bba      	ldrb	r2, [r7, #14]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800db50:	7bba      	ldrb	r2, [r7, #14]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	32ae      	adds	r2, #174	@ 0xae
 800db56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	6839      	ldr	r1, [r7, #0]
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	4798      	blx	r3
 800db62:	4603      	mov	r3, r0
 800db64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800db66:	e004      	b.n	800db72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800db68:	2303      	movs	r3, #3
 800db6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800db6c:	e001      	b.n	800db72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800db6e:	2303      	movs	r3, #3
 800db70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	88db      	ldrh	r3, [r3, #6]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d110      	bne.n	800db9c <USBD_StdItfReq+0xc0>
 800db7a:	7bfb      	ldrb	r3, [r7, #15]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d10d      	bne.n	800db9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f000 fdfd 	bl	800e780 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800db86:	e009      	b.n	800db9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800db88:	6839      	ldr	r1, [r7, #0]
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 fd21 	bl	800e5d2 <USBD_CtlError>
          break;
 800db90:	e004      	b.n	800db9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800db92:	6839      	ldr	r1, [r7, #0]
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 fd1c 	bl	800e5d2 <USBD_CtlError>
          break;
 800db9a:	e000      	b.n	800db9e <USBD_StdItfReq+0xc2>
          break;
 800db9c:	bf00      	nop
      }
      break;
 800db9e:	e004      	b.n	800dbaa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dba0:	6839      	ldr	r1, [r7, #0]
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 fd15 	bl	800e5d2 <USBD_CtlError>
      break;
 800dba8:	bf00      	nop
  }

  return ret;
 800dbaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3710      	adds	r7, #16
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	889b      	ldrh	r3, [r3, #4]
 800dbc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dbd0:	2b40      	cmp	r3, #64	@ 0x40
 800dbd2:	d007      	beq.n	800dbe4 <USBD_StdEPReq+0x30>
 800dbd4:	2b40      	cmp	r3, #64	@ 0x40
 800dbd6:	f200 817f 	bhi.w	800ded8 <USBD_StdEPReq+0x324>
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d02a      	beq.n	800dc34 <USBD_StdEPReq+0x80>
 800dbde:	2b20      	cmp	r3, #32
 800dbe0:	f040 817a 	bne.w	800ded8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800dbe4:	7bbb      	ldrb	r3, [r7, #14]
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7ff fe85 	bl	800d8f8 <USBD_CoreFindEP>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dbf2:	7b7b      	ldrb	r3, [r7, #13]
 800dbf4:	2bff      	cmp	r3, #255	@ 0xff
 800dbf6:	f000 8174 	beq.w	800dee2 <USBD_StdEPReq+0x32e>
 800dbfa:	7b7b      	ldrb	r3, [r7, #13]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f040 8170 	bne.w	800dee2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800dc02:	7b7a      	ldrb	r2, [r7, #13]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800dc0a:	7b7a      	ldrb	r2, [r7, #13]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	32ae      	adds	r2, #174	@ 0xae
 800dc10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc14:	689b      	ldr	r3, [r3, #8]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f000 8163 	beq.w	800dee2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800dc1c:	7b7a      	ldrb	r2, [r7, #13]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	32ae      	adds	r2, #174	@ 0xae
 800dc22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	6839      	ldr	r1, [r7, #0]
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	4798      	blx	r3
 800dc2e:	4603      	mov	r3, r0
 800dc30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dc32:	e156      	b.n	800dee2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	785b      	ldrb	r3, [r3, #1]
 800dc38:	2b03      	cmp	r3, #3
 800dc3a:	d008      	beq.n	800dc4e <USBD_StdEPReq+0x9a>
 800dc3c:	2b03      	cmp	r3, #3
 800dc3e:	f300 8145 	bgt.w	800decc <USBD_StdEPReq+0x318>
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f000 809b 	beq.w	800dd7e <USBD_StdEPReq+0x1ca>
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d03c      	beq.n	800dcc6 <USBD_StdEPReq+0x112>
 800dc4c:	e13e      	b.n	800decc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	2b02      	cmp	r3, #2
 800dc58:	d002      	beq.n	800dc60 <USBD_StdEPReq+0xac>
 800dc5a:	2b03      	cmp	r3, #3
 800dc5c:	d016      	beq.n	800dc8c <USBD_StdEPReq+0xd8>
 800dc5e:	e02c      	b.n	800dcba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc60:	7bbb      	ldrb	r3, [r7, #14]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00d      	beq.n	800dc82 <USBD_StdEPReq+0xce>
 800dc66:	7bbb      	ldrb	r3, [r7, #14]
 800dc68:	2b80      	cmp	r3, #128	@ 0x80
 800dc6a:	d00a      	beq.n	800dc82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc6c:	7bbb      	ldrb	r3, [r7, #14]
 800dc6e:	4619      	mov	r1, r3
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f001 f9e5 	bl	800f040 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc76:	2180      	movs	r1, #128	@ 0x80
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f001 f9e1 	bl	800f040 <USBD_LL_StallEP>
 800dc7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc80:	e020      	b.n	800dcc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dc82:	6839      	ldr	r1, [r7, #0]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 fca4 	bl	800e5d2 <USBD_CtlError>
              break;
 800dc8a:	e01b      	b.n	800dcc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	885b      	ldrh	r3, [r3, #2]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d10e      	bne.n	800dcb2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dc94:	7bbb      	ldrb	r3, [r7, #14]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d00b      	beq.n	800dcb2 <USBD_StdEPReq+0xfe>
 800dc9a:	7bbb      	ldrb	r3, [r7, #14]
 800dc9c:	2b80      	cmp	r3, #128	@ 0x80
 800dc9e:	d008      	beq.n	800dcb2 <USBD_StdEPReq+0xfe>
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	88db      	ldrh	r3, [r3, #6]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d104      	bne.n	800dcb2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dca8:	7bbb      	ldrb	r3, [r7, #14]
 800dcaa:	4619      	mov	r1, r3
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f001 f9c7 	bl	800f040 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 fd64 	bl	800e780 <USBD_CtlSendStatus>

              break;
 800dcb8:	e004      	b.n	800dcc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dcba:	6839      	ldr	r1, [r7, #0]
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 fc88 	bl	800e5d2 <USBD_CtlError>
              break;
 800dcc2:	bf00      	nop
          }
          break;
 800dcc4:	e107      	b.n	800ded6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	2b02      	cmp	r3, #2
 800dcd0:	d002      	beq.n	800dcd8 <USBD_StdEPReq+0x124>
 800dcd2:	2b03      	cmp	r3, #3
 800dcd4:	d016      	beq.n	800dd04 <USBD_StdEPReq+0x150>
 800dcd6:	e04b      	b.n	800dd70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dcd8:	7bbb      	ldrb	r3, [r7, #14]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00d      	beq.n	800dcfa <USBD_StdEPReq+0x146>
 800dcde:	7bbb      	ldrb	r3, [r7, #14]
 800dce0:	2b80      	cmp	r3, #128	@ 0x80
 800dce2:	d00a      	beq.n	800dcfa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dce4:	7bbb      	ldrb	r3, [r7, #14]
 800dce6:	4619      	mov	r1, r3
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f001 f9a9 	bl	800f040 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dcee:	2180      	movs	r1, #128	@ 0x80
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f001 f9a5 	bl	800f040 <USBD_LL_StallEP>
 800dcf6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dcf8:	e040      	b.n	800dd7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dcfa:	6839      	ldr	r1, [r7, #0]
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 fc68 	bl	800e5d2 <USBD_CtlError>
              break;
 800dd02:	e03b      	b.n	800dd7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	885b      	ldrh	r3, [r3, #2]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d136      	bne.n	800dd7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dd0c:	7bbb      	ldrb	r3, [r7, #14]
 800dd0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d004      	beq.n	800dd20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dd16:	7bbb      	ldrb	r3, [r7, #14]
 800dd18:	4619      	mov	r1, r3
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f001 f9af 	bl	800f07e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 fd2d 	bl	800e780 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dd26:	7bbb      	ldrb	r3, [r7, #14]
 800dd28:	4619      	mov	r1, r3
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f7ff fde4 	bl	800d8f8 <USBD_CoreFindEP>
 800dd30:	4603      	mov	r3, r0
 800dd32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd34:	7b7b      	ldrb	r3, [r7, #13]
 800dd36:	2bff      	cmp	r3, #255	@ 0xff
 800dd38:	d01f      	beq.n	800dd7a <USBD_StdEPReq+0x1c6>
 800dd3a:	7b7b      	ldrb	r3, [r7, #13]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d11c      	bne.n	800dd7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dd40:	7b7a      	ldrb	r2, [r7, #13]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dd48:	7b7a      	ldrb	r2, [r7, #13]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	32ae      	adds	r2, #174	@ 0xae
 800dd4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd52:	689b      	ldr	r3, [r3, #8]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d010      	beq.n	800dd7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dd58:	7b7a      	ldrb	r2, [r7, #13]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	32ae      	adds	r2, #174	@ 0xae
 800dd5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	6839      	ldr	r1, [r7, #0]
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	4798      	blx	r3
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dd6e:	e004      	b.n	800dd7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dd70:	6839      	ldr	r1, [r7, #0]
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 fc2d 	bl	800e5d2 <USBD_CtlError>
              break;
 800dd78:	e000      	b.n	800dd7c <USBD_StdEPReq+0x1c8>
              break;
 800dd7a:	bf00      	nop
          }
          break;
 800dd7c:	e0ab      	b.n	800ded6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	2b02      	cmp	r3, #2
 800dd88:	d002      	beq.n	800dd90 <USBD_StdEPReq+0x1dc>
 800dd8a:	2b03      	cmp	r3, #3
 800dd8c:	d032      	beq.n	800ddf4 <USBD_StdEPReq+0x240>
 800dd8e:	e097      	b.n	800dec0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd90:	7bbb      	ldrb	r3, [r7, #14]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d007      	beq.n	800dda6 <USBD_StdEPReq+0x1f2>
 800dd96:	7bbb      	ldrb	r3, [r7, #14]
 800dd98:	2b80      	cmp	r3, #128	@ 0x80
 800dd9a:	d004      	beq.n	800dda6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dd9c:	6839      	ldr	r1, [r7, #0]
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 fc17 	bl	800e5d2 <USBD_CtlError>
                break;
 800dda4:	e091      	b.n	800deca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dda6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	da0b      	bge.n	800ddc6 <USBD_StdEPReq+0x212>
 800ddae:	7bbb      	ldrb	r3, [r7, #14]
 800ddb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ddb4:	4613      	mov	r3, r2
 800ddb6:	009b      	lsls	r3, r3, #2
 800ddb8:	4413      	add	r3, r2
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	3310      	adds	r3, #16
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	3304      	adds	r3, #4
 800ddc4:	e00b      	b.n	800ddde <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ddc6:	7bbb      	ldrb	r3, [r7, #14]
 800ddc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddcc:	4613      	mov	r3, r2
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	4413      	add	r3, r2
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ddd8:	687a      	ldr	r2, [r7, #4]
 800ddda:	4413      	add	r3, r2
 800dddc:	3304      	adds	r3, #4
 800ddde:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	2200      	movs	r2, #0
 800dde4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	2202      	movs	r2, #2
 800ddea:	4619      	mov	r1, r3
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 fc6d 	bl	800e6cc <USBD_CtlSendData>
              break;
 800ddf2:	e06a      	b.n	800deca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ddf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	da11      	bge.n	800de20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ddfc:	7bbb      	ldrb	r3, [r7, #14]
 800ddfe:	f003 020f 	and.w	r2, r3, #15
 800de02:	6879      	ldr	r1, [r7, #4]
 800de04:	4613      	mov	r3, r2
 800de06:	009b      	lsls	r3, r3, #2
 800de08:	4413      	add	r3, r2
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	440b      	add	r3, r1
 800de0e:	3324      	adds	r3, #36	@ 0x24
 800de10:	881b      	ldrh	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d117      	bne.n	800de46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800de16:	6839      	ldr	r1, [r7, #0]
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f000 fbda 	bl	800e5d2 <USBD_CtlError>
                  break;
 800de1e:	e054      	b.n	800deca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800de20:	7bbb      	ldrb	r3, [r7, #14]
 800de22:	f003 020f 	and.w	r2, r3, #15
 800de26:	6879      	ldr	r1, [r7, #4]
 800de28:	4613      	mov	r3, r2
 800de2a:	009b      	lsls	r3, r3, #2
 800de2c:	4413      	add	r3, r2
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	440b      	add	r3, r1
 800de32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800de36:	881b      	ldrh	r3, [r3, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d104      	bne.n	800de46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800de3c:	6839      	ldr	r1, [r7, #0]
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 fbc7 	bl	800e5d2 <USBD_CtlError>
                  break;
 800de44:	e041      	b.n	800deca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	da0b      	bge.n	800de66 <USBD_StdEPReq+0x2b2>
 800de4e:	7bbb      	ldrb	r3, [r7, #14]
 800de50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de54:	4613      	mov	r3, r2
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	4413      	add	r3, r2
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	3310      	adds	r3, #16
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	4413      	add	r3, r2
 800de62:	3304      	adds	r3, #4
 800de64:	e00b      	b.n	800de7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800de66:	7bbb      	ldrb	r3, [r7, #14]
 800de68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de6c:	4613      	mov	r3, r2
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	4413      	add	r3, r2
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	4413      	add	r3, r2
 800de7c:	3304      	adds	r3, #4
 800de7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800de80:	7bbb      	ldrb	r3, [r7, #14]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d002      	beq.n	800de8c <USBD_StdEPReq+0x2d8>
 800de86:	7bbb      	ldrb	r3, [r7, #14]
 800de88:	2b80      	cmp	r3, #128	@ 0x80
 800de8a:	d103      	bne.n	800de94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	2200      	movs	r2, #0
 800de90:	601a      	str	r2, [r3, #0]
 800de92:	e00e      	b.n	800deb2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800de94:	7bbb      	ldrb	r3, [r7, #14]
 800de96:	4619      	mov	r1, r3
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f001 f90f 	bl	800f0bc <USBD_LL_IsStallEP>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d003      	beq.n	800deac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	2201      	movs	r2, #1
 800dea8:	601a      	str	r2, [r3, #0]
 800deaa:	e002      	b.n	800deb2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	2200      	movs	r2, #0
 800deb0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	2202      	movs	r2, #2
 800deb6:	4619      	mov	r1, r3
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 fc07 	bl	800e6cc <USBD_CtlSendData>
              break;
 800debe:	e004      	b.n	800deca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dec0:	6839      	ldr	r1, [r7, #0]
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 fb85 	bl	800e5d2 <USBD_CtlError>
              break;
 800dec8:	bf00      	nop
          }
          break;
 800deca:	e004      	b.n	800ded6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800decc:	6839      	ldr	r1, [r7, #0]
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 fb7f 	bl	800e5d2 <USBD_CtlError>
          break;
 800ded4:	bf00      	nop
      }
      break;
 800ded6:	e005      	b.n	800dee4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ded8:	6839      	ldr	r1, [r7, #0]
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 fb79 	bl	800e5d2 <USBD_CtlError>
      break;
 800dee0:	e000      	b.n	800dee4 <USBD_StdEPReq+0x330>
      break;
 800dee2:	bf00      	nop
  }

  return ret;
 800dee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
	...

0800def0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800defa:	2300      	movs	r3, #0
 800defc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800defe:	2300      	movs	r3, #0
 800df00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800df02:	2300      	movs	r3, #0
 800df04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	885b      	ldrh	r3, [r3, #2]
 800df0a:	0a1b      	lsrs	r3, r3, #8
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	3b01      	subs	r3, #1
 800df10:	2b0e      	cmp	r3, #14
 800df12:	f200 8152 	bhi.w	800e1ba <USBD_GetDescriptor+0x2ca>
 800df16:	a201      	add	r2, pc, #4	@ (adr r2, 800df1c <USBD_GetDescriptor+0x2c>)
 800df18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df1c:	0800df8d 	.word	0x0800df8d
 800df20:	0800dfa5 	.word	0x0800dfa5
 800df24:	0800dfe5 	.word	0x0800dfe5
 800df28:	0800e1bb 	.word	0x0800e1bb
 800df2c:	0800e1bb 	.word	0x0800e1bb
 800df30:	0800e15b 	.word	0x0800e15b
 800df34:	0800e187 	.word	0x0800e187
 800df38:	0800e1bb 	.word	0x0800e1bb
 800df3c:	0800e1bb 	.word	0x0800e1bb
 800df40:	0800e1bb 	.word	0x0800e1bb
 800df44:	0800e1bb 	.word	0x0800e1bb
 800df48:	0800e1bb 	.word	0x0800e1bb
 800df4c:	0800e1bb 	.word	0x0800e1bb
 800df50:	0800e1bb 	.word	0x0800e1bb
 800df54:	0800df59 	.word	0x0800df59
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df5e:	69db      	ldr	r3, [r3, #28]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d00b      	beq.n	800df7c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df6a:	69db      	ldr	r3, [r3, #28]
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	7c12      	ldrb	r2, [r2, #16]
 800df70:	f107 0108 	add.w	r1, r7, #8
 800df74:	4610      	mov	r0, r2
 800df76:	4798      	blx	r3
 800df78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df7a:	e126      	b.n	800e1ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800df7c:	6839      	ldr	r1, [r7, #0]
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f000 fb27 	bl	800e5d2 <USBD_CtlError>
        err++;
 800df84:	7afb      	ldrb	r3, [r7, #11]
 800df86:	3301      	adds	r3, #1
 800df88:	72fb      	strb	r3, [r7, #11]
      break;
 800df8a:	e11e      	b.n	800e1ca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	7c12      	ldrb	r2, [r2, #16]
 800df98:	f107 0108 	add.w	r1, r7, #8
 800df9c:	4610      	mov	r0, r2
 800df9e:	4798      	blx	r3
 800dfa0:	60f8      	str	r0, [r7, #12]
      break;
 800dfa2:	e112      	b.n	800e1ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	7c1b      	ldrb	r3, [r3, #16]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d10d      	bne.n	800dfc8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dfb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfb4:	f107 0208 	add.w	r2, r7, #8
 800dfb8:	4610      	mov	r0, r2
 800dfba:	4798      	blx	r3
 800dfbc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dfc6:	e100      	b.n	800e1ca <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dfce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfd0:	f107 0208 	add.w	r2, r7, #8
 800dfd4:	4610      	mov	r0, r2
 800dfd6:	4798      	blx	r3
 800dfd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	3301      	adds	r3, #1
 800dfde:	2202      	movs	r2, #2
 800dfe0:	701a      	strb	r2, [r3, #0]
      break;
 800dfe2:	e0f2      	b.n	800e1ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	885b      	ldrh	r3, [r3, #2]
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	2b05      	cmp	r3, #5
 800dfec:	f200 80ac 	bhi.w	800e148 <USBD_GetDescriptor+0x258>
 800dff0:	a201      	add	r2, pc, #4	@ (adr r2, 800dff8 <USBD_GetDescriptor+0x108>)
 800dff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dff6:	bf00      	nop
 800dff8:	0800e011 	.word	0x0800e011
 800dffc:	0800e045 	.word	0x0800e045
 800e000:	0800e079 	.word	0x0800e079
 800e004:	0800e0ad 	.word	0x0800e0ad
 800e008:	0800e0e1 	.word	0x0800e0e1
 800e00c:	0800e115 	.word	0x0800e115
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d00b      	beq.n	800e034 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	7c12      	ldrb	r2, [r2, #16]
 800e028:	f107 0108 	add.w	r1, r7, #8
 800e02c:	4610      	mov	r0, r2
 800e02e:	4798      	blx	r3
 800e030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e032:	e091      	b.n	800e158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e034:	6839      	ldr	r1, [r7, #0]
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 facb 	bl	800e5d2 <USBD_CtlError>
            err++;
 800e03c:	7afb      	ldrb	r3, [r7, #11]
 800e03e:	3301      	adds	r3, #1
 800e040:	72fb      	strb	r3, [r7, #11]
          break;
 800e042:	e089      	b.n	800e158 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d00b      	beq.n	800e068 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	7c12      	ldrb	r2, [r2, #16]
 800e05c:	f107 0108 	add.w	r1, r7, #8
 800e060:	4610      	mov	r0, r2
 800e062:	4798      	blx	r3
 800e064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e066:	e077      	b.n	800e158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e068:	6839      	ldr	r1, [r7, #0]
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 fab1 	bl	800e5d2 <USBD_CtlError>
            err++;
 800e070:	7afb      	ldrb	r3, [r7, #11]
 800e072:	3301      	adds	r3, #1
 800e074:	72fb      	strb	r3, [r7, #11]
          break;
 800e076:	e06f      	b.n	800e158 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00b      	beq.n	800e09c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	7c12      	ldrb	r2, [r2, #16]
 800e090:	f107 0108 	add.w	r1, r7, #8
 800e094:	4610      	mov	r0, r2
 800e096:	4798      	blx	r3
 800e098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e09a:	e05d      	b.n	800e158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e09c:	6839      	ldr	r1, [r7, #0]
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 fa97 	bl	800e5d2 <USBD_CtlError>
            err++;
 800e0a4:	7afb      	ldrb	r3, [r7, #11]
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e0aa:	e055      	b.n	800e158 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0b2:	691b      	ldr	r3, [r3, #16]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d00b      	beq.n	800e0d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0be:	691b      	ldr	r3, [r3, #16]
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	7c12      	ldrb	r2, [r2, #16]
 800e0c4:	f107 0108 	add.w	r1, r7, #8
 800e0c8:	4610      	mov	r0, r2
 800e0ca:	4798      	blx	r3
 800e0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0ce:	e043      	b.n	800e158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e0d0:	6839      	ldr	r1, [r7, #0]
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 fa7d 	bl	800e5d2 <USBD_CtlError>
            err++;
 800e0d8:	7afb      	ldrb	r3, [r7, #11]
 800e0da:	3301      	adds	r3, #1
 800e0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800e0de:	e03b      	b.n	800e158 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0e6:	695b      	ldr	r3, [r3, #20]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00b      	beq.n	800e104 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0f2:	695b      	ldr	r3, [r3, #20]
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	7c12      	ldrb	r2, [r2, #16]
 800e0f8:	f107 0108 	add.w	r1, r7, #8
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	4798      	blx	r3
 800e100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e102:	e029      	b.n	800e158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e104:	6839      	ldr	r1, [r7, #0]
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 fa63 	bl	800e5d2 <USBD_CtlError>
            err++;
 800e10c:	7afb      	ldrb	r3, [r7, #11]
 800e10e:	3301      	adds	r3, #1
 800e110:	72fb      	strb	r3, [r7, #11]
          break;
 800e112:	e021      	b.n	800e158 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d00b      	beq.n	800e138 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e126:	699b      	ldr	r3, [r3, #24]
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	7c12      	ldrb	r2, [r2, #16]
 800e12c:	f107 0108 	add.w	r1, r7, #8
 800e130:	4610      	mov	r0, r2
 800e132:	4798      	blx	r3
 800e134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e136:	e00f      	b.n	800e158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e138:	6839      	ldr	r1, [r7, #0]
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 fa49 	bl	800e5d2 <USBD_CtlError>
            err++;
 800e140:	7afb      	ldrb	r3, [r7, #11]
 800e142:	3301      	adds	r3, #1
 800e144:	72fb      	strb	r3, [r7, #11]
          break;
 800e146:	e007      	b.n	800e158 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e148:	6839      	ldr	r1, [r7, #0]
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 fa41 	bl	800e5d2 <USBD_CtlError>
          err++;
 800e150:	7afb      	ldrb	r3, [r7, #11]
 800e152:	3301      	adds	r3, #1
 800e154:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e156:	bf00      	nop
      }
      break;
 800e158:	e037      	b.n	800e1ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	7c1b      	ldrb	r3, [r3, #16]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d109      	bne.n	800e176 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e16a:	f107 0208 	add.w	r2, r7, #8
 800e16e:	4610      	mov	r0, r2
 800e170:	4798      	blx	r3
 800e172:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e174:	e029      	b.n	800e1ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e176:	6839      	ldr	r1, [r7, #0]
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f000 fa2a 	bl	800e5d2 <USBD_CtlError>
        err++;
 800e17e:	7afb      	ldrb	r3, [r7, #11]
 800e180:	3301      	adds	r3, #1
 800e182:	72fb      	strb	r3, [r7, #11]
      break;
 800e184:	e021      	b.n	800e1ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	7c1b      	ldrb	r3, [r3, #16]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d10d      	bne.n	800e1aa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e196:	f107 0208 	add.w	r2, r7, #8
 800e19a:	4610      	mov	r0, r2
 800e19c:	4798      	blx	r3
 800e19e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	2207      	movs	r2, #7
 800e1a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1a8:	e00f      	b.n	800e1ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e1aa:	6839      	ldr	r1, [r7, #0]
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 fa10 	bl	800e5d2 <USBD_CtlError>
        err++;
 800e1b2:	7afb      	ldrb	r3, [r7, #11]
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	72fb      	strb	r3, [r7, #11]
      break;
 800e1b8:	e007      	b.n	800e1ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e1ba:	6839      	ldr	r1, [r7, #0]
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f000 fa08 	bl	800e5d2 <USBD_CtlError>
      err++;
 800e1c2:	7afb      	ldrb	r3, [r7, #11]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	72fb      	strb	r3, [r7, #11]
      break;
 800e1c8:	bf00      	nop
  }

  if (err != 0U)
 800e1ca:	7afb      	ldrb	r3, [r7, #11]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d11e      	bne.n	800e20e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	88db      	ldrh	r3, [r3, #6]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d016      	beq.n	800e206 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e1d8:	893b      	ldrh	r3, [r7, #8]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00e      	beq.n	800e1fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	88da      	ldrh	r2, [r3, #6]
 800e1e2:	893b      	ldrh	r3, [r7, #8]
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	bf28      	it	cs
 800e1e8:	4613      	movcs	r3, r2
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e1ee:	893b      	ldrh	r3, [r7, #8]
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	68f9      	ldr	r1, [r7, #12]
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f000 fa69 	bl	800e6cc <USBD_CtlSendData>
 800e1fa:	e009      	b.n	800e210 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e1fc:	6839      	ldr	r1, [r7, #0]
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 f9e7 	bl	800e5d2 <USBD_CtlError>
 800e204:	e004      	b.n	800e210 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 faba 	bl	800e780 <USBD_CtlSendStatus>
 800e20c:	e000      	b.n	800e210 <USBD_GetDescriptor+0x320>
    return;
 800e20e:	bf00      	nop
  }
}
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop

0800e218 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	889b      	ldrh	r3, [r3, #4]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d131      	bne.n	800e28e <USBD_SetAddress+0x76>
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	88db      	ldrh	r3, [r3, #6]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d12d      	bne.n	800e28e <USBD_SetAddress+0x76>
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	885b      	ldrh	r3, [r3, #2]
 800e236:	2b7f      	cmp	r3, #127	@ 0x7f
 800e238:	d829      	bhi.n	800e28e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	885b      	ldrh	r3, [r3, #2]
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e244:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	2b03      	cmp	r3, #3
 800e250:	d104      	bne.n	800e25c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e252:	6839      	ldr	r1, [r7, #0]
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f000 f9bc 	bl	800e5d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e25a:	e01d      	b.n	800e298 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	7bfa      	ldrb	r2, [r7, #15]
 800e260:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e264:	7bfb      	ldrb	r3, [r7, #15]
 800e266:	4619      	mov	r1, r3
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f000 ff53 	bl	800f114 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fa86 	bl	800e780 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e274:	7bfb      	ldrb	r3, [r7, #15]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d004      	beq.n	800e284 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2202      	movs	r2, #2
 800e27e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e282:	e009      	b.n	800e298 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2201      	movs	r2, #1
 800e288:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e28c:	e004      	b.n	800e298 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e28e:	6839      	ldr	r1, [r7, #0]
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 f99e 	bl	800e5d2 <USBD_CtlError>
  }
}
 800e296:	bf00      	nop
 800e298:	bf00      	nop
 800e29a:	3710      	adds	r7, #16
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	885b      	ldrh	r3, [r3, #2]
 800e2b2:	b2da      	uxtb	r2, r3
 800e2b4:	4b4e      	ldr	r3, [pc, #312]	@ (800e3f0 <USBD_SetConfig+0x150>)
 800e2b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e2b8:	4b4d      	ldr	r3, [pc, #308]	@ (800e3f0 <USBD_SetConfig+0x150>)
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d905      	bls.n	800e2cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e2c0:	6839      	ldr	r1, [r7, #0]
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 f985 	bl	800e5d2 <USBD_CtlError>
    return USBD_FAIL;
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	e08c      	b.n	800e3e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	d002      	beq.n	800e2de <USBD_SetConfig+0x3e>
 800e2d8:	2b03      	cmp	r3, #3
 800e2da:	d029      	beq.n	800e330 <USBD_SetConfig+0x90>
 800e2dc:	e075      	b.n	800e3ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e2de:	4b44      	ldr	r3, [pc, #272]	@ (800e3f0 <USBD_SetConfig+0x150>)
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d020      	beq.n	800e328 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e2e6:	4b42      	ldr	r3, [pc, #264]	@ (800e3f0 <USBD_SetConfig+0x150>)
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e2f0:	4b3f      	ldr	r3, [pc, #252]	@ (800e3f0 <USBD_SetConfig+0x150>)
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7fe ffb9 	bl	800d26e <USBD_SetClassConfig>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e300:	7bfb      	ldrb	r3, [r7, #15]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d008      	beq.n	800e318 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 f962 	bl	800e5d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2202      	movs	r2, #2
 800e312:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e316:	e065      	b.n	800e3e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 fa31 	bl	800e780 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2203      	movs	r2, #3
 800e322:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e326:	e05d      	b.n	800e3e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 fa29 	bl	800e780 <USBD_CtlSendStatus>
      break;
 800e32e:	e059      	b.n	800e3e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e330:	4b2f      	ldr	r3, [pc, #188]	@ (800e3f0 <USBD_SetConfig+0x150>)
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d112      	bne.n	800e35e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2202      	movs	r2, #2
 800e33c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e340:	4b2b      	ldr	r3, [pc, #172]	@ (800e3f0 <USBD_SetConfig+0x150>)
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	461a      	mov	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e34a:	4b29      	ldr	r3, [pc, #164]	@ (800e3f0 <USBD_SetConfig+0x150>)
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	4619      	mov	r1, r3
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f7fe ffa8 	bl	800d2a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 fa12 	bl	800e780 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e35c:	e042      	b.n	800e3e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e35e:	4b24      	ldr	r3, [pc, #144]	@ (800e3f0 <USBD_SetConfig+0x150>)
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	461a      	mov	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d02a      	beq.n	800e3c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	b2db      	uxtb	r3, r3
 800e372:	4619      	mov	r1, r3
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f7fe ff96 	bl	800d2a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e37a:	4b1d      	ldr	r3, [pc, #116]	@ (800e3f0 <USBD_SetConfig+0x150>)
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	461a      	mov	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e384:	4b1a      	ldr	r3, [pc, #104]	@ (800e3f0 <USBD_SetConfig+0x150>)
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	4619      	mov	r1, r3
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f7fe ff6f 	bl	800d26e <USBD_SetClassConfig>
 800e390:	4603      	mov	r3, r0
 800e392:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e394:	7bfb      	ldrb	r3, [r7, #15]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d00f      	beq.n	800e3ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e39a:	6839      	ldr	r1, [r7, #0]
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 f918 	bl	800e5d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f7fe ff7b 	bl	800d2a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2202      	movs	r2, #2
 800e3b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e3b8:	e014      	b.n	800e3e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 f9e0 	bl	800e780 <USBD_CtlSendStatus>
      break;
 800e3c0:	e010      	b.n	800e3e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 f9dc 	bl	800e780 <USBD_CtlSendStatus>
      break;
 800e3c8:	e00c      	b.n	800e3e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e3ca:	6839      	ldr	r1, [r7, #0]
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 f900 	bl	800e5d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e3d2:	4b07      	ldr	r3, [pc, #28]	@ (800e3f0 <USBD_SetConfig+0x150>)
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f7fe ff64 	bl	800d2a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e3de:	2303      	movs	r3, #3
 800e3e0:	73fb      	strb	r3, [r7, #15]
      break;
 800e3e2:	bf00      	nop
  }

  return ret;
 800e3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3710      	adds	r7, #16
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	2000077c 	.word	0x2000077c

0800e3f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	88db      	ldrh	r3, [r3, #6]
 800e402:	2b01      	cmp	r3, #1
 800e404:	d004      	beq.n	800e410 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e406:	6839      	ldr	r1, [r7, #0]
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f000 f8e2 	bl	800e5d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e40e:	e023      	b.n	800e458 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e416:	b2db      	uxtb	r3, r3
 800e418:	2b02      	cmp	r3, #2
 800e41a:	dc02      	bgt.n	800e422 <USBD_GetConfig+0x2e>
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	dc03      	bgt.n	800e428 <USBD_GetConfig+0x34>
 800e420:	e015      	b.n	800e44e <USBD_GetConfig+0x5a>
 800e422:	2b03      	cmp	r3, #3
 800e424:	d00b      	beq.n	800e43e <USBD_GetConfig+0x4a>
 800e426:	e012      	b.n	800e44e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	3308      	adds	r3, #8
 800e432:	2201      	movs	r2, #1
 800e434:	4619      	mov	r1, r3
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 f948 	bl	800e6cc <USBD_CtlSendData>
        break;
 800e43c:	e00c      	b.n	800e458 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	3304      	adds	r3, #4
 800e442:	2201      	movs	r2, #1
 800e444:	4619      	mov	r1, r3
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f000 f940 	bl	800e6cc <USBD_CtlSendData>
        break;
 800e44c:	e004      	b.n	800e458 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e44e:	6839      	ldr	r1, [r7, #0]
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 f8be 	bl	800e5d2 <USBD_CtlError>
        break;
 800e456:	bf00      	nop
}
 800e458:	bf00      	nop
 800e45a:	3708      	adds	r7, #8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e470:	b2db      	uxtb	r3, r3
 800e472:	3b01      	subs	r3, #1
 800e474:	2b02      	cmp	r3, #2
 800e476:	d81e      	bhi.n	800e4b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	88db      	ldrh	r3, [r3, #6]
 800e47c:	2b02      	cmp	r3, #2
 800e47e:	d004      	beq.n	800e48a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e480:	6839      	ldr	r1, [r7, #0]
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 f8a5 	bl	800e5d2 <USBD_CtlError>
        break;
 800e488:	e01a      	b.n	800e4c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2201      	movs	r2, #1
 800e48e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e496:	2b00      	cmp	r3, #0
 800e498:	d005      	beq.n	800e4a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	f043 0202 	orr.w	r2, r3, #2
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	330c      	adds	r3, #12
 800e4aa:	2202      	movs	r2, #2
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 f90c 	bl	800e6cc <USBD_CtlSendData>
      break;
 800e4b4:	e004      	b.n	800e4c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e4b6:	6839      	ldr	r1, [r7, #0]
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 f88a 	bl	800e5d2 <USBD_CtlError>
      break;
 800e4be:	bf00      	nop
  }
}
 800e4c0:	bf00      	nop
 800e4c2:	3708      	adds	r7, #8
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	885b      	ldrh	r3, [r3, #2]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d107      	bne.n	800e4ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2201      	movs	r2, #1
 800e4de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 f94c 	bl	800e780 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e4e8:	e013      	b.n	800e512 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	885b      	ldrh	r3, [r3, #2]
 800e4ee:	2b02      	cmp	r3, #2
 800e4f0:	d10b      	bne.n	800e50a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	889b      	ldrh	r3, [r3, #4]
 800e4f6:	0a1b      	lsrs	r3, r3, #8
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f000 f93c 	bl	800e780 <USBD_CtlSendStatus>
}
 800e508:	e003      	b.n	800e512 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e50a:	6839      	ldr	r1, [r7, #0]
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 f860 	bl	800e5d2 <USBD_CtlError>
}
 800e512:	bf00      	nop
 800e514:	3708      	adds	r7, #8
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}

0800e51a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b082      	sub	sp, #8
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
 800e522:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e52a:	b2db      	uxtb	r3, r3
 800e52c:	3b01      	subs	r3, #1
 800e52e:	2b02      	cmp	r3, #2
 800e530:	d80b      	bhi.n	800e54a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	885b      	ldrh	r3, [r3, #2]
 800e536:	2b01      	cmp	r3, #1
 800e538:	d10c      	bne.n	800e554 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2200      	movs	r2, #0
 800e53e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f000 f91c 	bl	800e780 <USBD_CtlSendStatus>
      }
      break;
 800e548:	e004      	b.n	800e554 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e54a:	6839      	ldr	r1, [r7, #0]
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 f840 	bl	800e5d2 <USBD_CtlError>
      break;
 800e552:	e000      	b.n	800e556 <USBD_ClrFeature+0x3c>
      break;
 800e554:	bf00      	nop
  }
}
 800e556:	bf00      	nop
 800e558:	3708      	adds	r7, #8
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b084      	sub	sp, #16
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
 800e566:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	781a      	ldrb	r2, [r3, #0]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	3301      	adds	r3, #1
 800e578:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	781a      	ldrb	r2, [r3, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	3301      	adds	r3, #1
 800e586:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	f7ff fa16 	bl	800d9ba <SWAPBYTE>
 800e58e:	4603      	mov	r3, r0
 800e590:	461a      	mov	r2, r3
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	3301      	adds	r3, #1
 800e59a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f7ff fa09 	bl	800d9ba <SWAPBYTE>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	f7ff f9fc 	bl	800d9ba <SWAPBYTE>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	80da      	strh	r2, [r3, #6]
}
 800e5ca:	bf00      	nop
 800e5cc:	3710      	adds	r7, #16
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}

0800e5d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5d2:	b580      	push	{r7, lr}
 800e5d4:	b082      	sub	sp, #8
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
 800e5da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5dc:	2180      	movs	r1, #128	@ 0x80
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 fd2e 	bl	800f040 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e5e4:	2100      	movs	r1, #0
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 fd2a 	bl	800f040 <USBD_LL_StallEP>
}
 800e5ec:	bf00      	nop
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e600:	2300      	movs	r3, #0
 800e602:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d042      	beq.n	800e690 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e60e:	6938      	ldr	r0, [r7, #16]
 800e610:	f000 f842 	bl	800e698 <USBD_GetLen>
 800e614:	4603      	mov	r3, r0
 800e616:	3301      	adds	r3, #1
 800e618:	005b      	lsls	r3, r3, #1
 800e61a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e61e:	d808      	bhi.n	800e632 <USBD_GetString+0x3e>
 800e620:	6938      	ldr	r0, [r7, #16]
 800e622:	f000 f839 	bl	800e698 <USBD_GetLen>
 800e626:	4603      	mov	r3, r0
 800e628:	3301      	adds	r3, #1
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	005b      	lsls	r3, r3, #1
 800e62e:	b29a      	uxth	r2, r3
 800e630:	e001      	b.n	800e636 <USBD_GetString+0x42>
 800e632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e63a:	7dfb      	ldrb	r3, [r7, #23]
 800e63c:	68ba      	ldr	r2, [r7, #8]
 800e63e:	4413      	add	r3, r2
 800e640:	687a      	ldr	r2, [r7, #4]
 800e642:	7812      	ldrb	r2, [r2, #0]
 800e644:	701a      	strb	r2, [r3, #0]
  idx++;
 800e646:	7dfb      	ldrb	r3, [r7, #23]
 800e648:	3301      	adds	r3, #1
 800e64a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e64c:	7dfb      	ldrb	r3, [r7, #23]
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	4413      	add	r3, r2
 800e652:	2203      	movs	r2, #3
 800e654:	701a      	strb	r2, [r3, #0]
  idx++;
 800e656:	7dfb      	ldrb	r3, [r7, #23]
 800e658:	3301      	adds	r3, #1
 800e65a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e65c:	e013      	b.n	800e686 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e65e:	7dfb      	ldrb	r3, [r7, #23]
 800e660:	68ba      	ldr	r2, [r7, #8]
 800e662:	4413      	add	r3, r2
 800e664:	693a      	ldr	r2, [r7, #16]
 800e666:	7812      	ldrb	r2, [r2, #0]
 800e668:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	3301      	adds	r3, #1
 800e66e:	613b      	str	r3, [r7, #16]
    idx++;
 800e670:	7dfb      	ldrb	r3, [r7, #23]
 800e672:	3301      	adds	r3, #1
 800e674:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e676:	7dfb      	ldrb	r3, [r7, #23]
 800e678:	68ba      	ldr	r2, [r7, #8]
 800e67a:	4413      	add	r3, r2
 800e67c:	2200      	movs	r2, #0
 800e67e:	701a      	strb	r2, [r3, #0]
    idx++;
 800e680:	7dfb      	ldrb	r3, [r7, #23]
 800e682:	3301      	adds	r3, #1
 800e684:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d1e7      	bne.n	800e65e <USBD_GetString+0x6a>
 800e68e:	e000      	b.n	800e692 <USBD_GetString+0x9e>
    return;
 800e690:	bf00      	nop
  }
}
 800e692:	3718      	adds	r7, #24
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e698:	b480      	push	{r7}
 800e69a:	b085      	sub	sp, #20
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e6a8:	e005      	b.n	800e6b6 <USBD_GetLen+0x1e>
  {
    len++;
 800e6aa:	7bfb      	ldrb	r3, [r7, #15]
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d1f5      	bne.n	800e6aa <USBD_GetLen+0x12>
  }

  return len;
 800e6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3714      	adds	r7, #20
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr

0800e6cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2202      	movs	r2, #2
 800e6dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	687a      	ldr	r2, [r7, #4]
 800e6e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	687a      	ldr	r2, [r7, #4]
 800e6ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	68ba      	ldr	r2, [r7, #8]
 800e6f0:	2100      	movs	r1, #0
 800e6f2:	68f8      	ldr	r0, [r7, #12]
 800e6f4:	f000 fd2d 	bl	800f152 <USBD_LL_Transmit>

  return USBD_OK;
 800e6f8:	2300      	movs	r3, #0
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3710      	adds	r7, #16
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}

0800e702 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e702:	b580      	push	{r7, lr}
 800e704:	b084      	sub	sp, #16
 800e706:	af00      	add	r7, sp, #0
 800e708:	60f8      	str	r0, [r7, #12]
 800e70a:	60b9      	str	r1, [r7, #8]
 800e70c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	68ba      	ldr	r2, [r7, #8]
 800e712:	2100      	movs	r1, #0
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f000 fd1c 	bl	800f152 <USBD_LL_Transmit>

  return USBD_OK;
 800e71a:	2300      	movs	r3, #0
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3710      	adds	r7, #16
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2203      	movs	r2, #3
 800e734:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	68ba      	ldr	r2, [r7, #8]
 800e74c:	2100      	movs	r1, #0
 800e74e:	68f8      	ldr	r0, [r7, #12]
 800e750:	f000 fd20 	bl	800f194 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e754:	2300      	movs	r3, #0
}
 800e756:	4618      	mov	r0, r3
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e75e:	b580      	push	{r7, lr}
 800e760:	b084      	sub	sp, #16
 800e762:	af00      	add	r7, sp, #0
 800e764:	60f8      	str	r0, [r7, #12]
 800e766:	60b9      	str	r1, [r7, #8]
 800e768:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	68ba      	ldr	r2, [r7, #8]
 800e76e:	2100      	movs	r1, #0
 800e770:	68f8      	ldr	r0, [r7, #12]
 800e772:	f000 fd0f 	bl	800f194 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e776:	2300      	movs	r3, #0
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3710      	adds	r7, #16
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2204      	movs	r2, #4
 800e78c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e790:	2300      	movs	r3, #0
 800e792:	2200      	movs	r2, #0
 800e794:	2100      	movs	r1, #0
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f000 fcdb 	bl	800f152 <USBD_LL_Transmit>

  return USBD_OK;
 800e79c:	2300      	movs	r3, #0
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3708      	adds	r7, #8
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}

0800e7a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e7a6:	b580      	push	{r7, lr}
 800e7a8:	b082      	sub	sp, #8
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2205      	movs	r2, #5
 800e7b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	2100      	movs	r1, #0
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f000 fce9 	bl	800f194 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7c2:	2300      	movs	r3, #0
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3708      	adds	r7, #8
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	4912      	ldr	r1, [pc, #72]	@ (800e81c <MX_USB_DEVICE_Init+0x50>)
 800e7d4:	4812      	ldr	r0, [pc, #72]	@ (800e820 <MX_USB_DEVICE_Init+0x54>)
 800e7d6:	f7fe fccd 	bl	800d174 <USBD_Init>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d001      	beq.n	800e7e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e7e0:	f7f5 f948 	bl	8003a74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e7e4:	490f      	ldr	r1, [pc, #60]	@ (800e824 <MX_USB_DEVICE_Init+0x58>)
 800e7e6:	480e      	ldr	r0, [pc, #56]	@ (800e820 <MX_USB_DEVICE_Init+0x54>)
 800e7e8:	f7fe fcf4 	bl	800d1d4 <USBD_RegisterClass>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d001      	beq.n	800e7f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e7f2:	f7f5 f93f 	bl	8003a74 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e7f6:	490c      	ldr	r1, [pc, #48]	@ (800e828 <MX_USB_DEVICE_Init+0x5c>)
 800e7f8:	4809      	ldr	r0, [pc, #36]	@ (800e820 <MX_USB_DEVICE_Init+0x54>)
 800e7fa:	f7fe fbeb 	bl	800cfd4 <USBD_CDC_RegisterInterface>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e804:	f7f5 f936 	bl	8003a74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e808:	4805      	ldr	r0, [pc, #20]	@ (800e820 <MX_USB_DEVICE_Init+0x54>)
 800e80a:	f7fe fd19 	bl	800d240 <USBD_Start>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b00      	cmp	r3, #0
 800e812:	d001      	beq.n	800e818 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e814:	f7f5 f92e 	bl	8003a74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e818:	bf00      	nop
 800e81a:	bd80      	pop	{r7, pc}
 800e81c:	20000110 	.word	0x20000110
 800e820:	20000780 	.word	0x20000780
 800e824:	2000007c 	.word	0x2000007c
 800e828:	200000fc 	.word	0x200000fc

0800e82c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e830:	2200      	movs	r2, #0
 800e832:	4905      	ldr	r1, [pc, #20]	@ (800e848 <CDC_Init_FS+0x1c>)
 800e834:	4805      	ldr	r0, [pc, #20]	@ (800e84c <CDC_Init_FS+0x20>)
 800e836:	f7fe fbe7 	bl	800d008 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e83a:	4905      	ldr	r1, [pc, #20]	@ (800e850 <CDC_Init_FS+0x24>)
 800e83c:	4803      	ldr	r0, [pc, #12]	@ (800e84c <CDC_Init_FS+0x20>)
 800e83e:	f7fe fc05 	bl	800d04c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e842:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e844:	4618      	mov	r0, r3
 800e846:	bd80      	pop	{r7, pc}
 800e848:	2000125c 	.word	0x2000125c
 800e84c:	20000780 	.word	0x20000780
 800e850:	20000a5c 	.word	0x20000a5c

0800e854 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e854:	b480      	push	{r7}
 800e856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e858:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr

0800e864 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e864:	b480      	push	{r7}
 800e866:	b083      	sub	sp, #12
 800e868:	af00      	add	r7, sp, #0
 800e86a:	4603      	mov	r3, r0
 800e86c:	6039      	str	r1, [r7, #0]
 800e86e:	71fb      	strb	r3, [r7, #7]
 800e870:	4613      	mov	r3, r2
 800e872:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e874:	79fb      	ldrb	r3, [r7, #7]
 800e876:	2b23      	cmp	r3, #35	@ 0x23
 800e878:	d84a      	bhi.n	800e910 <CDC_Control_FS+0xac>
 800e87a:	a201      	add	r2, pc, #4	@ (adr r2, 800e880 <CDC_Control_FS+0x1c>)
 800e87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e880:	0800e911 	.word	0x0800e911
 800e884:	0800e911 	.word	0x0800e911
 800e888:	0800e911 	.word	0x0800e911
 800e88c:	0800e911 	.word	0x0800e911
 800e890:	0800e911 	.word	0x0800e911
 800e894:	0800e911 	.word	0x0800e911
 800e898:	0800e911 	.word	0x0800e911
 800e89c:	0800e911 	.word	0x0800e911
 800e8a0:	0800e911 	.word	0x0800e911
 800e8a4:	0800e911 	.word	0x0800e911
 800e8a8:	0800e911 	.word	0x0800e911
 800e8ac:	0800e911 	.word	0x0800e911
 800e8b0:	0800e911 	.word	0x0800e911
 800e8b4:	0800e911 	.word	0x0800e911
 800e8b8:	0800e911 	.word	0x0800e911
 800e8bc:	0800e911 	.word	0x0800e911
 800e8c0:	0800e911 	.word	0x0800e911
 800e8c4:	0800e911 	.word	0x0800e911
 800e8c8:	0800e911 	.word	0x0800e911
 800e8cc:	0800e911 	.word	0x0800e911
 800e8d0:	0800e911 	.word	0x0800e911
 800e8d4:	0800e911 	.word	0x0800e911
 800e8d8:	0800e911 	.word	0x0800e911
 800e8dc:	0800e911 	.word	0x0800e911
 800e8e0:	0800e911 	.word	0x0800e911
 800e8e4:	0800e911 	.word	0x0800e911
 800e8e8:	0800e911 	.word	0x0800e911
 800e8ec:	0800e911 	.word	0x0800e911
 800e8f0:	0800e911 	.word	0x0800e911
 800e8f4:	0800e911 	.word	0x0800e911
 800e8f8:	0800e911 	.word	0x0800e911
 800e8fc:	0800e911 	.word	0x0800e911
 800e900:	0800e911 	.word	0x0800e911
 800e904:	0800e911 	.word	0x0800e911
 800e908:	0800e911 	.word	0x0800e911
 800e90c:	0800e911 	.word	0x0800e911
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e910:	bf00      	nop
  }

  return (USBD_OK);
 800e912:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e914:	4618      	mov	r0, r3
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  memcpy(UserTxBufferFS, Buf, *Len);
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	461a      	mov	r2, r3
 800e930:	6879      	ldr	r1, [r7, #4]
 800e932:	480a      	ldr	r0, [pc, #40]	@ (800e95c <CDC_Receive_FS+0x3c>)
 800e934:	f001 ff37 	bl	80107a6 <memcpy>
  USB_CDC_RxHandler(UserTxBufferFS, *Len);
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4619      	mov	r1, r3
 800e93e:	4807      	ldr	r0, [pc, #28]	@ (800e95c <CDC_Receive_FS+0x3c>)
 800e940:	f7f5 f85a 	bl	80039f8 <USB_CDC_RxHandler>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e944:	6879      	ldr	r1, [r7, #4]
 800e946:	4806      	ldr	r0, [pc, #24]	@ (800e960 <CDC_Receive_FS+0x40>)
 800e948:	f7fe fb80 	bl	800d04c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e94c:	4804      	ldr	r0, [pc, #16]	@ (800e960 <CDC_Receive_FS+0x40>)
 800e94e:	f7fe fbdb 	bl	800d108 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e952:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e954:	4618      	mov	r0, r3
 800e956:	3708      	adds	r7, #8
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	2000125c 	.word	0x2000125c
 800e960:	20000780 	.word	0x20000780

0800e964 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	460b      	mov	r3, r1
 800e96e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e970:	2300      	movs	r3, #0
 800e972:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e974:	4b0d      	ldr	r3, [pc, #52]	@ (800e9ac <CDC_Transmit_FS+0x48>)
 800e976:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e97a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e982:	2b00      	cmp	r3, #0
 800e984:	d001      	beq.n	800e98a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e986:	2301      	movs	r3, #1
 800e988:	e00b      	b.n	800e9a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e98a:	887b      	ldrh	r3, [r7, #2]
 800e98c:	461a      	mov	r2, r3
 800e98e:	6879      	ldr	r1, [r7, #4]
 800e990:	4806      	ldr	r0, [pc, #24]	@ (800e9ac <CDC_Transmit_FS+0x48>)
 800e992:	f7fe fb39 	bl	800d008 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e996:	4805      	ldr	r0, [pc, #20]	@ (800e9ac <CDC_Transmit_FS+0x48>)
 800e998:	f7fe fb76 	bl	800d088 <USBD_CDC_TransmitPacket>
 800e99c:	4603      	mov	r3, r0
 800e99e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3710      	adds	r7, #16
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	20000780 	.word	0x20000780

0800e9b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b087      	sub	sp, #28
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	4613      	mov	r3, r2
 800e9bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e9c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	371c      	adds	r7, #28
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
	...

0800e9d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	4603      	mov	r3, r0
 800e9dc:	6039      	str	r1, [r7, #0]
 800e9de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	2212      	movs	r2, #18
 800e9e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e9e6:	4b03      	ldr	r3, [pc, #12]	@ (800e9f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr
 800e9f4:	20000130 	.word	0x20000130

0800e9f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	4603      	mov	r3, r0
 800ea00:	6039      	str	r1, [r7, #0]
 800ea02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	2204      	movs	r2, #4
 800ea08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ea0a:	4b03      	ldr	r3, [pc, #12]	@ (800ea18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	370c      	adds	r7, #12
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr
 800ea18:	20000150 	.word	0x20000150

0800ea1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	4603      	mov	r3, r0
 800ea24:	6039      	str	r1, [r7, #0]
 800ea26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ea28:	79fb      	ldrb	r3, [r7, #7]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d105      	bne.n	800ea3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ea2e:	683a      	ldr	r2, [r7, #0]
 800ea30:	4907      	ldr	r1, [pc, #28]	@ (800ea50 <USBD_FS_ProductStrDescriptor+0x34>)
 800ea32:	4808      	ldr	r0, [pc, #32]	@ (800ea54 <USBD_FS_ProductStrDescriptor+0x38>)
 800ea34:	f7ff fdde 	bl	800e5f4 <USBD_GetString>
 800ea38:	e004      	b.n	800ea44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ea3a:	683a      	ldr	r2, [r7, #0]
 800ea3c:	4904      	ldr	r1, [pc, #16]	@ (800ea50 <USBD_FS_ProductStrDescriptor+0x34>)
 800ea3e:	4805      	ldr	r0, [pc, #20]	@ (800ea54 <USBD_FS_ProductStrDescriptor+0x38>)
 800ea40:	f7ff fdd8 	bl	800e5f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea44:	4b02      	ldr	r3, [pc, #8]	@ (800ea50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3708      	adds	r7, #8
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	20001a5c 	.word	0x20001a5c
 800ea54:	08015868 	.word	0x08015868

0800ea58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	4603      	mov	r3, r0
 800ea60:	6039      	str	r1, [r7, #0]
 800ea62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ea64:	683a      	ldr	r2, [r7, #0]
 800ea66:	4904      	ldr	r1, [pc, #16]	@ (800ea78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ea68:	4804      	ldr	r0, [pc, #16]	@ (800ea7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ea6a:	f7ff fdc3 	bl	800e5f4 <USBD_GetString>
  return USBD_StrDesc;
 800ea6e:	4b02      	ldr	r3, [pc, #8]	@ (800ea78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3708      	adds	r7, #8
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	20001a5c 	.word	0x20001a5c
 800ea7c:	08015880 	.word	0x08015880

0800ea80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	4603      	mov	r3, r0
 800ea88:	6039      	str	r1, [r7, #0]
 800ea8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	221a      	movs	r2, #26
 800ea90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ea92:	f000 f855 	bl	800eb40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ea96:	4b02      	ldr	r3, [pc, #8]	@ (800eaa0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	20000154 	.word	0x20000154

0800eaa4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	4603      	mov	r3, r0
 800eaac:	6039      	str	r1, [r7, #0]
 800eaae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eab0:	79fb      	ldrb	r3, [r7, #7]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d105      	bne.n	800eac2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eab6:	683a      	ldr	r2, [r7, #0]
 800eab8:	4907      	ldr	r1, [pc, #28]	@ (800ead8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eaba:	4808      	ldr	r0, [pc, #32]	@ (800eadc <USBD_FS_ConfigStrDescriptor+0x38>)
 800eabc:	f7ff fd9a 	bl	800e5f4 <USBD_GetString>
 800eac0:	e004      	b.n	800eacc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eac2:	683a      	ldr	r2, [r7, #0]
 800eac4:	4904      	ldr	r1, [pc, #16]	@ (800ead8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eac6:	4805      	ldr	r0, [pc, #20]	@ (800eadc <USBD_FS_ConfigStrDescriptor+0x38>)
 800eac8:	f7ff fd94 	bl	800e5f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eacc:	4b02      	ldr	r3, [pc, #8]	@ (800ead8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3708      	adds	r7, #8
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	20001a5c 	.word	0x20001a5c
 800eadc:	08015894 	.word	0x08015894

0800eae0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	4603      	mov	r3, r0
 800eae8:	6039      	str	r1, [r7, #0]
 800eaea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eaec:	79fb      	ldrb	r3, [r7, #7]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d105      	bne.n	800eafe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	4907      	ldr	r1, [pc, #28]	@ (800eb14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eaf6:	4808      	ldr	r0, [pc, #32]	@ (800eb18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eaf8:	f7ff fd7c 	bl	800e5f4 <USBD_GetString>
 800eafc:	e004      	b.n	800eb08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eafe:	683a      	ldr	r2, [r7, #0]
 800eb00:	4904      	ldr	r1, [pc, #16]	@ (800eb14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb02:	4805      	ldr	r0, [pc, #20]	@ (800eb18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb04:	f7ff fd76 	bl	800e5f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb08:	4b02      	ldr	r3, [pc, #8]	@ (800eb14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3708      	adds	r7, #8
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	20001a5c 	.word	0x20001a5c
 800eb18:	080158a0 	.word	0x080158a0

0800eb1c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	4603      	mov	r3, r0
 800eb24:	6039      	str	r1, [r7, #0]
 800eb26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	220c      	movs	r2, #12
 800eb2c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800eb2e:	4b03      	ldr	r3, [pc, #12]	@ (800eb3c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr
 800eb3c:	20000144 	.word	0x20000144

0800eb40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b084      	sub	sp, #16
 800eb44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800eb46:	4b0f      	ldr	r3, [pc, #60]	@ (800eb84 <Get_SerialNum+0x44>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800eb4c:	4b0e      	ldr	r3, [pc, #56]	@ (800eb88 <Get_SerialNum+0x48>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800eb52:	4b0e      	ldr	r3, [pc, #56]	@ (800eb8c <Get_SerialNum+0x4c>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800eb58:	68fa      	ldr	r2, [r7, #12]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	4413      	add	r3, r2
 800eb5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d009      	beq.n	800eb7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800eb66:	2208      	movs	r2, #8
 800eb68:	4909      	ldr	r1, [pc, #36]	@ (800eb90 <Get_SerialNum+0x50>)
 800eb6a:	68f8      	ldr	r0, [r7, #12]
 800eb6c:	f000 f814 	bl	800eb98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800eb70:	2204      	movs	r2, #4
 800eb72:	4908      	ldr	r1, [pc, #32]	@ (800eb94 <Get_SerialNum+0x54>)
 800eb74:	68b8      	ldr	r0, [r7, #8]
 800eb76:	f000 f80f 	bl	800eb98 <IntToUnicode>
  }
}
 800eb7a:	bf00      	nop
 800eb7c:	3710      	adds	r7, #16
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	1ff07a10 	.word	0x1ff07a10
 800eb88:	1ff07a14 	.word	0x1ff07a14
 800eb8c:	1ff07a18 	.word	0x1ff07a18
 800eb90:	20000156 	.word	0x20000156
 800eb94:	20000166 	.word	0x20000166

0800eb98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b087      	sub	sp, #28
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	60f8      	str	r0, [r7, #12]
 800eba0:	60b9      	str	r1, [r7, #8]
 800eba2:	4613      	mov	r3, r2
 800eba4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800eba6:	2300      	movs	r3, #0
 800eba8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ebaa:	2300      	movs	r3, #0
 800ebac:	75fb      	strb	r3, [r7, #23]
 800ebae:	e027      	b.n	800ec00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	0f1b      	lsrs	r3, r3, #28
 800ebb4:	2b09      	cmp	r3, #9
 800ebb6:	d80b      	bhi.n	800ebd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	0f1b      	lsrs	r3, r3, #28
 800ebbc:	b2da      	uxtb	r2, r3
 800ebbe:	7dfb      	ldrb	r3, [r7, #23]
 800ebc0:	005b      	lsls	r3, r3, #1
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	440b      	add	r3, r1
 800ebc8:	3230      	adds	r2, #48	@ 0x30
 800ebca:	b2d2      	uxtb	r2, r2
 800ebcc:	701a      	strb	r2, [r3, #0]
 800ebce:	e00a      	b.n	800ebe6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	0f1b      	lsrs	r3, r3, #28
 800ebd4:	b2da      	uxtb	r2, r3
 800ebd6:	7dfb      	ldrb	r3, [r7, #23]
 800ebd8:	005b      	lsls	r3, r3, #1
 800ebda:	4619      	mov	r1, r3
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	440b      	add	r3, r1
 800ebe0:	3237      	adds	r2, #55	@ 0x37
 800ebe2:	b2d2      	uxtb	r2, r2
 800ebe4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	011b      	lsls	r3, r3, #4
 800ebea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ebec:	7dfb      	ldrb	r3, [r7, #23]
 800ebee:	005b      	lsls	r3, r3, #1
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	68ba      	ldr	r2, [r7, #8]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ebfa:	7dfb      	ldrb	r3, [r7, #23]
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	75fb      	strb	r3, [r7, #23]
 800ec00:	7dfa      	ldrb	r2, [r7, #23]
 800ec02:	79fb      	ldrb	r3, [r7, #7]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d3d3      	bcc.n	800ebb0 <IntToUnicode+0x18>
  }
}
 800ec08:	bf00      	nop
 800ec0a:	bf00      	nop
 800ec0c:	371c      	adds	r7, #28
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr
	...

0800ec18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b0aa      	sub	sp, #168	@ 0xa8
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec20:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800ec24:	2200      	movs	r2, #0
 800ec26:	601a      	str	r2, [r3, #0]
 800ec28:	605a      	str	r2, [r3, #4]
 800ec2a:	609a      	str	r2, [r3, #8]
 800ec2c:	60da      	str	r2, [r3, #12]
 800ec2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ec30:	f107 0314 	add.w	r3, r7, #20
 800ec34:	2280      	movs	r2, #128	@ 0x80
 800ec36:	2100      	movs	r1, #0
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f001 fd13 	bl	8010664 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ec46:	d151      	bne.n	800ecec <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800ec48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ec4c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ec54:	f107 0314 	add.w	r3, r7, #20
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7f8 fa35 	bl	80070c8 <HAL_RCCEx_PeriphCLKConfig>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d001      	beq.n	800ec68 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800ec64:	f7f4 ff06 	bl	8003a74 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec68:	4b22      	ldr	r3, [pc, #136]	@ (800ecf4 <HAL_PCD_MspInit+0xdc>)
 800ec6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec6c:	4a21      	ldr	r2, [pc, #132]	@ (800ecf4 <HAL_PCD_MspInit+0xdc>)
 800ec6e:	f043 0301 	orr.w	r3, r3, #1
 800ec72:	6313      	str	r3, [r2, #48]	@ 0x30
 800ec74:	4b1f      	ldr	r3, [pc, #124]	@ (800ecf4 <HAL_PCD_MspInit+0xdc>)
 800ec76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec78:	f003 0301 	and.w	r3, r3, #1
 800ec7c:	613b      	str	r3, [r7, #16]
 800ec7e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ec80:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ec84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec88:	2302      	movs	r3, #2
 800ec8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec94:	2303      	movs	r3, #3
 800ec96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ec9a:	230a      	movs	r3, #10
 800ec9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eca0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800eca4:	4619      	mov	r1, r3
 800eca6:	4814      	ldr	r0, [pc, #80]	@ (800ecf8 <HAL_PCD_MspInit+0xe0>)
 800eca8:	f7f6 f89c 	bl	8004de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ecac:	4b11      	ldr	r3, [pc, #68]	@ (800ecf4 <HAL_PCD_MspInit+0xdc>)
 800ecae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecb0:	4a10      	ldr	r2, [pc, #64]	@ (800ecf4 <HAL_PCD_MspInit+0xdc>)
 800ecb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ecb6:	6353      	str	r3, [r2, #52]	@ 0x34
 800ecb8:	4b0e      	ldr	r3, [pc, #56]	@ (800ecf4 <HAL_PCD_MspInit+0xdc>)
 800ecba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ecc0:	60fb      	str	r3, [r7, #12]
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	4b0b      	ldr	r3, [pc, #44]	@ (800ecf4 <HAL_PCD_MspInit+0xdc>)
 800ecc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecc8:	4a0a      	ldr	r2, [pc, #40]	@ (800ecf4 <HAL_PCD_MspInit+0xdc>)
 800ecca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ecce:	6453      	str	r3, [r2, #68]	@ 0x44
 800ecd0:	4b08      	ldr	r3, [pc, #32]	@ (800ecf4 <HAL_PCD_MspInit+0xdc>)
 800ecd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ecd8:	60bb      	str	r3, [r7, #8]
 800ecda:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ecdc:	2200      	movs	r2, #0
 800ecde:	2100      	movs	r1, #0
 800ece0:	2043      	movs	r0, #67	@ 0x43
 800ece2:	f7f5 fc54 	bl	800458e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ece6:	2043      	movs	r0, #67	@ 0x43
 800ece8:	f7f5 fc6d 	bl	80045c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ecec:	bf00      	nop
 800ecee:	37a8      	adds	r7, #168	@ 0xa8
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}
 800ecf4:	40023800 	.word	0x40023800
 800ecf8:	40020000 	.word	0x40020000

0800ecfc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ed10:	4619      	mov	r1, r3
 800ed12:	4610      	mov	r0, r2
 800ed14:	f7fe fae1 	bl	800d2da <USBD_LL_SetupStage>
}
 800ed18:	bf00      	nop
 800ed1a:	3708      	adds	r7, #8
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b082      	sub	sp, #8
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	460b      	mov	r3, r1
 800ed2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800ed32:	78fa      	ldrb	r2, [r7, #3]
 800ed34:	6879      	ldr	r1, [r7, #4]
 800ed36:	4613      	mov	r3, r2
 800ed38:	00db      	lsls	r3, r3, #3
 800ed3a:	4413      	add	r3, r2
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	440b      	add	r3, r1
 800ed40:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	78fb      	ldrb	r3, [r7, #3]
 800ed48:	4619      	mov	r1, r3
 800ed4a:	f7fe fb1b 	bl	800d384 <USBD_LL_DataOutStage>
}
 800ed4e:	bf00      	nop
 800ed50:	3708      	adds	r7, #8
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}

0800ed56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b082      	sub	sp, #8
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
 800ed5e:	460b      	mov	r3, r1
 800ed60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800ed68:	78fa      	ldrb	r2, [r7, #3]
 800ed6a:	6879      	ldr	r1, [r7, #4]
 800ed6c:	4613      	mov	r3, r2
 800ed6e:	00db      	lsls	r3, r3, #3
 800ed70:	4413      	add	r3, r2
 800ed72:	009b      	lsls	r3, r3, #2
 800ed74:	440b      	add	r3, r1
 800ed76:	3320      	adds	r3, #32
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	78fb      	ldrb	r3, [r7, #3]
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	f7fe fbb4 	bl	800d4ea <USBD_LL_DataInStage>
}
 800ed82:	bf00      	nop
 800ed84:	3708      	adds	r7, #8
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b082      	sub	sp, #8
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7fe fcee 	bl	800d77a <USBD_LL_SOF>
}
 800ed9e:	bf00      	nop
 800eda0:	3708      	adds	r7, #8
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eda6:	b580      	push	{r7, lr}
 800eda8:	b084      	sub	sp, #16
 800edaa:	af00      	add	r7, sp, #0
 800edac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800edae:	2301      	movs	r3, #1
 800edb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	79db      	ldrb	r3, [r3, #7]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d102      	bne.n	800edc0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800edba:	2300      	movs	r3, #0
 800edbc:	73fb      	strb	r3, [r7, #15]
 800edbe:	e008      	b.n	800edd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	79db      	ldrb	r3, [r3, #7]
 800edc4:	2b02      	cmp	r3, #2
 800edc6:	d102      	bne.n	800edce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800edc8:	2301      	movs	r3, #1
 800edca:	73fb      	strb	r3, [r7, #15]
 800edcc:	e001      	b.n	800edd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800edce:	f7f4 fe51 	bl	8003a74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800edd8:	7bfa      	ldrb	r2, [r7, #15]
 800edda:	4611      	mov	r1, r2
 800eddc:	4618      	mov	r0, r3
 800edde:	f7fe fc88 	bl	800d6f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ede8:	4618      	mov	r0, r3
 800edea:	f7fe fc30 	bl	800d64e <USBD_LL_Reset>
}
 800edee:	bf00      	nop
 800edf0:	3710      	adds	r7, #16
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
	...

0800edf8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7fe fc83 	bl	800d712 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	687a      	ldr	r2, [r7, #4]
 800ee18:	6812      	ldr	r2, [r2, #0]
 800ee1a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ee1e:	f043 0301 	orr.w	r3, r3, #1
 800ee22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	7adb      	ldrb	r3, [r3, #11]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d005      	beq.n	800ee38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee2c:	4b04      	ldr	r3, [pc, #16]	@ (800ee40 <HAL_PCD_SuspendCallback+0x48>)
 800ee2e:	691b      	ldr	r3, [r3, #16]
 800ee30:	4a03      	ldr	r2, [pc, #12]	@ (800ee40 <HAL_PCD_SuspendCallback+0x48>)
 800ee32:	f043 0306 	orr.w	r3, r3, #6
 800ee36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ee38:	bf00      	nop
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	e000ed00 	.word	0xe000ed00

0800ee44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fe fc79 	bl	800d74a <USBD_LL_Resume>
}
 800ee58:	bf00      	nop
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	460b      	mov	r3, r1
 800ee6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ee72:	78fa      	ldrb	r2, [r7, #3]
 800ee74:	4611      	mov	r1, r2
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fe fcd1 	bl	800d81e <USBD_LL_IsoOUTIncomplete>
}
 800ee7c:	bf00      	nop
 800ee7e:	3708      	adds	r7, #8
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ee96:	78fa      	ldrb	r2, [r7, #3]
 800ee98:	4611      	mov	r1, r2
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7fe fc8d 	bl	800d7ba <USBD_LL_IsoINIncomplete>
}
 800eea0:	bf00      	nop
 800eea2:	3708      	adds	r7, #8
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7fe fce3 	bl	800d882 <USBD_LL_DevConnected>
}
 800eebc:	bf00      	nop
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fe fce0 	bl	800d898 <USBD_LL_DevDisconnected>
}
 800eed8:	bf00      	nop
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d13f      	bne.n	800ef70 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eef0:	4a22      	ldr	r2, [pc, #136]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4a20      	ldr	r2, [pc, #128]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800eefc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ef00:	4b1e      	ldr	r3, [pc, #120]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800ef02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ef06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ef08:	4b1c      	ldr	r3, [pc, #112]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800ef0a:	2206      	movs	r2, #6
 800ef0c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ef0e:	4b1b      	ldr	r3, [pc, #108]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800ef10:	2202      	movs	r2, #2
 800ef12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ef14:	4b19      	ldr	r3, [pc, #100]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800ef16:	2200      	movs	r2, #0
 800ef18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ef1a:	4b18      	ldr	r3, [pc, #96]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800ef1c:	2202      	movs	r2, #2
 800ef1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ef20:	4b16      	ldr	r3, [pc, #88]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800ef22:	2200      	movs	r2, #0
 800ef24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ef26:	4b15      	ldr	r3, [pc, #84]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800ef28:	2200      	movs	r2, #0
 800ef2a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ef2c:	4b13      	ldr	r3, [pc, #76]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800ef2e:	2200      	movs	r2, #0
 800ef30:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ef32:	4b12      	ldr	r3, [pc, #72]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800ef34:	2200      	movs	r2, #0
 800ef36:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ef38:	4b10      	ldr	r3, [pc, #64]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ef3e:	4b0f      	ldr	r3, [pc, #60]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800ef40:	2200      	movs	r2, #0
 800ef42:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ef44:	480d      	ldr	r0, [pc, #52]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800ef46:	f7f6 f91b 	bl	8005180 <HAL_PCD_Init>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d001      	beq.n	800ef54 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800ef50:	f7f4 fd90 	bl	8003a74 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ef54:	2180      	movs	r1, #128	@ 0x80
 800ef56:	4809      	ldr	r0, [pc, #36]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800ef58:	f7f7 fb67 	bl	800662a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ef5c:	2240      	movs	r2, #64	@ 0x40
 800ef5e:	2100      	movs	r1, #0
 800ef60:	4806      	ldr	r0, [pc, #24]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800ef62:	f7f7 fb1b 	bl	800659c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ef66:	2280      	movs	r2, #128	@ 0x80
 800ef68:	2101      	movs	r1, #1
 800ef6a:	4804      	ldr	r0, [pc, #16]	@ (800ef7c <USBD_LL_Init+0x9c>)
 800ef6c:	f7f7 fb16 	bl	800659c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ef70:	2300      	movs	r3, #0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3708      	adds	r7, #8
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	20001c5c 	.word	0x20001c5c

0800ef80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7f6 fa08 	bl	80053ac <HAL_PCD_Start>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efa0:	7bfb      	ldrb	r3, [r7, #15]
 800efa2:	4618      	mov	r0, r3
 800efa4:	f000 f97e 	bl	800f2a4 <USBD_Get_USB_Status>
 800efa8:	4603      	mov	r3, r0
 800efaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efac:	7bbb      	ldrb	r3, [r7, #14]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3710      	adds	r7, #16
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b084      	sub	sp, #16
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
 800efbe:	4608      	mov	r0, r1
 800efc0:	4611      	mov	r1, r2
 800efc2:	461a      	mov	r2, r3
 800efc4:	4603      	mov	r3, r0
 800efc6:	70fb      	strb	r3, [r7, #3]
 800efc8:	460b      	mov	r3, r1
 800efca:	70bb      	strb	r3, [r7, #2]
 800efcc:	4613      	mov	r3, r2
 800efce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efd0:	2300      	movs	r3, #0
 800efd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efd4:	2300      	movs	r3, #0
 800efd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800efde:	78bb      	ldrb	r3, [r7, #2]
 800efe0:	883a      	ldrh	r2, [r7, #0]
 800efe2:	78f9      	ldrb	r1, [r7, #3]
 800efe4:	f7f6 fef6 	bl	8005dd4 <HAL_PCD_EP_Open>
 800efe8:	4603      	mov	r3, r0
 800efea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efec:	7bfb      	ldrb	r3, [r7, #15]
 800efee:	4618      	mov	r0, r3
 800eff0:	f000 f958 	bl	800f2a4 <USBD_Get_USB_Status>
 800eff4:	4603      	mov	r3, r0
 800eff6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eff8:	7bbb      	ldrb	r3, [r7, #14]
}
 800effa:	4618      	mov	r0, r3
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b084      	sub	sp, #16
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
 800f00a:	460b      	mov	r3, r1
 800f00c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f00e:	2300      	movs	r3, #0
 800f010:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f012:	2300      	movs	r3, #0
 800f014:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f01c:	78fa      	ldrb	r2, [r7, #3]
 800f01e:	4611      	mov	r1, r2
 800f020:	4618      	mov	r0, r3
 800f022:	f7f6 ff3f 	bl	8005ea4 <HAL_PCD_EP_Close>
 800f026:	4603      	mov	r3, r0
 800f028:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f02a:	7bfb      	ldrb	r3, [r7, #15]
 800f02c:	4618      	mov	r0, r3
 800f02e:	f000 f939 	bl	800f2a4 <USBD_Get_USB_Status>
 800f032:	4603      	mov	r3, r0
 800f034:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f036:	7bbb      	ldrb	r3, [r7, #14]
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3710      	adds	r7, #16
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	460b      	mov	r3, r1
 800f04a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f04c:	2300      	movs	r3, #0
 800f04e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f05a:	78fa      	ldrb	r2, [r7, #3]
 800f05c:	4611      	mov	r1, r2
 800f05e:	4618      	mov	r0, r3
 800f060:	f7f6 fff7 	bl	8006052 <HAL_PCD_EP_SetStall>
 800f064:	4603      	mov	r3, r0
 800f066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f068:	7bfb      	ldrb	r3, [r7, #15]
 800f06a:	4618      	mov	r0, r3
 800f06c:	f000 f91a 	bl	800f2a4 <USBD_Get_USB_Status>
 800f070:	4603      	mov	r3, r0
 800f072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f074:	7bbb      	ldrb	r3, [r7, #14]
}
 800f076:	4618      	mov	r0, r3
 800f078:	3710      	adds	r7, #16
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}

0800f07e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f07e:	b580      	push	{r7, lr}
 800f080:	b084      	sub	sp, #16
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
 800f086:	460b      	mov	r3, r1
 800f088:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f08a:	2300      	movs	r3, #0
 800f08c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f08e:	2300      	movs	r3, #0
 800f090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f098:	78fa      	ldrb	r2, [r7, #3]
 800f09a:	4611      	mov	r1, r2
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7f7 f83b 	bl	8006118 <HAL_PCD_EP_ClrStall>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0a6:	7bfb      	ldrb	r3, [r7, #15]
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f000 f8fb 	bl	800f2a4 <USBD_Get_USB_Status>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3710      	adds	r7, #16
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b085      	sub	sp, #20
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f0ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f0d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	da0b      	bge.n	800f0f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f0d8:	78fb      	ldrb	r3, [r7, #3]
 800f0da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f0de:	68f9      	ldr	r1, [r7, #12]
 800f0e0:	4613      	mov	r3, r2
 800f0e2:	00db      	lsls	r3, r3, #3
 800f0e4:	4413      	add	r3, r2
 800f0e6:	009b      	lsls	r3, r3, #2
 800f0e8:	440b      	add	r3, r1
 800f0ea:	3316      	adds	r3, #22
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	e00b      	b.n	800f108 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f0f0:	78fb      	ldrb	r3, [r7, #3]
 800f0f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f0f6:	68f9      	ldr	r1, [r7, #12]
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	00db      	lsls	r3, r3, #3
 800f0fc:	4413      	add	r3, r2
 800f0fe:	009b      	lsls	r3, r3, #2
 800f100:	440b      	add	r3, r1
 800f102:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f106:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3714      	adds	r7, #20
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	460b      	mov	r3, r1
 800f11e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f120:	2300      	movs	r3, #0
 800f122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f124:	2300      	movs	r3, #0
 800f126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f12e:	78fa      	ldrb	r2, [r7, #3]
 800f130:	4611      	mov	r1, r2
 800f132:	4618      	mov	r0, r3
 800f134:	f7f6 fe2a 	bl	8005d8c <HAL_PCD_SetAddress>
 800f138:	4603      	mov	r3, r0
 800f13a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f13c:	7bfb      	ldrb	r3, [r7, #15]
 800f13e:	4618      	mov	r0, r3
 800f140:	f000 f8b0 	bl	800f2a4 <USBD_Get_USB_Status>
 800f144:	4603      	mov	r3, r0
 800f146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f148:	7bbb      	ldrb	r3, [r7, #14]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3710      	adds	r7, #16
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f152:	b580      	push	{r7, lr}
 800f154:	b086      	sub	sp, #24
 800f156:	af00      	add	r7, sp, #0
 800f158:	60f8      	str	r0, [r7, #12]
 800f15a:	607a      	str	r2, [r7, #4]
 800f15c:	603b      	str	r3, [r7, #0]
 800f15e:	460b      	mov	r3, r1
 800f160:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f162:	2300      	movs	r3, #0
 800f164:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f166:	2300      	movs	r3, #0
 800f168:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f170:	7af9      	ldrb	r1, [r7, #11]
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	f7f6 ff32 	bl	8005fde <HAL_PCD_EP_Transmit>
 800f17a:	4603      	mov	r3, r0
 800f17c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f17e:	7dfb      	ldrb	r3, [r7, #23]
 800f180:	4618      	mov	r0, r3
 800f182:	f000 f88f 	bl	800f2a4 <USBD_Get_USB_Status>
 800f186:	4603      	mov	r3, r0
 800f188:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f18a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3718      	adds	r7, #24
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b086      	sub	sp, #24
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	607a      	str	r2, [r7, #4]
 800f19e:	603b      	str	r3, [r7, #0]
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f1b2:	7af9      	ldrb	r1, [r7, #11]
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	f7f6 febe 	bl	8005f38 <HAL_PCD_EP_Receive>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1c0:	7dfb      	ldrb	r3, [r7, #23]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f000 f86e 	bl	800f2a4 <USBD_Get_USB_Status>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f1cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3718      	adds	r7, #24
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1d6:	b580      	push	{r7, lr}
 800f1d8:	b082      	sub	sp, #8
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
 800f1de:	460b      	mov	r3, r1
 800f1e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f1e8:	78fa      	ldrb	r2, [r7, #3]
 800f1ea:	4611      	mov	r1, r2
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7f6 fede 	bl	8005fae <HAL_PCD_EP_GetRxCount>
 800f1f2:	4603      	mov	r3, r0
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3708      	adds	r7, #8
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	460b      	mov	r3, r1
 800f206:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f208:	78fb      	ldrb	r3, [r7, #3]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d002      	beq.n	800f214 <HAL_PCDEx_LPM_Callback+0x18>
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d01f      	beq.n	800f252 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f212:	e03b      	b.n	800f28c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	7adb      	ldrb	r3, [r3, #11]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d007      	beq.n	800f22c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f21c:	f000 f83c 	bl	800f298 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f220:	4b1c      	ldr	r3, [pc, #112]	@ (800f294 <HAL_PCDEx_LPM_Callback+0x98>)
 800f222:	691b      	ldr	r3, [r3, #16]
 800f224:	4a1b      	ldr	r2, [pc, #108]	@ (800f294 <HAL_PCDEx_LPM_Callback+0x98>)
 800f226:	f023 0306 	bic.w	r3, r3, #6
 800f22a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	687a      	ldr	r2, [r7, #4]
 800f238:	6812      	ldr	r2, [r2, #0]
 800f23a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f23e:	f023 0301 	bic.w	r3, r3, #1
 800f242:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fe fa7d 	bl	800d74a <USBD_LL_Resume>
    break;
 800f250:	e01c      	b.n	800f28c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	687a      	ldr	r2, [r7, #4]
 800f25e:	6812      	ldr	r2, [r2, #0]
 800f260:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f264:	f043 0301 	orr.w	r3, r3, #1
 800f268:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f270:	4618      	mov	r0, r3
 800f272:	f7fe fa4e 	bl	800d712 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	7adb      	ldrb	r3, [r3, #11]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d005      	beq.n	800f28a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f27e:	4b05      	ldr	r3, [pc, #20]	@ (800f294 <HAL_PCDEx_LPM_Callback+0x98>)
 800f280:	691b      	ldr	r3, [r3, #16]
 800f282:	4a04      	ldr	r2, [pc, #16]	@ (800f294 <HAL_PCDEx_LPM_Callback+0x98>)
 800f284:	f043 0306 	orr.w	r3, r3, #6
 800f288:	6113      	str	r3, [r2, #16]
    break;
 800f28a:	bf00      	nop
}
 800f28c:	bf00      	nop
 800f28e:	3708      	adds	r7, #8
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	e000ed00 	.word	0xe000ed00

0800f298 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f29c:	f7f3 fbd8 	bl	8002a50 <SystemClock_Config>
}
 800f2a0:	bf00      	nop
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f2b2:	79fb      	ldrb	r3, [r7, #7]
 800f2b4:	2b03      	cmp	r3, #3
 800f2b6:	d817      	bhi.n	800f2e8 <USBD_Get_USB_Status+0x44>
 800f2b8:	a201      	add	r2, pc, #4	@ (adr r2, 800f2c0 <USBD_Get_USB_Status+0x1c>)
 800f2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2be:	bf00      	nop
 800f2c0:	0800f2d1 	.word	0x0800f2d1
 800f2c4:	0800f2d7 	.word	0x0800f2d7
 800f2c8:	0800f2dd 	.word	0x0800f2dd
 800f2cc:	0800f2e3 	.word	0x0800f2e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f2d4:	e00b      	b.n	800f2ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f2d6:	2303      	movs	r3, #3
 800f2d8:	73fb      	strb	r3, [r7, #15]
    break;
 800f2da:	e008      	b.n	800f2ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e0:	e005      	b.n	800f2ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f2e2:	2303      	movs	r3, #3
 800f2e4:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e6:	e002      	b.n	800f2ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f2e8:	2303      	movs	r3, #3
 800f2ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f2ec:	bf00      	nop
  }
  return usb_status;
 800f2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3714      	adds	r7, #20
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <malloc>:
 800f2fc:	4b02      	ldr	r3, [pc, #8]	@ (800f308 <malloc+0xc>)
 800f2fe:	4601      	mov	r1, r0
 800f300:	6818      	ldr	r0, [r3, #0]
 800f302:	f000 b82d 	b.w	800f360 <_malloc_r>
 800f306:	bf00      	nop
 800f308:	2000017c 	.word	0x2000017c

0800f30c <free>:
 800f30c:	4b02      	ldr	r3, [pc, #8]	@ (800f318 <free+0xc>)
 800f30e:	4601      	mov	r1, r0
 800f310:	6818      	ldr	r0, [r3, #0]
 800f312:	f002 b8b5 	b.w	8011480 <_free_r>
 800f316:	bf00      	nop
 800f318:	2000017c 	.word	0x2000017c

0800f31c <sbrk_aligned>:
 800f31c:	b570      	push	{r4, r5, r6, lr}
 800f31e:	4e0f      	ldr	r6, [pc, #60]	@ (800f35c <sbrk_aligned+0x40>)
 800f320:	460c      	mov	r4, r1
 800f322:	6831      	ldr	r1, [r6, #0]
 800f324:	4605      	mov	r5, r0
 800f326:	b911      	cbnz	r1, 800f32e <sbrk_aligned+0x12>
 800f328:	f001 f9ee 	bl	8010708 <_sbrk_r>
 800f32c:	6030      	str	r0, [r6, #0]
 800f32e:	4621      	mov	r1, r4
 800f330:	4628      	mov	r0, r5
 800f332:	f001 f9e9 	bl	8010708 <_sbrk_r>
 800f336:	1c43      	adds	r3, r0, #1
 800f338:	d103      	bne.n	800f342 <sbrk_aligned+0x26>
 800f33a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f33e:	4620      	mov	r0, r4
 800f340:	bd70      	pop	{r4, r5, r6, pc}
 800f342:	1cc4      	adds	r4, r0, #3
 800f344:	f024 0403 	bic.w	r4, r4, #3
 800f348:	42a0      	cmp	r0, r4
 800f34a:	d0f8      	beq.n	800f33e <sbrk_aligned+0x22>
 800f34c:	1a21      	subs	r1, r4, r0
 800f34e:	4628      	mov	r0, r5
 800f350:	f001 f9da 	bl	8010708 <_sbrk_r>
 800f354:	3001      	adds	r0, #1
 800f356:	d1f2      	bne.n	800f33e <sbrk_aligned+0x22>
 800f358:	e7ef      	b.n	800f33a <sbrk_aligned+0x1e>
 800f35a:	bf00      	nop
 800f35c:	2000213c 	.word	0x2000213c

0800f360 <_malloc_r>:
 800f360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f364:	1ccd      	adds	r5, r1, #3
 800f366:	f025 0503 	bic.w	r5, r5, #3
 800f36a:	3508      	adds	r5, #8
 800f36c:	2d0c      	cmp	r5, #12
 800f36e:	bf38      	it	cc
 800f370:	250c      	movcc	r5, #12
 800f372:	2d00      	cmp	r5, #0
 800f374:	4606      	mov	r6, r0
 800f376:	db01      	blt.n	800f37c <_malloc_r+0x1c>
 800f378:	42a9      	cmp	r1, r5
 800f37a:	d904      	bls.n	800f386 <_malloc_r+0x26>
 800f37c:	230c      	movs	r3, #12
 800f37e:	6033      	str	r3, [r6, #0]
 800f380:	2000      	movs	r0, #0
 800f382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f386:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f45c <_malloc_r+0xfc>
 800f38a:	f000 f869 	bl	800f460 <__malloc_lock>
 800f38e:	f8d8 3000 	ldr.w	r3, [r8]
 800f392:	461c      	mov	r4, r3
 800f394:	bb44      	cbnz	r4, 800f3e8 <_malloc_r+0x88>
 800f396:	4629      	mov	r1, r5
 800f398:	4630      	mov	r0, r6
 800f39a:	f7ff ffbf 	bl	800f31c <sbrk_aligned>
 800f39e:	1c43      	adds	r3, r0, #1
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	d158      	bne.n	800f456 <_malloc_r+0xf6>
 800f3a4:	f8d8 4000 	ldr.w	r4, [r8]
 800f3a8:	4627      	mov	r7, r4
 800f3aa:	2f00      	cmp	r7, #0
 800f3ac:	d143      	bne.n	800f436 <_malloc_r+0xd6>
 800f3ae:	2c00      	cmp	r4, #0
 800f3b0:	d04b      	beq.n	800f44a <_malloc_r+0xea>
 800f3b2:	6823      	ldr	r3, [r4, #0]
 800f3b4:	4639      	mov	r1, r7
 800f3b6:	4630      	mov	r0, r6
 800f3b8:	eb04 0903 	add.w	r9, r4, r3
 800f3bc:	f001 f9a4 	bl	8010708 <_sbrk_r>
 800f3c0:	4581      	cmp	r9, r0
 800f3c2:	d142      	bne.n	800f44a <_malloc_r+0xea>
 800f3c4:	6821      	ldr	r1, [r4, #0]
 800f3c6:	1a6d      	subs	r5, r5, r1
 800f3c8:	4629      	mov	r1, r5
 800f3ca:	4630      	mov	r0, r6
 800f3cc:	f7ff ffa6 	bl	800f31c <sbrk_aligned>
 800f3d0:	3001      	adds	r0, #1
 800f3d2:	d03a      	beq.n	800f44a <_malloc_r+0xea>
 800f3d4:	6823      	ldr	r3, [r4, #0]
 800f3d6:	442b      	add	r3, r5
 800f3d8:	6023      	str	r3, [r4, #0]
 800f3da:	f8d8 3000 	ldr.w	r3, [r8]
 800f3de:	685a      	ldr	r2, [r3, #4]
 800f3e0:	bb62      	cbnz	r2, 800f43c <_malloc_r+0xdc>
 800f3e2:	f8c8 7000 	str.w	r7, [r8]
 800f3e6:	e00f      	b.n	800f408 <_malloc_r+0xa8>
 800f3e8:	6822      	ldr	r2, [r4, #0]
 800f3ea:	1b52      	subs	r2, r2, r5
 800f3ec:	d420      	bmi.n	800f430 <_malloc_r+0xd0>
 800f3ee:	2a0b      	cmp	r2, #11
 800f3f0:	d917      	bls.n	800f422 <_malloc_r+0xc2>
 800f3f2:	1961      	adds	r1, r4, r5
 800f3f4:	42a3      	cmp	r3, r4
 800f3f6:	6025      	str	r5, [r4, #0]
 800f3f8:	bf18      	it	ne
 800f3fa:	6059      	strne	r1, [r3, #4]
 800f3fc:	6863      	ldr	r3, [r4, #4]
 800f3fe:	bf08      	it	eq
 800f400:	f8c8 1000 	streq.w	r1, [r8]
 800f404:	5162      	str	r2, [r4, r5]
 800f406:	604b      	str	r3, [r1, #4]
 800f408:	4630      	mov	r0, r6
 800f40a:	f000 f82f 	bl	800f46c <__malloc_unlock>
 800f40e:	f104 000b 	add.w	r0, r4, #11
 800f412:	1d23      	adds	r3, r4, #4
 800f414:	f020 0007 	bic.w	r0, r0, #7
 800f418:	1ac2      	subs	r2, r0, r3
 800f41a:	bf1c      	itt	ne
 800f41c:	1a1b      	subne	r3, r3, r0
 800f41e:	50a3      	strne	r3, [r4, r2]
 800f420:	e7af      	b.n	800f382 <_malloc_r+0x22>
 800f422:	6862      	ldr	r2, [r4, #4]
 800f424:	42a3      	cmp	r3, r4
 800f426:	bf0c      	ite	eq
 800f428:	f8c8 2000 	streq.w	r2, [r8]
 800f42c:	605a      	strne	r2, [r3, #4]
 800f42e:	e7eb      	b.n	800f408 <_malloc_r+0xa8>
 800f430:	4623      	mov	r3, r4
 800f432:	6864      	ldr	r4, [r4, #4]
 800f434:	e7ae      	b.n	800f394 <_malloc_r+0x34>
 800f436:	463c      	mov	r4, r7
 800f438:	687f      	ldr	r7, [r7, #4]
 800f43a:	e7b6      	b.n	800f3aa <_malloc_r+0x4a>
 800f43c:	461a      	mov	r2, r3
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	42a3      	cmp	r3, r4
 800f442:	d1fb      	bne.n	800f43c <_malloc_r+0xdc>
 800f444:	2300      	movs	r3, #0
 800f446:	6053      	str	r3, [r2, #4]
 800f448:	e7de      	b.n	800f408 <_malloc_r+0xa8>
 800f44a:	230c      	movs	r3, #12
 800f44c:	6033      	str	r3, [r6, #0]
 800f44e:	4630      	mov	r0, r6
 800f450:	f000 f80c 	bl	800f46c <__malloc_unlock>
 800f454:	e794      	b.n	800f380 <_malloc_r+0x20>
 800f456:	6005      	str	r5, [r0, #0]
 800f458:	e7d6      	b.n	800f408 <_malloc_r+0xa8>
 800f45a:	bf00      	nop
 800f45c:	20002140 	.word	0x20002140

0800f460 <__malloc_lock>:
 800f460:	4801      	ldr	r0, [pc, #4]	@ (800f468 <__malloc_lock+0x8>)
 800f462:	f001 b99e 	b.w	80107a2 <__retarget_lock_acquire_recursive>
 800f466:	bf00      	nop
 800f468:	20002284 	.word	0x20002284

0800f46c <__malloc_unlock>:
 800f46c:	4801      	ldr	r0, [pc, #4]	@ (800f474 <__malloc_unlock+0x8>)
 800f46e:	f001 b999 	b.w	80107a4 <__retarget_lock_release_recursive>
 800f472:	bf00      	nop
 800f474:	20002284 	.word	0x20002284

0800f478 <__cvt>:
 800f478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f47c:	ec57 6b10 	vmov	r6, r7, d0
 800f480:	2f00      	cmp	r7, #0
 800f482:	460c      	mov	r4, r1
 800f484:	4619      	mov	r1, r3
 800f486:	463b      	mov	r3, r7
 800f488:	bfbb      	ittet	lt
 800f48a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f48e:	461f      	movlt	r7, r3
 800f490:	2300      	movge	r3, #0
 800f492:	232d      	movlt	r3, #45	@ 0x2d
 800f494:	700b      	strb	r3, [r1, #0]
 800f496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f498:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f49c:	4691      	mov	r9, r2
 800f49e:	f023 0820 	bic.w	r8, r3, #32
 800f4a2:	bfbc      	itt	lt
 800f4a4:	4632      	movlt	r2, r6
 800f4a6:	4616      	movlt	r6, r2
 800f4a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f4ac:	d005      	beq.n	800f4ba <__cvt+0x42>
 800f4ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f4b2:	d100      	bne.n	800f4b6 <__cvt+0x3e>
 800f4b4:	3401      	adds	r4, #1
 800f4b6:	2102      	movs	r1, #2
 800f4b8:	e000      	b.n	800f4bc <__cvt+0x44>
 800f4ba:	2103      	movs	r1, #3
 800f4bc:	ab03      	add	r3, sp, #12
 800f4be:	9301      	str	r3, [sp, #4]
 800f4c0:	ab02      	add	r3, sp, #8
 800f4c2:	9300      	str	r3, [sp, #0]
 800f4c4:	ec47 6b10 	vmov	d0, r6, r7
 800f4c8:	4653      	mov	r3, sl
 800f4ca:	4622      	mov	r2, r4
 800f4cc:	f001 fa14 	bl	80108f8 <_dtoa_r>
 800f4d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f4d4:	4605      	mov	r5, r0
 800f4d6:	d119      	bne.n	800f50c <__cvt+0x94>
 800f4d8:	f019 0f01 	tst.w	r9, #1
 800f4dc:	d00e      	beq.n	800f4fc <__cvt+0x84>
 800f4de:	eb00 0904 	add.w	r9, r0, r4
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	4630      	mov	r0, r6
 800f4e8:	4639      	mov	r1, r7
 800f4ea:	f7f1 fb25 	bl	8000b38 <__aeabi_dcmpeq>
 800f4ee:	b108      	cbz	r0, 800f4f4 <__cvt+0x7c>
 800f4f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800f4f4:	2230      	movs	r2, #48	@ 0x30
 800f4f6:	9b03      	ldr	r3, [sp, #12]
 800f4f8:	454b      	cmp	r3, r9
 800f4fa:	d31e      	bcc.n	800f53a <__cvt+0xc2>
 800f4fc:	9b03      	ldr	r3, [sp, #12]
 800f4fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f500:	1b5b      	subs	r3, r3, r5
 800f502:	4628      	mov	r0, r5
 800f504:	6013      	str	r3, [r2, #0]
 800f506:	b004      	add	sp, #16
 800f508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f50c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f510:	eb00 0904 	add.w	r9, r0, r4
 800f514:	d1e5      	bne.n	800f4e2 <__cvt+0x6a>
 800f516:	7803      	ldrb	r3, [r0, #0]
 800f518:	2b30      	cmp	r3, #48	@ 0x30
 800f51a:	d10a      	bne.n	800f532 <__cvt+0xba>
 800f51c:	2200      	movs	r2, #0
 800f51e:	2300      	movs	r3, #0
 800f520:	4630      	mov	r0, r6
 800f522:	4639      	mov	r1, r7
 800f524:	f7f1 fb08 	bl	8000b38 <__aeabi_dcmpeq>
 800f528:	b918      	cbnz	r0, 800f532 <__cvt+0xba>
 800f52a:	f1c4 0401 	rsb	r4, r4, #1
 800f52e:	f8ca 4000 	str.w	r4, [sl]
 800f532:	f8da 3000 	ldr.w	r3, [sl]
 800f536:	4499      	add	r9, r3
 800f538:	e7d3      	b.n	800f4e2 <__cvt+0x6a>
 800f53a:	1c59      	adds	r1, r3, #1
 800f53c:	9103      	str	r1, [sp, #12]
 800f53e:	701a      	strb	r2, [r3, #0]
 800f540:	e7d9      	b.n	800f4f6 <__cvt+0x7e>

0800f542 <__exponent>:
 800f542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f544:	2900      	cmp	r1, #0
 800f546:	bfba      	itte	lt
 800f548:	4249      	neglt	r1, r1
 800f54a:	232d      	movlt	r3, #45	@ 0x2d
 800f54c:	232b      	movge	r3, #43	@ 0x2b
 800f54e:	2909      	cmp	r1, #9
 800f550:	7002      	strb	r2, [r0, #0]
 800f552:	7043      	strb	r3, [r0, #1]
 800f554:	dd29      	ble.n	800f5aa <__exponent+0x68>
 800f556:	f10d 0307 	add.w	r3, sp, #7
 800f55a:	461d      	mov	r5, r3
 800f55c:	270a      	movs	r7, #10
 800f55e:	461a      	mov	r2, r3
 800f560:	fbb1 f6f7 	udiv	r6, r1, r7
 800f564:	fb07 1416 	mls	r4, r7, r6, r1
 800f568:	3430      	adds	r4, #48	@ 0x30
 800f56a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f56e:	460c      	mov	r4, r1
 800f570:	2c63      	cmp	r4, #99	@ 0x63
 800f572:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800f576:	4631      	mov	r1, r6
 800f578:	dcf1      	bgt.n	800f55e <__exponent+0x1c>
 800f57a:	3130      	adds	r1, #48	@ 0x30
 800f57c:	1e94      	subs	r4, r2, #2
 800f57e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f582:	1c41      	adds	r1, r0, #1
 800f584:	4623      	mov	r3, r4
 800f586:	42ab      	cmp	r3, r5
 800f588:	d30a      	bcc.n	800f5a0 <__exponent+0x5e>
 800f58a:	f10d 0309 	add.w	r3, sp, #9
 800f58e:	1a9b      	subs	r3, r3, r2
 800f590:	42ac      	cmp	r4, r5
 800f592:	bf88      	it	hi
 800f594:	2300      	movhi	r3, #0
 800f596:	3302      	adds	r3, #2
 800f598:	4403      	add	r3, r0
 800f59a:	1a18      	subs	r0, r3, r0
 800f59c:	b003      	add	sp, #12
 800f59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f5a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f5a8:	e7ed      	b.n	800f586 <__exponent+0x44>
 800f5aa:	2330      	movs	r3, #48	@ 0x30
 800f5ac:	3130      	adds	r1, #48	@ 0x30
 800f5ae:	7083      	strb	r3, [r0, #2]
 800f5b0:	70c1      	strb	r1, [r0, #3]
 800f5b2:	1d03      	adds	r3, r0, #4
 800f5b4:	e7f1      	b.n	800f59a <__exponent+0x58>
	...

0800f5b8 <_printf_float>:
 800f5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5bc:	b08d      	sub	sp, #52	@ 0x34
 800f5be:	460c      	mov	r4, r1
 800f5c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f5c4:	4616      	mov	r6, r2
 800f5c6:	461f      	mov	r7, r3
 800f5c8:	4605      	mov	r5, r0
 800f5ca:	f001 f865 	bl	8010698 <_localeconv_r>
 800f5ce:	6803      	ldr	r3, [r0, #0]
 800f5d0:	9304      	str	r3, [sp, #16]
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7f0 fe84 	bl	80002e0 <strlen>
 800f5d8:	2300      	movs	r3, #0
 800f5da:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5dc:	f8d8 3000 	ldr.w	r3, [r8]
 800f5e0:	9005      	str	r0, [sp, #20]
 800f5e2:	3307      	adds	r3, #7
 800f5e4:	f023 0307 	bic.w	r3, r3, #7
 800f5e8:	f103 0208 	add.w	r2, r3, #8
 800f5ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f5f0:	f8d4 b000 	ldr.w	fp, [r4]
 800f5f4:	f8c8 2000 	str.w	r2, [r8]
 800f5f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f5fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f600:	9307      	str	r3, [sp, #28]
 800f602:	f8cd 8018 	str.w	r8, [sp, #24]
 800f606:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f60a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f60e:	4b9c      	ldr	r3, [pc, #624]	@ (800f880 <_printf_float+0x2c8>)
 800f610:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f614:	f7f1 fac2 	bl	8000b9c <__aeabi_dcmpun>
 800f618:	bb70      	cbnz	r0, 800f678 <_printf_float+0xc0>
 800f61a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f61e:	4b98      	ldr	r3, [pc, #608]	@ (800f880 <_printf_float+0x2c8>)
 800f620:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f624:	f7f1 fa9c 	bl	8000b60 <__aeabi_dcmple>
 800f628:	bb30      	cbnz	r0, 800f678 <_printf_float+0xc0>
 800f62a:	2200      	movs	r2, #0
 800f62c:	2300      	movs	r3, #0
 800f62e:	4640      	mov	r0, r8
 800f630:	4649      	mov	r1, r9
 800f632:	f7f1 fa8b 	bl	8000b4c <__aeabi_dcmplt>
 800f636:	b110      	cbz	r0, 800f63e <_printf_float+0x86>
 800f638:	232d      	movs	r3, #45	@ 0x2d
 800f63a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f63e:	4a91      	ldr	r2, [pc, #580]	@ (800f884 <_printf_float+0x2cc>)
 800f640:	4b91      	ldr	r3, [pc, #580]	@ (800f888 <_printf_float+0x2d0>)
 800f642:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f646:	bf94      	ite	ls
 800f648:	4690      	movls	r8, r2
 800f64a:	4698      	movhi	r8, r3
 800f64c:	2303      	movs	r3, #3
 800f64e:	6123      	str	r3, [r4, #16]
 800f650:	f02b 0304 	bic.w	r3, fp, #4
 800f654:	6023      	str	r3, [r4, #0]
 800f656:	f04f 0900 	mov.w	r9, #0
 800f65a:	9700      	str	r7, [sp, #0]
 800f65c:	4633      	mov	r3, r6
 800f65e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f660:	4621      	mov	r1, r4
 800f662:	4628      	mov	r0, r5
 800f664:	f000 f9d2 	bl	800fa0c <_printf_common>
 800f668:	3001      	adds	r0, #1
 800f66a:	f040 808d 	bne.w	800f788 <_printf_float+0x1d0>
 800f66e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f672:	b00d      	add	sp, #52	@ 0x34
 800f674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f678:	4642      	mov	r2, r8
 800f67a:	464b      	mov	r3, r9
 800f67c:	4640      	mov	r0, r8
 800f67e:	4649      	mov	r1, r9
 800f680:	f7f1 fa8c 	bl	8000b9c <__aeabi_dcmpun>
 800f684:	b140      	cbz	r0, 800f698 <_printf_float+0xe0>
 800f686:	464b      	mov	r3, r9
 800f688:	2b00      	cmp	r3, #0
 800f68a:	bfbc      	itt	lt
 800f68c:	232d      	movlt	r3, #45	@ 0x2d
 800f68e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f692:	4a7e      	ldr	r2, [pc, #504]	@ (800f88c <_printf_float+0x2d4>)
 800f694:	4b7e      	ldr	r3, [pc, #504]	@ (800f890 <_printf_float+0x2d8>)
 800f696:	e7d4      	b.n	800f642 <_printf_float+0x8a>
 800f698:	6863      	ldr	r3, [r4, #4]
 800f69a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f69e:	9206      	str	r2, [sp, #24]
 800f6a0:	1c5a      	adds	r2, r3, #1
 800f6a2:	d13b      	bne.n	800f71c <_printf_float+0x164>
 800f6a4:	2306      	movs	r3, #6
 800f6a6:	6063      	str	r3, [r4, #4]
 800f6a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	6022      	str	r2, [r4, #0]
 800f6b0:	9303      	str	r3, [sp, #12]
 800f6b2:	ab0a      	add	r3, sp, #40	@ 0x28
 800f6b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f6b8:	ab09      	add	r3, sp, #36	@ 0x24
 800f6ba:	9300      	str	r3, [sp, #0]
 800f6bc:	6861      	ldr	r1, [r4, #4]
 800f6be:	ec49 8b10 	vmov	d0, r8, r9
 800f6c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	f7ff fed6 	bl	800f478 <__cvt>
 800f6cc:	9b06      	ldr	r3, [sp, #24]
 800f6ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f6d0:	2b47      	cmp	r3, #71	@ 0x47
 800f6d2:	4680      	mov	r8, r0
 800f6d4:	d129      	bne.n	800f72a <_printf_float+0x172>
 800f6d6:	1cc8      	adds	r0, r1, #3
 800f6d8:	db02      	blt.n	800f6e0 <_printf_float+0x128>
 800f6da:	6863      	ldr	r3, [r4, #4]
 800f6dc:	4299      	cmp	r1, r3
 800f6de:	dd41      	ble.n	800f764 <_printf_float+0x1ac>
 800f6e0:	f1aa 0a02 	sub.w	sl, sl, #2
 800f6e4:	fa5f fa8a 	uxtb.w	sl, sl
 800f6e8:	3901      	subs	r1, #1
 800f6ea:	4652      	mov	r2, sl
 800f6ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f6f0:	9109      	str	r1, [sp, #36]	@ 0x24
 800f6f2:	f7ff ff26 	bl	800f542 <__exponent>
 800f6f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6f8:	1813      	adds	r3, r2, r0
 800f6fa:	2a01      	cmp	r2, #1
 800f6fc:	4681      	mov	r9, r0
 800f6fe:	6123      	str	r3, [r4, #16]
 800f700:	dc02      	bgt.n	800f708 <_printf_float+0x150>
 800f702:	6822      	ldr	r2, [r4, #0]
 800f704:	07d2      	lsls	r2, r2, #31
 800f706:	d501      	bpl.n	800f70c <_printf_float+0x154>
 800f708:	3301      	adds	r3, #1
 800f70a:	6123      	str	r3, [r4, #16]
 800f70c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f710:	2b00      	cmp	r3, #0
 800f712:	d0a2      	beq.n	800f65a <_printf_float+0xa2>
 800f714:	232d      	movs	r3, #45	@ 0x2d
 800f716:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f71a:	e79e      	b.n	800f65a <_printf_float+0xa2>
 800f71c:	9a06      	ldr	r2, [sp, #24]
 800f71e:	2a47      	cmp	r2, #71	@ 0x47
 800f720:	d1c2      	bne.n	800f6a8 <_printf_float+0xf0>
 800f722:	2b00      	cmp	r3, #0
 800f724:	d1c0      	bne.n	800f6a8 <_printf_float+0xf0>
 800f726:	2301      	movs	r3, #1
 800f728:	e7bd      	b.n	800f6a6 <_printf_float+0xee>
 800f72a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f72e:	d9db      	bls.n	800f6e8 <_printf_float+0x130>
 800f730:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f734:	d118      	bne.n	800f768 <_printf_float+0x1b0>
 800f736:	2900      	cmp	r1, #0
 800f738:	6863      	ldr	r3, [r4, #4]
 800f73a:	dd0b      	ble.n	800f754 <_printf_float+0x19c>
 800f73c:	6121      	str	r1, [r4, #16]
 800f73e:	b913      	cbnz	r3, 800f746 <_printf_float+0x18e>
 800f740:	6822      	ldr	r2, [r4, #0]
 800f742:	07d0      	lsls	r0, r2, #31
 800f744:	d502      	bpl.n	800f74c <_printf_float+0x194>
 800f746:	3301      	adds	r3, #1
 800f748:	440b      	add	r3, r1
 800f74a:	6123      	str	r3, [r4, #16]
 800f74c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f74e:	f04f 0900 	mov.w	r9, #0
 800f752:	e7db      	b.n	800f70c <_printf_float+0x154>
 800f754:	b913      	cbnz	r3, 800f75c <_printf_float+0x1a4>
 800f756:	6822      	ldr	r2, [r4, #0]
 800f758:	07d2      	lsls	r2, r2, #31
 800f75a:	d501      	bpl.n	800f760 <_printf_float+0x1a8>
 800f75c:	3302      	adds	r3, #2
 800f75e:	e7f4      	b.n	800f74a <_printf_float+0x192>
 800f760:	2301      	movs	r3, #1
 800f762:	e7f2      	b.n	800f74a <_printf_float+0x192>
 800f764:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f76a:	4299      	cmp	r1, r3
 800f76c:	db05      	blt.n	800f77a <_printf_float+0x1c2>
 800f76e:	6823      	ldr	r3, [r4, #0]
 800f770:	6121      	str	r1, [r4, #16]
 800f772:	07d8      	lsls	r0, r3, #31
 800f774:	d5ea      	bpl.n	800f74c <_printf_float+0x194>
 800f776:	1c4b      	adds	r3, r1, #1
 800f778:	e7e7      	b.n	800f74a <_printf_float+0x192>
 800f77a:	2900      	cmp	r1, #0
 800f77c:	bfd4      	ite	le
 800f77e:	f1c1 0202 	rsble	r2, r1, #2
 800f782:	2201      	movgt	r2, #1
 800f784:	4413      	add	r3, r2
 800f786:	e7e0      	b.n	800f74a <_printf_float+0x192>
 800f788:	6823      	ldr	r3, [r4, #0]
 800f78a:	055a      	lsls	r2, r3, #21
 800f78c:	d407      	bmi.n	800f79e <_printf_float+0x1e6>
 800f78e:	6923      	ldr	r3, [r4, #16]
 800f790:	4642      	mov	r2, r8
 800f792:	4631      	mov	r1, r6
 800f794:	4628      	mov	r0, r5
 800f796:	47b8      	blx	r7
 800f798:	3001      	adds	r0, #1
 800f79a:	d12b      	bne.n	800f7f4 <_printf_float+0x23c>
 800f79c:	e767      	b.n	800f66e <_printf_float+0xb6>
 800f79e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f7a2:	f240 80dd 	bls.w	800f960 <_printf_float+0x3a8>
 800f7a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	f7f1 f9c3 	bl	8000b38 <__aeabi_dcmpeq>
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	d033      	beq.n	800f81e <_printf_float+0x266>
 800f7b6:	4a37      	ldr	r2, [pc, #220]	@ (800f894 <_printf_float+0x2dc>)
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	4631      	mov	r1, r6
 800f7bc:	4628      	mov	r0, r5
 800f7be:	47b8      	blx	r7
 800f7c0:	3001      	adds	r0, #1
 800f7c2:	f43f af54 	beq.w	800f66e <_printf_float+0xb6>
 800f7c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f7ca:	4543      	cmp	r3, r8
 800f7cc:	db02      	blt.n	800f7d4 <_printf_float+0x21c>
 800f7ce:	6823      	ldr	r3, [r4, #0]
 800f7d0:	07d8      	lsls	r0, r3, #31
 800f7d2:	d50f      	bpl.n	800f7f4 <_printf_float+0x23c>
 800f7d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7d8:	4631      	mov	r1, r6
 800f7da:	4628      	mov	r0, r5
 800f7dc:	47b8      	blx	r7
 800f7de:	3001      	adds	r0, #1
 800f7e0:	f43f af45 	beq.w	800f66e <_printf_float+0xb6>
 800f7e4:	f04f 0900 	mov.w	r9, #0
 800f7e8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800f7ec:	f104 0a1a 	add.w	sl, r4, #26
 800f7f0:	45c8      	cmp	r8, r9
 800f7f2:	dc09      	bgt.n	800f808 <_printf_float+0x250>
 800f7f4:	6823      	ldr	r3, [r4, #0]
 800f7f6:	079b      	lsls	r3, r3, #30
 800f7f8:	f100 8103 	bmi.w	800fa02 <_printf_float+0x44a>
 800f7fc:	68e0      	ldr	r0, [r4, #12]
 800f7fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f800:	4298      	cmp	r0, r3
 800f802:	bfb8      	it	lt
 800f804:	4618      	movlt	r0, r3
 800f806:	e734      	b.n	800f672 <_printf_float+0xba>
 800f808:	2301      	movs	r3, #1
 800f80a:	4652      	mov	r2, sl
 800f80c:	4631      	mov	r1, r6
 800f80e:	4628      	mov	r0, r5
 800f810:	47b8      	blx	r7
 800f812:	3001      	adds	r0, #1
 800f814:	f43f af2b 	beq.w	800f66e <_printf_float+0xb6>
 800f818:	f109 0901 	add.w	r9, r9, #1
 800f81c:	e7e8      	b.n	800f7f0 <_printf_float+0x238>
 800f81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f820:	2b00      	cmp	r3, #0
 800f822:	dc39      	bgt.n	800f898 <_printf_float+0x2e0>
 800f824:	4a1b      	ldr	r2, [pc, #108]	@ (800f894 <_printf_float+0x2dc>)
 800f826:	2301      	movs	r3, #1
 800f828:	4631      	mov	r1, r6
 800f82a:	4628      	mov	r0, r5
 800f82c:	47b8      	blx	r7
 800f82e:	3001      	adds	r0, #1
 800f830:	f43f af1d 	beq.w	800f66e <_printf_float+0xb6>
 800f834:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f838:	ea59 0303 	orrs.w	r3, r9, r3
 800f83c:	d102      	bne.n	800f844 <_printf_float+0x28c>
 800f83e:	6823      	ldr	r3, [r4, #0]
 800f840:	07d9      	lsls	r1, r3, #31
 800f842:	d5d7      	bpl.n	800f7f4 <_printf_float+0x23c>
 800f844:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f848:	4631      	mov	r1, r6
 800f84a:	4628      	mov	r0, r5
 800f84c:	47b8      	blx	r7
 800f84e:	3001      	adds	r0, #1
 800f850:	f43f af0d 	beq.w	800f66e <_printf_float+0xb6>
 800f854:	f04f 0a00 	mov.w	sl, #0
 800f858:	f104 0b1a 	add.w	fp, r4, #26
 800f85c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f85e:	425b      	negs	r3, r3
 800f860:	4553      	cmp	r3, sl
 800f862:	dc01      	bgt.n	800f868 <_printf_float+0x2b0>
 800f864:	464b      	mov	r3, r9
 800f866:	e793      	b.n	800f790 <_printf_float+0x1d8>
 800f868:	2301      	movs	r3, #1
 800f86a:	465a      	mov	r2, fp
 800f86c:	4631      	mov	r1, r6
 800f86e:	4628      	mov	r0, r5
 800f870:	47b8      	blx	r7
 800f872:	3001      	adds	r0, #1
 800f874:	f43f aefb 	beq.w	800f66e <_printf_float+0xb6>
 800f878:	f10a 0a01 	add.w	sl, sl, #1
 800f87c:	e7ee      	b.n	800f85c <_printf_float+0x2a4>
 800f87e:	bf00      	nop
 800f880:	7fefffff 	.word	0x7fefffff
 800f884:	080158dc 	.word	0x080158dc
 800f888:	080158e0 	.word	0x080158e0
 800f88c:	080158e4 	.word	0x080158e4
 800f890:	080158e8 	.word	0x080158e8
 800f894:	08015c78 	.word	0x08015c78
 800f898:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f89a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f89e:	4553      	cmp	r3, sl
 800f8a0:	bfa8      	it	ge
 800f8a2:	4653      	movge	r3, sl
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	4699      	mov	r9, r3
 800f8a8:	dc36      	bgt.n	800f918 <_printf_float+0x360>
 800f8aa:	f04f 0b00 	mov.w	fp, #0
 800f8ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8b2:	f104 021a 	add.w	r2, r4, #26
 800f8b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f8b8:	9306      	str	r3, [sp, #24]
 800f8ba:	eba3 0309 	sub.w	r3, r3, r9
 800f8be:	455b      	cmp	r3, fp
 800f8c0:	dc31      	bgt.n	800f926 <_printf_float+0x36e>
 800f8c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8c4:	459a      	cmp	sl, r3
 800f8c6:	dc3a      	bgt.n	800f93e <_printf_float+0x386>
 800f8c8:	6823      	ldr	r3, [r4, #0]
 800f8ca:	07da      	lsls	r2, r3, #31
 800f8cc:	d437      	bmi.n	800f93e <_printf_float+0x386>
 800f8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8d0:	ebaa 0903 	sub.w	r9, sl, r3
 800f8d4:	9b06      	ldr	r3, [sp, #24]
 800f8d6:	ebaa 0303 	sub.w	r3, sl, r3
 800f8da:	4599      	cmp	r9, r3
 800f8dc:	bfa8      	it	ge
 800f8de:	4699      	movge	r9, r3
 800f8e0:	f1b9 0f00 	cmp.w	r9, #0
 800f8e4:	dc33      	bgt.n	800f94e <_printf_float+0x396>
 800f8e6:	f04f 0800 	mov.w	r8, #0
 800f8ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8ee:	f104 0b1a 	add.w	fp, r4, #26
 800f8f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8f4:	ebaa 0303 	sub.w	r3, sl, r3
 800f8f8:	eba3 0309 	sub.w	r3, r3, r9
 800f8fc:	4543      	cmp	r3, r8
 800f8fe:	f77f af79 	ble.w	800f7f4 <_printf_float+0x23c>
 800f902:	2301      	movs	r3, #1
 800f904:	465a      	mov	r2, fp
 800f906:	4631      	mov	r1, r6
 800f908:	4628      	mov	r0, r5
 800f90a:	47b8      	blx	r7
 800f90c:	3001      	adds	r0, #1
 800f90e:	f43f aeae 	beq.w	800f66e <_printf_float+0xb6>
 800f912:	f108 0801 	add.w	r8, r8, #1
 800f916:	e7ec      	b.n	800f8f2 <_printf_float+0x33a>
 800f918:	4642      	mov	r2, r8
 800f91a:	4631      	mov	r1, r6
 800f91c:	4628      	mov	r0, r5
 800f91e:	47b8      	blx	r7
 800f920:	3001      	adds	r0, #1
 800f922:	d1c2      	bne.n	800f8aa <_printf_float+0x2f2>
 800f924:	e6a3      	b.n	800f66e <_printf_float+0xb6>
 800f926:	2301      	movs	r3, #1
 800f928:	4631      	mov	r1, r6
 800f92a:	4628      	mov	r0, r5
 800f92c:	9206      	str	r2, [sp, #24]
 800f92e:	47b8      	blx	r7
 800f930:	3001      	adds	r0, #1
 800f932:	f43f ae9c 	beq.w	800f66e <_printf_float+0xb6>
 800f936:	9a06      	ldr	r2, [sp, #24]
 800f938:	f10b 0b01 	add.w	fp, fp, #1
 800f93c:	e7bb      	b.n	800f8b6 <_printf_float+0x2fe>
 800f93e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f942:	4631      	mov	r1, r6
 800f944:	4628      	mov	r0, r5
 800f946:	47b8      	blx	r7
 800f948:	3001      	adds	r0, #1
 800f94a:	d1c0      	bne.n	800f8ce <_printf_float+0x316>
 800f94c:	e68f      	b.n	800f66e <_printf_float+0xb6>
 800f94e:	9a06      	ldr	r2, [sp, #24]
 800f950:	464b      	mov	r3, r9
 800f952:	4442      	add	r2, r8
 800f954:	4631      	mov	r1, r6
 800f956:	4628      	mov	r0, r5
 800f958:	47b8      	blx	r7
 800f95a:	3001      	adds	r0, #1
 800f95c:	d1c3      	bne.n	800f8e6 <_printf_float+0x32e>
 800f95e:	e686      	b.n	800f66e <_printf_float+0xb6>
 800f960:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f964:	f1ba 0f01 	cmp.w	sl, #1
 800f968:	dc01      	bgt.n	800f96e <_printf_float+0x3b6>
 800f96a:	07db      	lsls	r3, r3, #31
 800f96c:	d536      	bpl.n	800f9dc <_printf_float+0x424>
 800f96e:	2301      	movs	r3, #1
 800f970:	4642      	mov	r2, r8
 800f972:	4631      	mov	r1, r6
 800f974:	4628      	mov	r0, r5
 800f976:	47b8      	blx	r7
 800f978:	3001      	adds	r0, #1
 800f97a:	f43f ae78 	beq.w	800f66e <_printf_float+0xb6>
 800f97e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f982:	4631      	mov	r1, r6
 800f984:	4628      	mov	r0, r5
 800f986:	47b8      	blx	r7
 800f988:	3001      	adds	r0, #1
 800f98a:	f43f ae70 	beq.w	800f66e <_printf_float+0xb6>
 800f98e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f992:	2200      	movs	r2, #0
 800f994:	2300      	movs	r3, #0
 800f996:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800f99a:	f7f1 f8cd 	bl	8000b38 <__aeabi_dcmpeq>
 800f99e:	b9c0      	cbnz	r0, 800f9d2 <_printf_float+0x41a>
 800f9a0:	4653      	mov	r3, sl
 800f9a2:	f108 0201 	add.w	r2, r8, #1
 800f9a6:	4631      	mov	r1, r6
 800f9a8:	4628      	mov	r0, r5
 800f9aa:	47b8      	blx	r7
 800f9ac:	3001      	adds	r0, #1
 800f9ae:	d10c      	bne.n	800f9ca <_printf_float+0x412>
 800f9b0:	e65d      	b.n	800f66e <_printf_float+0xb6>
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	465a      	mov	r2, fp
 800f9b6:	4631      	mov	r1, r6
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	47b8      	blx	r7
 800f9bc:	3001      	adds	r0, #1
 800f9be:	f43f ae56 	beq.w	800f66e <_printf_float+0xb6>
 800f9c2:	f108 0801 	add.w	r8, r8, #1
 800f9c6:	45d0      	cmp	r8, sl
 800f9c8:	dbf3      	blt.n	800f9b2 <_printf_float+0x3fa>
 800f9ca:	464b      	mov	r3, r9
 800f9cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f9d0:	e6df      	b.n	800f792 <_printf_float+0x1da>
 800f9d2:	f04f 0800 	mov.w	r8, #0
 800f9d6:	f104 0b1a 	add.w	fp, r4, #26
 800f9da:	e7f4      	b.n	800f9c6 <_printf_float+0x40e>
 800f9dc:	2301      	movs	r3, #1
 800f9de:	4642      	mov	r2, r8
 800f9e0:	e7e1      	b.n	800f9a6 <_printf_float+0x3ee>
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	464a      	mov	r2, r9
 800f9e6:	4631      	mov	r1, r6
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	47b8      	blx	r7
 800f9ec:	3001      	adds	r0, #1
 800f9ee:	f43f ae3e 	beq.w	800f66e <_printf_float+0xb6>
 800f9f2:	f108 0801 	add.w	r8, r8, #1
 800f9f6:	68e3      	ldr	r3, [r4, #12]
 800f9f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f9fa:	1a5b      	subs	r3, r3, r1
 800f9fc:	4543      	cmp	r3, r8
 800f9fe:	dcf0      	bgt.n	800f9e2 <_printf_float+0x42a>
 800fa00:	e6fc      	b.n	800f7fc <_printf_float+0x244>
 800fa02:	f04f 0800 	mov.w	r8, #0
 800fa06:	f104 0919 	add.w	r9, r4, #25
 800fa0a:	e7f4      	b.n	800f9f6 <_printf_float+0x43e>

0800fa0c <_printf_common>:
 800fa0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa10:	4616      	mov	r6, r2
 800fa12:	4698      	mov	r8, r3
 800fa14:	688a      	ldr	r2, [r1, #8]
 800fa16:	690b      	ldr	r3, [r1, #16]
 800fa18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	bfb8      	it	lt
 800fa20:	4613      	movlt	r3, r2
 800fa22:	6033      	str	r3, [r6, #0]
 800fa24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fa28:	4607      	mov	r7, r0
 800fa2a:	460c      	mov	r4, r1
 800fa2c:	b10a      	cbz	r2, 800fa32 <_printf_common+0x26>
 800fa2e:	3301      	adds	r3, #1
 800fa30:	6033      	str	r3, [r6, #0]
 800fa32:	6823      	ldr	r3, [r4, #0]
 800fa34:	0699      	lsls	r1, r3, #26
 800fa36:	bf42      	ittt	mi
 800fa38:	6833      	ldrmi	r3, [r6, #0]
 800fa3a:	3302      	addmi	r3, #2
 800fa3c:	6033      	strmi	r3, [r6, #0]
 800fa3e:	6825      	ldr	r5, [r4, #0]
 800fa40:	f015 0506 	ands.w	r5, r5, #6
 800fa44:	d106      	bne.n	800fa54 <_printf_common+0x48>
 800fa46:	f104 0a19 	add.w	sl, r4, #25
 800fa4a:	68e3      	ldr	r3, [r4, #12]
 800fa4c:	6832      	ldr	r2, [r6, #0]
 800fa4e:	1a9b      	subs	r3, r3, r2
 800fa50:	42ab      	cmp	r3, r5
 800fa52:	dc26      	bgt.n	800faa2 <_printf_common+0x96>
 800fa54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fa58:	6822      	ldr	r2, [r4, #0]
 800fa5a:	3b00      	subs	r3, #0
 800fa5c:	bf18      	it	ne
 800fa5e:	2301      	movne	r3, #1
 800fa60:	0692      	lsls	r2, r2, #26
 800fa62:	d42b      	bmi.n	800fabc <_printf_common+0xb0>
 800fa64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fa68:	4641      	mov	r1, r8
 800fa6a:	4638      	mov	r0, r7
 800fa6c:	47c8      	blx	r9
 800fa6e:	3001      	adds	r0, #1
 800fa70:	d01e      	beq.n	800fab0 <_printf_common+0xa4>
 800fa72:	6823      	ldr	r3, [r4, #0]
 800fa74:	6922      	ldr	r2, [r4, #16]
 800fa76:	f003 0306 	and.w	r3, r3, #6
 800fa7a:	2b04      	cmp	r3, #4
 800fa7c:	bf02      	ittt	eq
 800fa7e:	68e5      	ldreq	r5, [r4, #12]
 800fa80:	6833      	ldreq	r3, [r6, #0]
 800fa82:	1aed      	subeq	r5, r5, r3
 800fa84:	68a3      	ldr	r3, [r4, #8]
 800fa86:	bf0c      	ite	eq
 800fa88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa8c:	2500      	movne	r5, #0
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	bfc4      	itt	gt
 800fa92:	1a9b      	subgt	r3, r3, r2
 800fa94:	18ed      	addgt	r5, r5, r3
 800fa96:	2600      	movs	r6, #0
 800fa98:	341a      	adds	r4, #26
 800fa9a:	42b5      	cmp	r5, r6
 800fa9c:	d11a      	bne.n	800fad4 <_printf_common+0xc8>
 800fa9e:	2000      	movs	r0, #0
 800faa0:	e008      	b.n	800fab4 <_printf_common+0xa8>
 800faa2:	2301      	movs	r3, #1
 800faa4:	4652      	mov	r2, sl
 800faa6:	4641      	mov	r1, r8
 800faa8:	4638      	mov	r0, r7
 800faaa:	47c8      	blx	r9
 800faac:	3001      	adds	r0, #1
 800faae:	d103      	bne.n	800fab8 <_printf_common+0xac>
 800fab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fab8:	3501      	adds	r5, #1
 800faba:	e7c6      	b.n	800fa4a <_printf_common+0x3e>
 800fabc:	18e1      	adds	r1, r4, r3
 800fabe:	1c5a      	adds	r2, r3, #1
 800fac0:	2030      	movs	r0, #48	@ 0x30
 800fac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fac6:	4422      	add	r2, r4
 800fac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800facc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fad0:	3302      	adds	r3, #2
 800fad2:	e7c7      	b.n	800fa64 <_printf_common+0x58>
 800fad4:	2301      	movs	r3, #1
 800fad6:	4622      	mov	r2, r4
 800fad8:	4641      	mov	r1, r8
 800fada:	4638      	mov	r0, r7
 800fadc:	47c8      	blx	r9
 800fade:	3001      	adds	r0, #1
 800fae0:	d0e6      	beq.n	800fab0 <_printf_common+0xa4>
 800fae2:	3601      	adds	r6, #1
 800fae4:	e7d9      	b.n	800fa9a <_printf_common+0x8e>
	...

0800fae8 <_printf_i>:
 800fae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800faec:	7e0f      	ldrb	r7, [r1, #24]
 800faee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800faf0:	2f78      	cmp	r7, #120	@ 0x78
 800faf2:	4691      	mov	r9, r2
 800faf4:	4680      	mov	r8, r0
 800faf6:	460c      	mov	r4, r1
 800faf8:	469a      	mov	sl, r3
 800fafa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fafe:	d807      	bhi.n	800fb10 <_printf_i+0x28>
 800fb00:	2f62      	cmp	r7, #98	@ 0x62
 800fb02:	d80a      	bhi.n	800fb1a <_printf_i+0x32>
 800fb04:	2f00      	cmp	r7, #0
 800fb06:	f000 80d2 	beq.w	800fcae <_printf_i+0x1c6>
 800fb0a:	2f58      	cmp	r7, #88	@ 0x58
 800fb0c:	f000 80b9 	beq.w	800fc82 <_printf_i+0x19a>
 800fb10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fb18:	e03a      	b.n	800fb90 <_printf_i+0xa8>
 800fb1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fb1e:	2b15      	cmp	r3, #21
 800fb20:	d8f6      	bhi.n	800fb10 <_printf_i+0x28>
 800fb22:	a101      	add	r1, pc, #4	@ (adr r1, 800fb28 <_printf_i+0x40>)
 800fb24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb28:	0800fb81 	.word	0x0800fb81
 800fb2c:	0800fb95 	.word	0x0800fb95
 800fb30:	0800fb11 	.word	0x0800fb11
 800fb34:	0800fb11 	.word	0x0800fb11
 800fb38:	0800fb11 	.word	0x0800fb11
 800fb3c:	0800fb11 	.word	0x0800fb11
 800fb40:	0800fb95 	.word	0x0800fb95
 800fb44:	0800fb11 	.word	0x0800fb11
 800fb48:	0800fb11 	.word	0x0800fb11
 800fb4c:	0800fb11 	.word	0x0800fb11
 800fb50:	0800fb11 	.word	0x0800fb11
 800fb54:	0800fc95 	.word	0x0800fc95
 800fb58:	0800fbbf 	.word	0x0800fbbf
 800fb5c:	0800fc4f 	.word	0x0800fc4f
 800fb60:	0800fb11 	.word	0x0800fb11
 800fb64:	0800fb11 	.word	0x0800fb11
 800fb68:	0800fcb7 	.word	0x0800fcb7
 800fb6c:	0800fb11 	.word	0x0800fb11
 800fb70:	0800fbbf 	.word	0x0800fbbf
 800fb74:	0800fb11 	.word	0x0800fb11
 800fb78:	0800fb11 	.word	0x0800fb11
 800fb7c:	0800fc57 	.word	0x0800fc57
 800fb80:	6833      	ldr	r3, [r6, #0]
 800fb82:	1d1a      	adds	r2, r3, #4
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	6032      	str	r2, [r6, #0]
 800fb88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fb90:	2301      	movs	r3, #1
 800fb92:	e09d      	b.n	800fcd0 <_printf_i+0x1e8>
 800fb94:	6833      	ldr	r3, [r6, #0]
 800fb96:	6820      	ldr	r0, [r4, #0]
 800fb98:	1d19      	adds	r1, r3, #4
 800fb9a:	6031      	str	r1, [r6, #0]
 800fb9c:	0606      	lsls	r6, r0, #24
 800fb9e:	d501      	bpl.n	800fba4 <_printf_i+0xbc>
 800fba0:	681d      	ldr	r5, [r3, #0]
 800fba2:	e003      	b.n	800fbac <_printf_i+0xc4>
 800fba4:	0645      	lsls	r5, r0, #25
 800fba6:	d5fb      	bpl.n	800fba0 <_printf_i+0xb8>
 800fba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fbac:	2d00      	cmp	r5, #0
 800fbae:	da03      	bge.n	800fbb8 <_printf_i+0xd0>
 800fbb0:	232d      	movs	r3, #45	@ 0x2d
 800fbb2:	426d      	negs	r5, r5
 800fbb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fbb8:	4859      	ldr	r0, [pc, #356]	@ (800fd20 <_printf_i+0x238>)
 800fbba:	230a      	movs	r3, #10
 800fbbc:	e011      	b.n	800fbe2 <_printf_i+0xfa>
 800fbbe:	6821      	ldr	r1, [r4, #0]
 800fbc0:	6833      	ldr	r3, [r6, #0]
 800fbc2:	0608      	lsls	r0, r1, #24
 800fbc4:	f853 5b04 	ldr.w	r5, [r3], #4
 800fbc8:	d402      	bmi.n	800fbd0 <_printf_i+0xe8>
 800fbca:	0649      	lsls	r1, r1, #25
 800fbcc:	bf48      	it	mi
 800fbce:	b2ad      	uxthmi	r5, r5
 800fbd0:	2f6f      	cmp	r7, #111	@ 0x6f
 800fbd2:	4853      	ldr	r0, [pc, #332]	@ (800fd20 <_printf_i+0x238>)
 800fbd4:	6033      	str	r3, [r6, #0]
 800fbd6:	bf14      	ite	ne
 800fbd8:	230a      	movne	r3, #10
 800fbda:	2308      	moveq	r3, #8
 800fbdc:	2100      	movs	r1, #0
 800fbde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fbe2:	6866      	ldr	r6, [r4, #4]
 800fbe4:	60a6      	str	r6, [r4, #8]
 800fbe6:	2e00      	cmp	r6, #0
 800fbe8:	bfa2      	ittt	ge
 800fbea:	6821      	ldrge	r1, [r4, #0]
 800fbec:	f021 0104 	bicge.w	r1, r1, #4
 800fbf0:	6021      	strge	r1, [r4, #0]
 800fbf2:	b90d      	cbnz	r5, 800fbf8 <_printf_i+0x110>
 800fbf4:	2e00      	cmp	r6, #0
 800fbf6:	d04b      	beq.n	800fc90 <_printf_i+0x1a8>
 800fbf8:	4616      	mov	r6, r2
 800fbfa:	fbb5 f1f3 	udiv	r1, r5, r3
 800fbfe:	fb03 5711 	mls	r7, r3, r1, r5
 800fc02:	5dc7      	ldrb	r7, [r0, r7]
 800fc04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fc08:	462f      	mov	r7, r5
 800fc0a:	42bb      	cmp	r3, r7
 800fc0c:	460d      	mov	r5, r1
 800fc0e:	d9f4      	bls.n	800fbfa <_printf_i+0x112>
 800fc10:	2b08      	cmp	r3, #8
 800fc12:	d10b      	bne.n	800fc2c <_printf_i+0x144>
 800fc14:	6823      	ldr	r3, [r4, #0]
 800fc16:	07df      	lsls	r7, r3, #31
 800fc18:	d508      	bpl.n	800fc2c <_printf_i+0x144>
 800fc1a:	6923      	ldr	r3, [r4, #16]
 800fc1c:	6861      	ldr	r1, [r4, #4]
 800fc1e:	4299      	cmp	r1, r3
 800fc20:	bfde      	ittt	le
 800fc22:	2330      	movle	r3, #48	@ 0x30
 800fc24:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fc28:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800fc2c:	1b92      	subs	r2, r2, r6
 800fc2e:	6122      	str	r2, [r4, #16]
 800fc30:	f8cd a000 	str.w	sl, [sp]
 800fc34:	464b      	mov	r3, r9
 800fc36:	aa03      	add	r2, sp, #12
 800fc38:	4621      	mov	r1, r4
 800fc3a:	4640      	mov	r0, r8
 800fc3c:	f7ff fee6 	bl	800fa0c <_printf_common>
 800fc40:	3001      	adds	r0, #1
 800fc42:	d14a      	bne.n	800fcda <_printf_i+0x1f2>
 800fc44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc48:	b004      	add	sp, #16
 800fc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc4e:	6823      	ldr	r3, [r4, #0]
 800fc50:	f043 0320 	orr.w	r3, r3, #32
 800fc54:	6023      	str	r3, [r4, #0]
 800fc56:	4833      	ldr	r0, [pc, #204]	@ (800fd24 <_printf_i+0x23c>)
 800fc58:	2778      	movs	r7, #120	@ 0x78
 800fc5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fc5e:	6823      	ldr	r3, [r4, #0]
 800fc60:	6831      	ldr	r1, [r6, #0]
 800fc62:	061f      	lsls	r7, r3, #24
 800fc64:	f851 5b04 	ldr.w	r5, [r1], #4
 800fc68:	d402      	bmi.n	800fc70 <_printf_i+0x188>
 800fc6a:	065f      	lsls	r7, r3, #25
 800fc6c:	bf48      	it	mi
 800fc6e:	b2ad      	uxthmi	r5, r5
 800fc70:	6031      	str	r1, [r6, #0]
 800fc72:	07d9      	lsls	r1, r3, #31
 800fc74:	bf44      	itt	mi
 800fc76:	f043 0320 	orrmi.w	r3, r3, #32
 800fc7a:	6023      	strmi	r3, [r4, #0]
 800fc7c:	b11d      	cbz	r5, 800fc86 <_printf_i+0x19e>
 800fc7e:	2310      	movs	r3, #16
 800fc80:	e7ac      	b.n	800fbdc <_printf_i+0xf4>
 800fc82:	4827      	ldr	r0, [pc, #156]	@ (800fd20 <_printf_i+0x238>)
 800fc84:	e7e9      	b.n	800fc5a <_printf_i+0x172>
 800fc86:	6823      	ldr	r3, [r4, #0]
 800fc88:	f023 0320 	bic.w	r3, r3, #32
 800fc8c:	6023      	str	r3, [r4, #0]
 800fc8e:	e7f6      	b.n	800fc7e <_printf_i+0x196>
 800fc90:	4616      	mov	r6, r2
 800fc92:	e7bd      	b.n	800fc10 <_printf_i+0x128>
 800fc94:	6833      	ldr	r3, [r6, #0]
 800fc96:	6825      	ldr	r5, [r4, #0]
 800fc98:	6961      	ldr	r1, [r4, #20]
 800fc9a:	1d18      	adds	r0, r3, #4
 800fc9c:	6030      	str	r0, [r6, #0]
 800fc9e:	062e      	lsls	r6, r5, #24
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	d501      	bpl.n	800fca8 <_printf_i+0x1c0>
 800fca4:	6019      	str	r1, [r3, #0]
 800fca6:	e002      	b.n	800fcae <_printf_i+0x1c6>
 800fca8:	0668      	lsls	r0, r5, #25
 800fcaa:	d5fb      	bpl.n	800fca4 <_printf_i+0x1bc>
 800fcac:	8019      	strh	r1, [r3, #0]
 800fcae:	2300      	movs	r3, #0
 800fcb0:	6123      	str	r3, [r4, #16]
 800fcb2:	4616      	mov	r6, r2
 800fcb4:	e7bc      	b.n	800fc30 <_printf_i+0x148>
 800fcb6:	6833      	ldr	r3, [r6, #0]
 800fcb8:	1d1a      	adds	r2, r3, #4
 800fcba:	6032      	str	r2, [r6, #0]
 800fcbc:	681e      	ldr	r6, [r3, #0]
 800fcbe:	6862      	ldr	r2, [r4, #4]
 800fcc0:	2100      	movs	r1, #0
 800fcc2:	4630      	mov	r0, r6
 800fcc4:	f7f0 fabc 	bl	8000240 <memchr>
 800fcc8:	b108      	cbz	r0, 800fcce <_printf_i+0x1e6>
 800fcca:	1b80      	subs	r0, r0, r6
 800fccc:	6060      	str	r0, [r4, #4]
 800fcce:	6863      	ldr	r3, [r4, #4]
 800fcd0:	6123      	str	r3, [r4, #16]
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fcd8:	e7aa      	b.n	800fc30 <_printf_i+0x148>
 800fcda:	6923      	ldr	r3, [r4, #16]
 800fcdc:	4632      	mov	r2, r6
 800fcde:	4649      	mov	r1, r9
 800fce0:	4640      	mov	r0, r8
 800fce2:	47d0      	blx	sl
 800fce4:	3001      	adds	r0, #1
 800fce6:	d0ad      	beq.n	800fc44 <_printf_i+0x15c>
 800fce8:	6823      	ldr	r3, [r4, #0]
 800fcea:	079b      	lsls	r3, r3, #30
 800fcec:	d413      	bmi.n	800fd16 <_printf_i+0x22e>
 800fcee:	68e0      	ldr	r0, [r4, #12]
 800fcf0:	9b03      	ldr	r3, [sp, #12]
 800fcf2:	4298      	cmp	r0, r3
 800fcf4:	bfb8      	it	lt
 800fcf6:	4618      	movlt	r0, r3
 800fcf8:	e7a6      	b.n	800fc48 <_printf_i+0x160>
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	4632      	mov	r2, r6
 800fcfe:	4649      	mov	r1, r9
 800fd00:	4640      	mov	r0, r8
 800fd02:	47d0      	blx	sl
 800fd04:	3001      	adds	r0, #1
 800fd06:	d09d      	beq.n	800fc44 <_printf_i+0x15c>
 800fd08:	3501      	adds	r5, #1
 800fd0a:	68e3      	ldr	r3, [r4, #12]
 800fd0c:	9903      	ldr	r1, [sp, #12]
 800fd0e:	1a5b      	subs	r3, r3, r1
 800fd10:	42ab      	cmp	r3, r5
 800fd12:	dcf2      	bgt.n	800fcfa <_printf_i+0x212>
 800fd14:	e7eb      	b.n	800fcee <_printf_i+0x206>
 800fd16:	2500      	movs	r5, #0
 800fd18:	f104 0619 	add.w	r6, r4, #25
 800fd1c:	e7f5      	b.n	800fd0a <_printf_i+0x222>
 800fd1e:	bf00      	nop
 800fd20:	080158ec 	.word	0x080158ec
 800fd24:	080158fd 	.word	0x080158fd

0800fd28 <_scanf_float>:
 800fd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd2c:	b087      	sub	sp, #28
 800fd2e:	4617      	mov	r7, r2
 800fd30:	9303      	str	r3, [sp, #12]
 800fd32:	688b      	ldr	r3, [r1, #8]
 800fd34:	1e5a      	subs	r2, r3, #1
 800fd36:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800fd3a:	bf81      	itttt	hi
 800fd3c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800fd40:	eb03 0b05 	addhi.w	fp, r3, r5
 800fd44:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800fd48:	608b      	strhi	r3, [r1, #8]
 800fd4a:	680b      	ldr	r3, [r1, #0]
 800fd4c:	460a      	mov	r2, r1
 800fd4e:	f04f 0500 	mov.w	r5, #0
 800fd52:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800fd56:	f842 3b1c 	str.w	r3, [r2], #28
 800fd5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fd5e:	4680      	mov	r8, r0
 800fd60:	460c      	mov	r4, r1
 800fd62:	bf98      	it	ls
 800fd64:	f04f 0b00 	movls.w	fp, #0
 800fd68:	9201      	str	r2, [sp, #4]
 800fd6a:	4616      	mov	r6, r2
 800fd6c:	46aa      	mov	sl, r5
 800fd6e:	46a9      	mov	r9, r5
 800fd70:	9502      	str	r5, [sp, #8]
 800fd72:	68a2      	ldr	r2, [r4, #8]
 800fd74:	b152      	cbz	r2, 800fd8c <_scanf_float+0x64>
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	2b4e      	cmp	r3, #78	@ 0x4e
 800fd7c:	d864      	bhi.n	800fe48 <_scanf_float+0x120>
 800fd7e:	2b40      	cmp	r3, #64	@ 0x40
 800fd80:	d83c      	bhi.n	800fdfc <_scanf_float+0xd4>
 800fd82:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800fd86:	b2c8      	uxtb	r0, r1
 800fd88:	280e      	cmp	r0, #14
 800fd8a:	d93a      	bls.n	800fe02 <_scanf_float+0xda>
 800fd8c:	f1b9 0f00 	cmp.w	r9, #0
 800fd90:	d003      	beq.n	800fd9a <_scanf_float+0x72>
 800fd92:	6823      	ldr	r3, [r4, #0]
 800fd94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fd98:	6023      	str	r3, [r4, #0]
 800fd9a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800fd9e:	f1ba 0f01 	cmp.w	sl, #1
 800fda2:	f200 8117 	bhi.w	800ffd4 <_scanf_float+0x2ac>
 800fda6:	9b01      	ldr	r3, [sp, #4]
 800fda8:	429e      	cmp	r6, r3
 800fdaa:	f200 8108 	bhi.w	800ffbe <_scanf_float+0x296>
 800fdae:	2001      	movs	r0, #1
 800fdb0:	b007      	add	sp, #28
 800fdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdb6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800fdba:	2a0d      	cmp	r2, #13
 800fdbc:	d8e6      	bhi.n	800fd8c <_scanf_float+0x64>
 800fdbe:	a101      	add	r1, pc, #4	@ (adr r1, 800fdc4 <_scanf_float+0x9c>)
 800fdc0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fdc4:	0800ff0b 	.word	0x0800ff0b
 800fdc8:	0800fd8d 	.word	0x0800fd8d
 800fdcc:	0800fd8d 	.word	0x0800fd8d
 800fdd0:	0800fd8d 	.word	0x0800fd8d
 800fdd4:	0800ff6b 	.word	0x0800ff6b
 800fdd8:	0800ff43 	.word	0x0800ff43
 800fddc:	0800fd8d 	.word	0x0800fd8d
 800fde0:	0800fd8d 	.word	0x0800fd8d
 800fde4:	0800ff19 	.word	0x0800ff19
 800fde8:	0800fd8d 	.word	0x0800fd8d
 800fdec:	0800fd8d 	.word	0x0800fd8d
 800fdf0:	0800fd8d 	.word	0x0800fd8d
 800fdf4:	0800fd8d 	.word	0x0800fd8d
 800fdf8:	0800fed1 	.word	0x0800fed1
 800fdfc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800fe00:	e7db      	b.n	800fdba <_scanf_float+0x92>
 800fe02:	290e      	cmp	r1, #14
 800fe04:	d8c2      	bhi.n	800fd8c <_scanf_float+0x64>
 800fe06:	a001      	add	r0, pc, #4	@ (adr r0, 800fe0c <_scanf_float+0xe4>)
 800fe08:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fe0c:	0800fec1 	.word	0x0800fec1
 800fe10:	0800fd8d 	.word	0x0800fd8d
 800fe14:	0800fec1 	.word	0x0800fec1
 800fe18:	0800ff57 	.word	0x0800ff57
 800fe1c:	0800fd8d 	.word	0x0800fd8d
 800fe20:	0800fe69 	.word	0x0800fe69
 800fe24:	0800fea7 	.word	0x0800fea7
 800fe28:	0800fea7 	.word	0x0800fea7
 800fe2c:	0800fea7 	.word	0x0800fea7
 800fe30:	0800fea7 	.word	0x0800fea7
 800fe34:	0800fea7 	.word	0x0800fea7
 800fe38:	0800fea7 	.word	0x0800fea7
 800fe3c:	0800fea7 	.word	0x0800fea7
 800fe40:	0800fea7 	.word	0x0800fea7
 800fe44:	0800fea7 	.word	0x0800fea7
 800fe48:	2b6e      	cmp	r3, #110	@ 0x6e
 800fe4a:	d809      	bhi.n	800fe60 <_scanf_float+0x138>
 800fe4c:	2b60      	cmp	r3, #96	@ 0x60
 800fe4e:	d8b2      	bhi.n	800fdb6 <_scanf_float+0x8e>
 800fe50:	2b54      	cmp	r3, #84	@ 0x54
 800fe52:	d07b      	beq.n	800ff4c <_scanf_float+0x224>
 800fe54:	2b59      	cmp	r3, #89	@ 0x59
 800fe56:	d199      	bne.n	800fd8c <_scanf_float+0x64>
 800fe58:	2d07      	cmp	r5, #7
 800fe5a:	d197      	bne.n	800fd8c <_scanf_float+0x64>
 800fe5c:	2508      	movs	r5, #8
 800fe5e:	e02c      	b.n	800feba <_scanf_float+0x192>
 800fe60:	2b74      	cmp	r3, #116	@ 0x74
 800fe62:	d073      	beq.n	800ff4c <_scanf_float+0x224>
 800fe64:	2b79      	cmp	r3, #121	@ 0x79
 800fe66:	e7f6      	b.n	800fe56 <_scanf_float+0x12e>
 800fe68:	6821      	ldr	r1, [r4, #0]
 800fe6a:	05c8      	lsls	r0, r1, #23
 800fe6c:	d51b      	bpl.n	800fea6 <_scanf_float+0x17e>
 800fe6e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800fe72:	6021      	str	r1, [r4, #0]
 800fe74:	f109 0901 	add.w	r9, r9, #1
 800fe78:	f1bb 0f00 	cmp.w	fp, #0
 800fe7c:	d003      	beq.n	800fe86 <_scanf_float+0x15e>
 800fe7e:	3201      	adds	r2, #1
 800fe80:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800fe84:	60a2      	str	r2, [r4, #8]
 800fe86:	68a3      	ldr	r3, [r4, #8]
 800fe88:	3b01      	subs	r3, #1
 800fe8a:	60a3      	str	r3, [r4, #8]
 800fe8c:	6923      	ldr	r3, [r4, #16]
 800fe8e:	3301      	adds	r3, #1
 800fe90:	6123      	str	r3, [r4, #16]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	3b01      	subs	r3, #1
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	607b      	str	r3, [r7, #4]
 800fe9a:	f340 8087 	ble.w	800ffac <_scanf_float+0x284>
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	3301      	adds	r3, #1
 800fea2:	603b      	str	r3, [r7, #0]
 800fea4:	e765      	b.n	800fd72 <_scanf_float+0x4a>
 800fea6:	eb1a 0105 	adds.w	r1, sl, r5
 800feaa:	f47f af6f 	bne.w	800fd8c <_scanf_float+0x64>
 800feae:	6822      	ldr	r2, [r4, #0]
 800feb0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800feb4:	6022      	str	r2, [r4, #0]
 800feb6:	460d      	mov	r5, r1
 800feb8:	468a      	mov	sl, r1
 800feba:	f806 3b01 	strb.w	r3, [r6], #1
 800febe:	e7e2      	b.n	800fe86 <_scanf_float+0x15e>
 800fec0:	6822      	ldr	r2, [r4, #0]
 800fec2:	0610      	lsls	r0, r2, #24
 800fec4:	f57f af62 	bpl.w	800fd8c <_scanf_float+0x64>
 800fec8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fecc:	6022      	str	r2, [r4, #0]
 800fece:	e7f4      	b.n	800feba <_scanf_float+0x192>
 800fed0:	f1ba 0f00 	cmp.w	sl, #0
 800fed4:	d10e      	bne.n	800fef4 <_scanf_float+0x1cc>
 800fed6:	f1b9 0f00 	cmp.w	r9, #0
 800feda:	d10e      	bne.n	800fefa <_scanf_float+0x1d2>
 800fedc:	6822      	ldr	r2, [r4, #0]
 800fede:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fee2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fee6:	d108      	bne.n	800fefa <_scanf_float+0x1d2>
 800fee8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800feec:	6022      	str	r2, [r4, #0]
 800feee:	f04f 0a01 	mov.w	sl, #1
 800fef2:	e7e2      	b.n	800feba <_scanf_float+0x192>
 800fef4:	f1ba 0f02 	cmp.w	sl, #2
 800fef8:	d055      	beq.n	800ffa6 <_scanf_float+0x27e>
 800fefa:	2d01      	cmp	r5, #1
 800fefc:	d002      	beq.n	800ff04 <_scanf_float+0x1dc>
 800fefe:	2d04      	cmp	r5, #4
 800ff00:	f47f af44 	bne.w	800fd8c <_scanf_float+0x64>
 800ff04:	3501      	adds	r5, #1
 800ff06:	b2ed      	uxtb	r5, r5
 800ff08:	e7d7      	b.n	800feba <_scanf_float+0x192>
 800ff0a:	f1ba 0f01 	cmp.w	sl, #1
 800ff0e:	f47f af3d 	bne.w	800fd8c <_scanf_float+0x64>
 800ff12:	f04f 0a02 	mov.w	sl, #2
 800ff16:	e7d0      	b.n	800feba <_scanf_float+0x192>
 800ff18:	b97d      	cbnz	r5, 800ff3a <_scanf_float+0x212>
 800ff1a:	f1b9 0f00 	cmp.w	r9, #0
 800ff1e:	f47f af38 	bne.w	800fd92 <_scanf_float+0x6a>
 800ff22:	6822      	ldr	r2, [r4, #0]
 800ff24:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ff28:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ff2c:	f040 8108 	bne.w	8010140 <_scanf_float+0x418>
 800ff30:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ff34:	6022      	str	r2, [r4, #0]
 800ff36:	2501      	movs	r5, #1
 800ff38:	e7bf      	b.n	800feba <_scanf_float+0x192>
 800ff3a:	2d03      	cmp	r5, #3
 800ff3c:	d0e2      	beq.n	800ff04 <_scanf_float+0x1dc>
 800ff3e:	2d05      	cmp	r5, #5
 800ff40:	e7de      	b.n	800ff00 <_scanf_float+0x1d8>
 800ff42:	2d02      	cmp	r5, #2
 800ff44:	f47f af22 	bne.w	800fd8c <_scanf_float+0x64>
 800ff48:	2503      	movs	r5, #3
 800ff4a:	e7b6      	b.n	800feba <_scanf_float+0x192>
 800ff4c:	2d06      	cmp	r5, #6
 800ff4e:	f47f af1d 	bne.w	800fd8c <_scanf_float+0x64>
 800ff52:	2507      	movs	r5, #7
 800ff54:	e7b1      	b.n	800feba <_scanf_float+0x192>
 800ff56:	6822      	ldr	r2, [r4, #0]
 800ff58:	0591      	lsls	r1, r2, #22
 800ff5a:	f57f af17 	bpl.w	800fd8c <_scanf_float+0x64>
 800ff5e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ff62:	6022      	str	r2, [r4, #0]
 800ff64:	f8cd 9008 	str.w	r9, [sp, #8]
 800ff68:	e7a7      	b.n	800feba <_scanf_float+0x192>
 800ff6a:	6822      	ldr	r2, [r4, #0]
 800ff6c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ff70:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ff74:	d006      	beq.n	800ff84 <_scanf_float+0x25c>
 800ff76:	0550      	lsls	r0, r2, #21
 800ff78:	f57f af08 	bpl.w	800fd8c <_scanf_float+0x64>
 800ff7c:	f1b9 0f00 	cmp.w	r9, #0
 800ff80:	f000 80de 	beq.w	8010140 <_scanf_float+0x418>
 800ff84:	0591      	lsls	r1, r2, #22
 800ff86:	bf58      	it	pl
 800ff88:	9902      	ldrpl	r1, [sp, #8]
 800ff8a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ff8e:	bf58      	it	pl
 800ff90:	eba9 0101 	subpl.w	r1, r9, r1
 800ff94:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ff98:	bf58      	it	pl
 800ff9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ff9e:	6022      	str	r2, [r4, #0]
 800ffa0:	f04f 0900 	mov.w	r9, #0
 800ffa4:	e789      	b.n	800feba <_scanf_float+0x192>
 800ffa6:	f04f 0a03 	mov.w	sl, #3
 800ffaa:	e786      	b.n	800feba <_scanf_float+0x192>
 800ffac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ffb0:	4639      	mov	r1, r7
 800ffb2:	4640      	mov	r0, r8
 800ffb4:	4798      	blx	r3
 800ffb6:	2800      	cmp	r0, #0
 800ffb8:	f43f aedb 	beq.w	800fd72 <_scanf_float+0x4a>
 800ffbc:	e6e6      	b.n	800fd8c <_scanf_float+0x64>
 800ffbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ffc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ffc6:	463a      	mov	r2, r7
 800ffc8:	4640      	mov	r0, r8
 800ffca:	4798      	blx	r3
 800ffcc:	6923      	ldr	r3, [r4, #16]
 800ffce:	3b01      	subs	r3, #1
 800ffd0:	6123      	str	r3, [r4, #16]
 800ffd2:	e6e8      	b.n	800fda6 <_scanf_float+0x7e>
 800ffd4:	1e6b      	subs	r3, r5, #1
 800ffd6:	2b06      	cmp	r3, #6
 800ffd8:	d824      	bhi.n	8010024 <_scanf_float+0x2fc>
 800ffda:	2d02      	cmp	r5, #2
 800ffdc:	d836      	bhi.n	801004c <_scanf_float+0x324>
 800ffde:	9b01      	ldr	r3, [sp, #4]
 800ffe0:	429e      	cmp	r6, r3
 800ffe2:	f67f aee4 	bls.w	800fdae <_scanf_float+0x86>
 800ffe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ffea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ffee:	463a      	mov	r2, r7
 800fff0:	4640      	mov	r0, r8
 800fff2:	4798      	blx	r3
 800fff4:	6923      	ldr	r3, [r4, #16]
 800fff6:	3b01      	subs	r3, #1
 800fff8:	6123      	str	r3, [r4, #16]
 800fffa:	e7f0      	b.n	800ffde <_scanf_float+0x2b6>
 800fffc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010000:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010004:	463a      	mov	r2, r7
 8010006:	4640      	mov	r0, r8
 8010008:	4798      	blx	r3
 801000a:	6923      	ldr	r3, [r4, #16]
 801000c:	3b01      	subs	r3, #1
 801000e:	6123      	str	r3, [r4, #16]
 8010010:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8010014:	fa5f fa8a 	uxtb.w	sl, sl
 8010018:	f1ba 0f02 	cmp.w	sl, #2
 801001c:	d1ee      	bne.n	800fffc <_scanf_float+0x2d4>
 801001e:	3d03      	subs	r5, #3
 8010020:	b2ed      	uxtb	r5, r5
 8010022:	1b76      	subs	r6, r6, r5
 8010024:	6823      	ldr	r3, [r4, #0]
 8010026:	05da      	lsls	r2, r3, #23
 8010028:	d530      	bpl.n	801008c <_scanf_float+0x364>
 801002a:	055b      	lsls	r3, r3, #21
 801002c:	d511      	bpl.n	8010052 <_scanf_float+0x32a>
 801002e:	9b01      	ldr	r3, [sp, #4]
 8010030:	429e      	cmp	r6, r3
 8010032:	f67f aebc 	bls.w	800fdae <_scanf_float+0x86>
 8010036:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801003a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801003e:	463a      	mov	r2, r7
 8010040:	4640      	mov	r0, r8
 8010042:	4798      	blx	r3
 8010044:	6923      	ldr	r3, [r4, #16]
 8010046:	3b01      	subs	r3, #1
 8010048:	6123      	str	r3, [r4, #16]
 801004a:	e7f0      	b.n	801002e <_scanf_float+0x306>
 801004c:	46aa      	mov	sl, r5
 801004e:	46b3      	mov	fp, r6
 8010050:	e7de      	b.n	8010010 <_scanf_float+0x2e8>
 8010052:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010056:	6923      	ldr	r3, [r4, #16]
 8010058:	2965      	cmp	r1, #101	@ 0x65
 801005a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801005e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8010062:	6123      	str	r3, [r4, #16]
 8010064:	d00c      	beq.n	8010080 <_scanf_float+0x358>
 8010066:	2945      	cmp	r1, #69	@ 0x45
 8010068:	d00a      	beq.n	8010080 <_scanf_float+0x358>
 801006a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801006e:	463a      	mov	r2, r7
 8010070:	4640      	mov	r0, r8
 8010072:	4798      	blx	r3
 8010074:	6923      	ldr	r3, [r4, #16]
 8010076:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801007a:	3b01      	subs	r3, #1
 801007c:	1eb5      	subs	r5, r6, #2
 801007e:	6123      	str	r3, [r4, #16]
 8010080:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010084:	463a      	mov	r2, r7
 8010086:	4640      	mov	r0, r8
 8010088:	4798      	blx	r3
 801008a:	462e      	mov	r6, r5
 801008c:	6822      	ldr	r2, [r4, #0]
 801008e:	f012 0210 	ands.w	r2, r2, #16
 8010092:	d001      	beq.n	8010098 <_scanf_float+0x370>
 8010094:	2000      	movs	r0, #0
 8010096:	e68b      	b.n	800fdb0 <_scanf_float+0x88>
 8010098:	7032      	strb	r2, [r6, #0]
 801009a:	6823      	ldr	r3, [r4, #0]
 801009c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80100a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80100a4:	d11c      	bne.n	80100e0 <_scanf_float+0x3b8>
 80100a6:	9b02      	ldr	r3, [sp, #8]
 80100a8:	454b      	cmp	r3, r9
 80100aa:	eba3 0209 	sub.w	r2, r3, r9
 80100ae:	d123      	bne.n	80100f8 <_scanf_float+0x3d0>
 80100b0:	9901      	ldr	r1, [sp, #4]
 80100b2:	2200      	movs	r2, #0
 80100b4:	4640      	mov	r0, r8
 80100b6:	f002 fce3 	bl	8012a80 <_strtod_r>
 80100ba:	9b03      	ldr	r3, [sp, #12]
 80100bc:	6821      	ldr	r1, [r4, #0]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f011 0f02 	tst.w	r1, #2
 80100c4:	ec57 6b10 	vmov	r6, r7, d0
 80100c8:	f103 0204 	add.w	r2, r3, #4
 80100cc:	d01f      	beq.n	801010e <_scanf_float+0x3e6>
 80100ce:	9903      	ldr	r1, [sp, #12]
 80100d0:	600a      	str	r2, [r1, #0]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	e9c3 6700 	strd	r6, r7, [r3]
 80100d8:	68e3      	ldr	r3, [r4, #12]
 80100da:	3301      	adds	r3, #1
 80100dc:	60e3      	str	r3, [r4, #12]
 80100de:	e7d9      	b.n	8010094 <_scanf_float+0x36c>
 80100e0:	9b04      	ldr	r3, [sp, #16]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d0e4      	beq.n	80100b0 <_scanf_float+0x388>
 80100e6:	9905      	ldr	r1, [sp, #20]
 80100e8:	230a      	movs	r3, #10
 80100ea:	3101      	adds	r1, #1
 80100ec:	4640      	mov	r0, r8
 80100ee:	f002 fd47 	bl	8012b80 <_strtol_r>
 80100f2:	9b04      	ldr	r3, [sp, #16]
 80100f4:	9e05      	ldr	r6, [sp, #20]
 80100f6:	1ac2      	subs	r2, r0, r3
 80100f8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80100fc:	429e      	cmp	r6, r3
 80100fe:	bf28      	it	cs
 8010100:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010104:	4910      	ldr	r1, [pc, #64]	@ (8010148 <_scanf_float+0x420>)
 8010106:	4630      	mov	r0, r6
 8010108:	f000 f988 	bl	801041c <siprintf>
 801010c:	e7d0      	b.n	80100b0 <_scanf_float+0x388>
 801010e:	f011 0f04 	tst.w	r1, #4
 8010112:	9903      	ldr	r1, [sp, #12]
 8010114:	600a      	str	r2, [r1, #0]
 8010116:	d1dc      	bne.n	80100d2 <_scanf_float+0x3aa>
 8010118:	681d      	ldr	r5, [r3, #0]
 801011a:	4632      	mov	r2, r6
 801011c:	463b      	mov	r3, r7
 801011e:	4630      	mov	r0, r6
 8010120:	4639      	mov	r1, r7
 8010122:	f7f0 fd3b 	bl	8000b9c <__aeabi_dcmpun>
 8010126:	b128      	cbz	r0, 8010134 <_scanf_float+0x40c>
 8010128:	4808      	ldr	r0, [pc, #32]	@ (801014c <_scanf_float+0x424>)
 801012a:	f000 fb4b 	bl	80107c4 <nanf>
 801012e:	ed85 0a00 	vstr	s0, [r5]
 8010132:	e7d1      	b.n	80100d8 <_scanf_float+0x3b0>
 8010134:	4630      	mov	r0, r6
 8010136:	4639      	mov	r1, r7
 8010138:	f7f0 fd8e 	bl	8000c58 <__aeabi_d2f>
 801013c:	6028      	str	r0, [r5, #0]
 801013e:	e7cb      	b.n	80100d8 <_scanf_float+0x3b0>
 8010140:	f04f 0900 	mov.w	r9, #0
 8010144:	e629      	b.n	800fd9a <_scanf_float+0x72>
 8010146:	bf00      	nop
 8010148:	0801590e 	.word	0x0801590e
 801014c:	08015cc0 	.word	0x08015cc0

08010150 <std>:
 8010150:	2300      	movs	r3, #0
 8010152:	b510      	push	{r4, lr}
 8010154:	4604      	mov	r4, r0
 8010156:	e9c0 3300 	strd	r3, r3, [r0]
 801015a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801015e:	6083      	str	r3, [r0, #8]
 8010160:	8181      	strh	r1, [r0, #12]
 8010162:	6643      	str	r3, [r0, #100]	@ 0x64
 8010164:	81c2      	strh	r2, [r0, #14]
 8010166:	6183      	str	r3, [r0, #24]
 8010168:	4619      	mov	r1, r3
 801016a:	2208      	movs	r2, #8
 801016c:	305c      	adds	r0, #92	@ 0x5c
 801016e:	f000 fa79 	bl	8010664 <memset>
 8010172:	4b0d      	ldr	r3, [pc, #52]	@ (80101a8 <std+0x58>)
 8010174:	6263      	str	r3, [r4, #36]	@ 0x24
 8010176:	4b0d      	ldr	r3, [pc, #52]	@ (80101ac <std+0x5c>)
 8010178:	62a3      	str	r3, [r4, #40]	@ 0x28
 801017a:	4b0d      	ldr	r3, [pc, #52]	@ (80101b0 <std+0x60>)
 801017c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801017e:	4b0d      	ldr	r3, [pc, #52]	@ (80101b4 <std+0x64>)
 8010180:	6323      	str	r3, [r4, #48]	@ 0x30
 8010182:	4b0d      	ldr	r3, [pc, #52]	@ (80101b8 <std+0x68>)
 8010184:	6224      	str	r4, [r4, #32]
 8010186:	429c      	cmp	r4, r3
 8010188:	d006      	beq.n	8010198 <std+0x48>
 801018a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801018e:	4294      	cmp	r4, r2
 8010190:	d002      	beq.n	8010198 <std+0x48>
 8010192:	33d0      	adds	r3, #208	@ 0xd0
 8010194:	429c      	cmp	r4, r3
 8010196:	d105      	bne.n	80101a4 <std+0x54>
 8010198:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801019c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101a0:	f000 bafe 	b.w	80107a0 <__retarget_lock_init_recursive>
 80101a4:	bd10      	pop	{r4, pc}
 80101a6:	bf00      	nop
 80101a8:	080104b1 	.word	0x080104b1
 80101ac:	080104d7 	.word	0x080104d7
 80101b0:	0801050f 	.word	0x0801050f
 80101b4:	08010533 	.word	0x08010533
 80101b8:	20002144 	.word	0x20002144

080101bc <stdio_exit_handler>:
 80101bc:	4a02      	ldr	r2, [pc, #8]	@ (80101c8 <stdio_exit_handler+0xc>)
 80101be:	4903      	ldr	r1, [pc, #12]	@ (80101cc <stdio_exit_handler+0x10>)
 80101c0:	4803      	ldr	r0, [pc, #12]	@ (80101d0 <stdio_exit_handler+0x14>)
 80101c2:	f000 b869 	b.w	8010298 <_fwalk_sglue>
 80101c6:	bf00      	nop
 80101c8:	20000170 	.word	0x20000170
 80101cc:	080137f5 	.word	0x080137f5
 80101d0:	20000180 	.word	0x20000180

080101d4 <cleanup_stdio>:
 80101d4:	6841      	ldr	r1, [r0, #4]
 80101d6:	4b0c      	ldr	r3, [pc, #48]	@ (8010208 <cleanup_stdio+0x34>)
 80101d8:	4299      	cmp	r1, r3
 80101da:	b510      	push	{r4, lr}
 80101dc:	4604      	mov	r4, r0
 80101de:	d001      	beq.n	80101e4 <cleanup_stdio+0x10>
 80101e0:	f003 fb08 	bl	80137f4 <_fflush_r>
 80101e4:	68a1      	ldr	r1, [r4, #8]
 80101e6:	4b09      	ldr	r3, [pc, #36]	@ (801020c <cleanup_stdio+0x38>)
 80101e8:	4299      	cmp	r1, r3
 80101ea:	d002      	beq.n	80101f2 <cleanup_stdio+0x1e>
 80101ec:	4620      	mov	r0, r4
 80101ee:	f003 fb01 	bl	80137f4 <_fflush_r>
 80101f2:	68e1      	ldr	r1, [r4, #12]
 80101f4:	4b06      	ldr	r3, [pc, #24]	@ (8010210 <cleanup_stdio+0x3c>)
 80101f6:	4299      	cmp	r1, r3
 80101f8:	d004      	beq.n	8010204 <cleanup_stdio+0x30>
 80101fa:	4620      	mov	r0, r4
 80101fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010200:	f003 baf8 	b.w	80137f4 <_fflush_r>
 8010204:	bd10      	pop	{r4, pc}
 8010206:	bf00      	nop
 8010208:	20002144 	.word	0x20002144
 801020c:	200021ac 	.word	0x200021ac
 8010210:	20002214 	.word	0x20002214

08010214 <global_stdio_init.part.0>:
 8010214:	b510      	push	{r4, lr}
 8010216:	4b0b      	ldr	r3, [pc, #44]	@ (8010244 <global_stdio_init.part.0+0x30>)
 8010218:	4c0b      	ldr	r4, [pc, #44]	@ (8010248 <global_stdio_init.part.0+0x34>)
 801021a:	4a0c      	ldr	r2, [pc, #48]	@ (801024c <global_stdio_init.part.0+0x38>)
 801021c:	601a      	str	r2, [r3, #0]
 801021e:	4620      	mov	r0, r4
 8010220:	2200      	movs	r2, #0
 8010222:	2104      	movs	r1, #4
 8010224:	f7ff ff94 	bl	8010150 <std>
 8010228:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801022c:	2201      	movs	r2, #1
 801022e:	2109      	movs	r1, #9
 8010230:	f7ff ff8e 	bl	8010150 <std>
 8010234:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010238:	2202      	movs	r2, #2
 801023a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801023e:	2112      	movs	r1, #18
 8010240:	f7ff bf86 	b.w	8010150 <std>
 8010244:	2000227c 	.word	0x2000227c
 8010248:	20002144 	.word	0x20002144
 801024c:	080101bd 	.word	0x080101bd

08010250 <__sfp_lock_acquire>:
 8010250:	4801      	ldr	r0, [pc, #4]	@ (8010258 <__sfp_lock_acquire+0x8>)
 8010252:	f000 baa6 	b.w	80107a2 <__retarget_lock_acquire_recursive>
 8010256:	bf00      	nop
 8010258:	20002285 	.word	0x20002285

0801025c <__sfp_lock_release>:
 801025c:	4801      	ldr	r0, [pc, #4]	@ (8010264 <__sfp_lock_release+0x8>)
 801025e:	f000 baa1 	b.w	80107a4 <__retarget_lock_release_recursive>
 8010262:	bf00      	nop
 8010264:	20002285 	.word	0x20002285

08010268 <__sinit>:
 8010268:	b510      	push	{r4, lr}
 801026a:	4604      	mov	r4, r0
 801026c:	f7ff fff0 	bl	8010250 <__sfp_lock_acquire>
 8010270:	6a23      	ldr	r3, [r4, #32]
 8010272:	b11b      	cbz	r3, 801027c <__sinit+0x14>
 8010274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010278:	f7ff bff0 	b.w	801025c <__sfp_lock_release>
 801027c:	4b04      	ldr	r3, [pc, #16]	@ (8010290 <__sinit+0x28>)
 801027e:	6223      	str	r3, [r4, #32]
 8010280:	4b04      	ldr	r3, [pc, #16]	@ (8010294 <__sinit+0x2c>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d1f5      	bne.n	8010274 <__sinit+0xc>
 8010288:	f7ff ffc4 	bl	8010214 <global_stdio_init.part.0>
 801028c:	e7f2      	b.n	8010274 <__sinit+0xc>
 801028e:	bf00      	nop
 8010290:	080101d5 	.word	0x080101d5
 8010294:	2000227c 	.word	0x2000227c

08010298 <_fwalk_sglue>:
 8010298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801029c:	4607      	mov	r7, r0
 801029e:	4688      	mov	r8, r1
 80102a0:	4614      	mov	r4, r2
 80102a2:	2600      	movs	r6, #0
 80102a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80102a8:	f1b9 0901 	subs.w	r9, r9, #1
 80102ac:	d505      	bpl.n	80102ba <_fwalk_sglue+0x22>
 80102ae:	6824      	ldr	r4, [r4, #0]
 80102b0:	2c00      	cmp	r4, #0
 80102b2:	d1f7      	bne.n	80102a4 <_fwalk_sglue+0xc>
 80102b4:	4630      	mov	r0, r6
 80102b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102ba:	89ab      	ldrh	r3, [r5, #12]
 80102bc:	2b01      	cmp	r3, #1
 80102be:	d907      	bls.n	80102d0 <_fwalk_sglue+0x38>
 80102c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80102c4:	3301      	adds	r3, #1
 80102c6:	d003      	beq.n	80102d0 <_fwalk_sglue+0x38>
 80102c8:	4629      	mov	r1, r5
 80102ca:	4638      	mov	r0, r7
 80102cc:	47c0      	blx	r8
 80102ce:	4306      	orrs	r6, r0
 80102d0:	3568      	adds	r5, #104	@ 0x68
 80102d2:	e7e9      	b.n	80102a8 <_fwalk_sglue+0x10>

080102d4 <iprintf>:
 80102d4:	b40f      	push	{r0, r1, r2, r3}
 80102d6:	b507      	push	{r0, r1, r2, lr}
 80102d8:	4906      	ldr	r1, [pc, #24]	@ (80102f4 <iprintf+0x20>)
 80102da:	ab04      	add	r3, sp, #16
 80102dc:	6808      	ldr	r0, [r1, #0]
 80102de:	f853 2b04 	ldr.w	r2, [r3], #4
 80102e2:	6881      	ldr	r1, [r0, #8]
 80102e4:	9301      	str	r3, [sp, #4]
 80102e6:	f002 ff9b 	bl	8013220 <_vfiprintf_r>
 80102ea:	b003      	add	sp, #12
 80102ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80102f0:	b004      	add	sp, #16
 80102f2:	4770      	bx	lr
 80102f4:	2000017c 	.word	0x2000017c

080102f8 <_puts_r>:
 80102f8:	6a03      	ldr	r3, [r0, #32]
 80102fa:	b570      	push	{r4, r5, r6, lr}
 80102fc:	6884      	ldr	r4, [r0, #8]
 80102fe:	4605      	mov	r5, r0
 8010300:	460e      	mov	r6, r1
 8010302:	b90b      	cbnz	r3, 8010308 <_puts_r+0x10>
 8010304:	f7ff ffb0 	bl	8010268 <__sinit>
 8010308:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801030a:	07db      	lsls	r3, r3, #31
 801030c:	d405      	bmi.n	801031a <_puts_r+0x22>
 801030e:	89a3      	ldrh	r3, [r4, #12]
 8010310:	0598      	lsls	r0, r3, #22
 8010312:	d402      	bmi.n	801031a <_puts_r+0x22>
 8010314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010316:	f000 fa44 	bl	80107a2 <__retarget_lock_acquire_recursive>
 801031a:	89a3      	ldrh	r3, [r4, #12]
 801031c:	0719      	lsls	r1, r3, #28
 801031e:	d502      	bpl.n	8010326 <_puts_r+0x2e>
 8010320:	6923      	ldr	r3, [r4, #16]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d135      	bne.n	8010392 <_puts_r+0x9a>
 8010326:	4621      	mov	r1, r4
 8010328:	4628      	mov	r0, r5
 801032a:	f000 f945 	bl	80105b8 <__swsetup_r>
 801032e:	b380      	cbz	r0, 8010392 <_puts_r+0x9a>
 8010330:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8010334:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010336:	07da      	lsls	r2, r3, #31
 8010338:	d405      	bmi.n	8010346 <_puts_r+0x4e>
 801033a:	89a3      	ldrh	r3, [r4, #12]
 801033c:	059b      	lsls	r3, r3, #22
 801033e:	d402      	bmi.n	8010346 <_puts_r+0x4e>
 8010340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010342:	f000 fa2f 	bl	80107a4 <__retarget_lock_release_recursive>
 8010346:	4628      	mov	r0, r5
 8010348:	bd70      	pop	{r4, r5, r6, pc}
 801034a:	2b00      	cmp	r3, #0
 801034c:	da04      	bge.n	8010358 <_puts_r+0x60>
 801034e:	69a2      	ldr	r2, [r4, #24]
 8010350:	429a      	cmp	r2, r3
 8010352:	dc17      	bgt.n	8010384 <_puts_r+0x8c>
 8010354:	290a      	cmp	r1, #10
 8010356:	d015      	beq.n	8010384 <_puts_r+0x8c>
 8010358:	6823      	ldr	r3, [r4, #0]
 801035a:	1c5a      	adds	r2, r3, #1
 801035c:	6022      	str	r2, [r4, #0]
 801035e:	7019      	strb	r1, [r3, #0]
 8010360:	68a3      	ldr	r3, [r4, #8]
 8010362:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010366:	3b01      	subs	r3, #1
 8010368:	60a3      	str	r3, [r4, #8]
 801036a:	2900      	cmp	r1, #0
 801036c:	d1ed      	bne.n	801034a <_puts_r+0x52>
 801036e:	2b00      	cmp	r3, #0
 8010370:	da11      	bge.n	8010396 <_puts_r+0x9e>
 8010372:	4622      	mov	r2, r4
 8010374:	210a      	movs	r1, #10
 8010376:	4628      	mov	r0, r5
 8010378:	f000 f8df 	bl	801053a <__swbuf_r>
 801037c:	3001      	adds	r0, #1
 801037e:	d0d7      	beq.n	8010330 <_puts_r+0x38>
 8010380:	250a      	movs	r5, #10
 8010382:	e7d7      	b.n	8010334 <_puts_r+0x3c>
 8010384:	4622      	mov	r2, r4
 8010386:	4628      	mov	r0, r5
 8010388:	f000 f8d7 	bl	801053a <__swbuf_r>
 801038c:	3001      	adds	r0, #1
 801038e:	d1e7      	bne.n	8010360 <_puts_r+0x68>
 8010390:	e7ce      	b.n	8010330 <_puts_r+0x38>
 8010392:	3e01      	subs	r6, #1
 8010394:	e7e4      	b.n	8010360 <_puts_r+0x68>
 8010396:	6823      	ldr	r3, [r4, #0]
 8010398:	1c5a      	adds	r2, r3, #1
 801039a:	6022      	str	r2, [r4, #0]
 801039c:	220a      	movs	r2, #10
 801039e:	701a      	strb	r2, [r3, #0]
 80103a0:	e7ee      	b.n	8010380 <_puts_r+0x88>
	...

080103a4 <puts>:
 80103a4:	4b02      	ldr	r3, [pc, #8]	@ (80103b0 <puts+0xc>)
 80103a6:	4601      	mov	r1, r0
 80103a8:	6818      	ldr	r0, [r3, #0]
 80103aa:	f7ff bfa5 	b.w	80102f8 <_puts_r>
 80103ae:	bf00      	nop
 80103b0:	2000017c 	.word	0x2000017c

080103b4 <sniprintf>:
 80103b4:	b40c      	push	{r2, r3}
 80103b6:	b530      	push	{r4, r5, lr}
 80103b8:	4b17      	ldr	r3, [pc, #92]	@ (8010418 <sniprintf+0x64>)
 80103ba:	1e0c      	subs	r4, r1, #0
 80103bc:	681d      	ldr	r5, [r3, #0]
 80103be:	b09d      	sub	sp, #116	@ 0x74
 80103c0:	da08      	bge.n	80103d4 <sniprintf+0x20>
 80103c2:	238b      	movs	r3, #139	@ 0x8b
 80103c4:	602b      	str	r3, [r5, #0]
 80103c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80103ca:	b01d      	add	sp, #116	@ 0x74
 80103cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80103d0:	b002      	add	sp, #8
 80103d2:	4770      	bx	lr
 80103d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80103d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80103dc:	bf14      	ite	ne
 80103de:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80103e2:	4623      	moveq	r3, r4
 80103e4:	9304      	str	r3, [sp, #16]
 80103e6:	9307      	str	r3, [sp, #28]
 80103e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80103ec:	9002      	str	r0, [sp, #8]
 80103ee:	9006      	str	r0, [sp, #24]
 80103f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80103f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80103f6:	ab21      	add	r3, sp, #132	@ 0x84
 80103f8:	a902      	add	r1, sp, #8
 80103fa:	4628      	mov	r0, r5
 80103fc:	9301      	str	r3, [sp, #4]
 80103fe:	f002 fc1d 	bl	8012c3c <_svfiprintf_r>
 8010402:	1c43      	adds	r3, r0, #1
 8010404:	bfbc      	itt	lt
 8010406:	238b      	movlt	r3, #139	@ 0x8b
 8010408:	602b      	strlt	r3, [r5, #0]
 801040a:	2c00      	cmp	r4, #0
 801040c:	d0dd      	beq.n	80103ca <sniprintf+0x16>
 801040e:	9b02      	ldr	r3, [sp, #8]
 8010410:	2200      	movs	r2, #0
 8010412:	701a      	strb	r2, [r3, #0]
 8010414:	e7d9      	b.n	80103ca <sniprintf+0x16>
 8010416:	bf00      	nop
 8010418:	2000017c 	.word	0x2000017c

0801041c <siprintf>:
 801041c:	b40e      	push	{r1, r2, r3}
 801041e:	b500      	push	{lr}
 8010420:	b09c      	sub	sp, #112	@ 0x70
 8010422:	ab1d      	add	r3, sp, #116	@ 0x74
 8010424:	9002      	str	r0, [sp, #8]
 8010426:	9006      	str	r0, [sp, #24]
 8010428:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801042c:	4809      	ldr	r0, [pc, #36]	@ (8010454 <siprintf+0x38>)
 801042e:	9107      	str	r1, [sp, #28]
 8010430:	9104      	str	r1, [sp, #16]
 8010432:	4909      	ldr	r1, [pc, #36]	@ (8010458 <siprintf+0x3c>)
 8010434:	f853 2b04 	ldr.w	r2, [r3], #4
 8010438:	9105      	str	r1, [sp, #20]
 801043a:	6800      	ldr	r0, [r0, #0]
 801043c:	9301      	str	r3, [sp, #4]
 801043e:	a902      	add	r1, sp, #8
 8010440:	f002 fbfc 	bl	8012c3c <_svfiprintf_r>
 8010444:	9b02      	ldr	r3, [sp, #8]
 8010446:	2200      	movs	r2, #0
 8010448:	701a      	strb	r2, [r3, #0]
 801044a:	b01c      	add	sp, #112	@ 0x70
 801044c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010450:	b003      	add	sp, #12
 8010452:	4770      	bx	lr
 8010454:	2000017c 	.word	0x2000017c
 8010458:	ffff0208 	.word	0xffff0208

0801045c <siscanf>:
 801045c:	b40e      	push	{r1, r2, r3}
 801045e:	b530      	push	{r4, r5, lr}
 8010460:	b09c      	sub	sp, #112	@ 0x70
 8010462:	ac1f      	add	r4, sp, #124	@ 0x7c
 8010464:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8010468:	f854 5b04 	ldr.w	r5, [r4], #4
 801046c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010470:	9002      	str	r0, [sp, #8]
 8010472:	9006      	str	r0, [sp, #24]
 8010474:	f7ef ff34 	bl	80002e0 <strlen>
 8010478:	4b0b      	ldr	r3, [pc, #44]	@ (80104a8 <siscanf+0x4c>)
 801047a:	9003      	str	r0, [sp, #12]
 801047c:	9007      	str	r0, [sp, #28]
 801047e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010480:	480a      	ldr	r0, [pc, #40]	@ (80104ac <siscanf+0x50>)
 8010482:	9401      	str	r4, [sp, #4]
 8010484:	2300      	movs	r3, #0
 8010486:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010488:	9314      	str	r3, [sp, #80]	@ 0x50
 801048a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801048e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010492:	462a      	mov	r2, r5
 8010494:	4623      	mov	r3, r4
 8010496:	a902      	add	r1, sp, #8
 8010498:	6800      	ldr	r0, [r0, #0]
 801049a:	f002 fd23 	bl	8012ee4 <__ssvfiscanf_r>
 801049e:	b01c      	add	sp, #112	@ 0x70
 80104a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104a4:	b003      	add	sp, #12
 80104a6:	4770      	bx	lr
 80104a8:	080104d3 	.word	0x080104d3
 80104ac:	2000017c 	.word	0x2000017c

080104b0 <__sread>:
 80104b0:	b510      	push	{r4, lr}
 80104b2:	460c      	mov	r4, r1
 80104b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104b8:	f000 f914 	bl	80106e4 <_read_r>
 80104bc:	2800      	cmp	r0, #0
 80104be:	bfab      	itete	ge
 80104c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80104c2:	89a3      	ldrhlt	r3, [r4, #12]
 80104c4:	181b      	addge	r3, r3, r0
 80104c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80104ca:	bfac      	ite	ge
 80104cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80104ce:	81a3      	strhlt	r3, [r4, #12]
 80104d0:	bd10      	pop	{r4, pc}

080104d2 <__seofread>:
 80104d2:	2000      	movs	r0, #0
 80104d4:	4770      	bx	lr

080104d6 <__swrite>:
 80104d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104da:	461f      	mov	r7, r3
 80104dc:	898b      	ldrh	r3, [r1, #12]
 80104de:	05db      	lsls	r3, r3, #23
 80104e0:	4605      	mov	r5, r0
 80104e2:	460c      	mov	r4, r1
 80104e4:	4616      	mov	r6, r2
 80104e6:	d505      	bpl.n	80104f4 <__swrite+0x1e>
 80104e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104ec:	2302      	movs	r3, #2
 80104ee:	2200      	movs	r2, #0
 80104f0:	f000 f8e6 	bl	80106c0 <_lseek_r>
 80104f4:	89a3      	ldrh	r3, [r4, #12]
 80104f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80104fe:	81a3      	strh	r3, [r4, #12]
 8010500:	4632      	mov	r2, r6
 8010502:	463b      	mov	r3, r7
 8010504:	4628      	mov	r0, r5
 8010506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801050a:	f000 b90d 	b.w	8010728 <_write_r>

0801050e <__sseek>:
 801050e:	b510      	push	{r4, lr}
 8010510:	460c      	mov	r4, r1
 8010512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010516:	f000 f8d3 	bl	80106c0 <_lseek_r>
 801051a:	1c43      	adds	r3, r0, #1
 801051c:	89a3      	ldrh	r3, [r4, #12]
 801051e:	bf15      	itete	ne
 8010520:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010522:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010526:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801052a:	81a3      	strheq	r3, [r4, #12]
 801052c:	bf18      	it	ne
 801052e:	81a3      	strhne	r3, [r4, #12]
 8010530:	bd10      	pop	{r4, pc}

08010532 <__sclose>:
 8010532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010536:	f000 b8b3 	b.w	80106a0 <_close_r>

0801053a <__swbuf_r>:
 801053a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801053c:	460e      	mov	r6, r1
 801053e:	4614      	mov	r4, r2
 8010540:	4605      	mov	r5, r0
 8010542:	b118      	cbz	r0, 801054c <__swbuf_r+0x12>
 8010544:	6a03      	ldr	r3, [r0, #32]
 8010546:	b90b      	cbnz	r3, 801054c <__swbuf_r+0x12>
 8010548:	f7ff fe8e 	bl	8010268 <__sinit>
 801054c:	69a3      	ldr	r3, [r4, #24]
 801054e:	60a3      	str	r3, [r4, #8]
 8010550:	89a3      	ldrh	r3, [r4, #12]
 8010552:	071a      	lsls	r2, r3, #28
 8010554:	d501      	bpl.n	801055a <__swbuf_r+0x20>
 8010556:	6923      	ldr	r3, [r4, #16]
 8010558:	b943      	cbnz	r3, 801056c <__swbuf_r+0x32>
 801055a:	4621      	mov	r1, r4
 801055c:	4628      	mov	r0, r5
 801055e:	f000 f82b 	bl	80105b8 <__swsetup_r>
 8010562:	b118      	cbz	r0, 801056c <__swbuf_r+0x32>
 8010564:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010568:	4638      	mov	r0, r7
 801056a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801056c:	6823      	ldr	r3, [r4, #0]
 801056e:	6922      	ldr	r2, [r4, #16]
 8010570:	1a98      	subs	r0, r3, r2
 8010572:	6963      	ldr	r3, [r4, #20]
 8010574:	b2f6      	uxtb	r6, r6
 8010576:	4283      	cmp	r3, r0
 8010578:	4637      	mov	r7, r6
 801057a:	dc05      	bgt.n	8010588 <__swbuf_r+0x4e>
 801057c:	4621      	mov	r1, r4
 801057e:	4628      	mov	r0, r5
 8010580:	f003 f938 	bl	80137f4 <_fflush_r>
 8010584:	2800      	cmp	r0, #0
 8010586:	d1ed      	bne.n	8010564 <__swbuf_r+0x2a>
 8010588:	68a3      	ldr	r3, [r4, #8]
 801058a:	3b01      	subs	r3, #1
 801058c:	60a3      	str	r3, [r4, #8]
 801058e:	6823      	ldr	r3, [r4, #0]
 8010590:	1c5a      	adds	r2, r3, #1
 8010592:	6022      	str	r2, [r4, #0]
 8010594:	701e      	strb	r6, [r3, #0]
 8010596:	6962      	ldr	r2, [r4, #20]
 8010598:	1c43      	adds	r3, r0, #1
 801059a:	429a      	cmp	r2, r3
 801059c:	d004      	beq.n	80105a8 <__swbuf_r+0x6e>
 801059e:	89a3      	ldrh	r3, [r4, #12]
 80105a0:	07db      	lsls	r3, r3, #31
 80105a2:	d5e1      	bpl.n	8010568 <__swbuf_r+0x2e>
 80105a4:	2e0a      	cmp	r6, #10
 80105a6:	d1df      	bne.n	8010568 <__swbuf_r+0x2e>
 80105a8:	4621      	mov	r1, r4
 80105aa:	4628      	mov	r0, r5
 80105ac:	f003 f922 	bl	80137f4 <_fflush_r>
 80105b0:	2800      	cmp	r0, #0
 80105b2:	d0d9      	beq.n	8010568 <__swbuf_r+0x2e>
 80105b4:	e7d6      	b.n	8010564 <__swbuf_r+0x2a>
	...

080105b8 <__swsetup_r>:
 80105b8:	b538      	push	{r3, r4, r5, lr}
 80105ba:	4b29      	ldr	r3, [pc, #164]	@ (8010660 <__swsetup_r+0xa8>)
 80105bc:	4605      	mov	r5, r0
 80105be:	6818      	ldr	r0, [r3, #0]
 80105c0:	460c      	mov	r4, r1
 80105c2:	b118      	cbz	r0, 80105cc <__swsetup_r+0x14>
 80105c4:	6a03      	ldr	r3, [r0, #32]
 80105c6:	b90b      	cbnz	r3, 80105cc <__swsetup_r+0x14>
 80105c8:	f7ff fe4e 	bl	8010268 <__sinit>
 80105cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105d0:	0719      	lsls	r1, r3, #28
 80105d2:	d422      	bmi.n	801061a <__swsetup_r+0x62>
 80105d4:	06da      	lsls	r2, r3, #27
 80105d6:	d407      	bmi.n	80105e8 <__swsetup_r+0x30>
 80105d8:	2209      	movs	r2, #9
 80105da:	602a      	str	r2, [r5, #0]
 80105dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105e0:	81a3      	strh	r3, [r4, #12]
 80105e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80105e6:	e033      	b.n	8010650 <__swsetup_r+0x98>
 80105e8:	0758      	lsls	r0, r3, #29
 80105ea:	d512      	bpl.n	8010612 <__swsetup_r+0x5a>
 80105ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80105ee:	b141      	cbz	r1, 8010602 <__swsetup_r+0x4a>
 80105f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80105f4:	4299      	cmp	r1, r3
 80105f6:	d002      	beq.n	80105fe <__swsetup_r+0x46>
 80105f8:	4628      	mov	r0, r5
 80105fa:	f000 ff41 	bl	8011480 <_free_r>
 80105fe:	2300      	movs	r3, #0
 8010600:	6363      	str	r3, [r4, #52]	@ 0x34
 8010602:	89a3      	ldrh	r3, [r4, #12]
 8010604:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010608:	81a3      	strh	r3, [r4, #12]
 801060a:	2300      	movs	r3, #0
 801060c:	6063      	str	r3, [r4, #4]
 801060e:	6923      	ldr	r3, [r4, #16]
 8010610:	6023      	str	r3, [r4, #0]
 8010612:	89a3      	ldrh	r3, [r4, #12]
 8010614:	f043 0308 	orr.w	r3, r3, #8
 8010618:	81a3      	strh	r3, [r4, #12]
 801061a:	6923      	ldr	r3, [r4, #16]
 801061c:	b94b      	cbnz	r3, 8010632 <__swsetup_r+0x7a>
 801061e:	89a3      	ldrh	r3, [r4, #12]
 8010620:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010628:	d003      	beq.n	8010632 <__swsetup_r+0x7a>
 801062a:	4621      	mov	r1, r4
 801062c:	4628      	mov	r0, r5
 801062e:	f003 f92f 	bl	8013890 <__smakebuf_r>
 8010632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010636:	f013 0201 	ands.w	r2, r3, #1
 801063a:	d00a      	beq.n	8010652 <__swsetup_r+0x9a>
 801063c:	2200      	movs	r2, #0
 801063e:	60a2      	str	r2, [r4, #8]
 8010640:	6962      	ldr	r2, [r4, #20]
 8010642:	4252      	negs	r2, r2
 8010644:	61a2      	str	r2, [r4, #24]
 8010646:	6922      	ldr	r2, [r4, #16]
 8010648:	b942      	cbnz	r2, 801065c <__swsetup_r+0xa4>
 801064a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801064e:	d1c5      	bne.n	80105dc <__swsetup_r+0x24>
 8010650:	bd38      	pop	{r3, r4, r5, pc}
 8010652:	0799      	lsls	r1, r3, #30
 8010654:	bf58      	it	pl
 8010656:	6962      	ldrpl	r2, [r4, #20]
 8010658:	60a2      	str	r2, [r4, #8]
 801065a:	e7f4      	b.n	8010646 <__swsetup_r+0x8e>
 801065c:	2000      	movs	r0, #0
 801065e:	e7f7      	b.n	8010650 <__swsetup_r+0x98>
 8010660:	2000017c 	.word	0x2000017c

08010664 <memset>:
 8010664:	4402      	add	r2, r0
 8010666:	4603      	mov	r3, r0
 8010668:	4293      	cmp	r3, r2
 801066a:	d100      	bne.n	801066e <memset+0xa>
 801066c:	4770      	bx	lr
 801066e:	f803 1b01 	strb.w	r1, [r3], #1
 8010672:	e7f9      	b.n	8010668 <memset+0x4>

08010674 <strncmp>:
 8010674:	b510      	push	{r4, lr}
 8010676:	b16a      	cbz	r2, 8010694 <strncmp+0x20>
 8010678:	3901      	subs	r1, #1
 801067a:	1884      	adds	r4, r0, r2
 801067c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010680:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010684:	429a      	cmp	r2, r3
 8010686:	d103      	bne.n	8010690 <strncmp+0x1c>
 8010688:	42a0      	cmp	r0, r4
 801068a:	d001      	beq.n	8010690 <strncmp+0x1c>
 801068c:	2a00      	cmp	r2, #0
 801068e:	d1f5      	bne.n	801067c <strncmp+0x8>
 8010690:	1ad0      	subs	r0, r2, r3
 8010692:	bd10      	pop	{r4, pc}
 8010694:	4610      	mov	r0, r2
 8010696:	e7fc      	b.n	8010692 <strncmp+0x1e>

08010698 <_localeconv_r>:
 8010698:	4800      	ldr	r0, [pc, #0]	@ (801069c <_localeconv_r+0x4>)
 801069a:	4770      	bx	lr
 801069c:	200002bc 	.word	0x200002bc

080106a0 <_close_r>:
 80106a0:	b538      	push	{r3, r4, r5, lr}
 80106a2:	4d06      	ldr	r5, [pc, #24]	@ (80106bc <_close_r+0x1c>)
 80106a4:	2300      	movs	r3, #0
 80106a6:	4604      	mov	r4, r0
 80106a8:	4608      	mov	r0, r1
 80106aa:	602b      	str	r3, [r5, #0]
 80106ac:	f7f3 fd6e 	bl	800418c <_close>
 80106b0:	1c43      	adds	r3, r0, #1
 80106b2:	d102      	bne.n	80106ba <_close_r+0x1a>
 80106b4:	682b      	ldr	r3, [r5, #0]
 80106b6:	b103      	cbz	r3, 80106ba <_close_r+0x1a>
 80106b8:	6023      	str	r3, [r4, #0]
 80106ba:	bd38      	pop	{r3, r4, r5, pc}
 80106bc:	20002280 	.word	0x20002280

080106c0 <_lseek_r>:
 80106c0:	b538      	push	{r3, r4, r5, lr}
 80106c2:	4d07      	ldr	r5, [pc, #28]	@ (80106e0 <_lseek_r+0x20>)
 80106c4:	4604      	mov	r4, r0
 80106c6:	4608      	mov	r0, r1
 80106c8:	4611      	mov	r1, r2
 80106ca:	2200      	movs	r2, #0
 80106cc:	602a      	str	r2, [r5, #0]
 80106ce:	461a      	mov	r2, r3
 80106d0:	f7f3 fd83 	bl	80041da <_lseek>
 80106d4:	1c43      	adds	r3, r0, #1
 80106d6:	d102      	bne.n	80106de <_lseek_r+0x1e>
 80106d8:	682b      	ldr	r3, [r5, #0]
 80106da:	b103      	cbz	r3, 80106de <_lseek_r+0x1e>
 80106dc:	6023      	str	r3, [r4, #0]
 80106de:	bd38      	pop	{r3, r4, r5, pc}
 80106e0:	20002280 	.word	0x20002280

080106e4 <_read_r>:
 80106e4:	b538      	push	{r3, r4, r5, lr}
 80106e6:	4d07      	ldr	r5, [pc, #28]	@ (8010704 <_read_r+0x20>)
 80106e8:	4604      	mov	r4, r0
 80106ea:	4608      	mov	r0, r1
 80106ec:	4611      	mov	r1, r2
 80106ee:	2200      	movs	r2, #0
 80106f0:	602a      	str	r2, [r5, #0]
 80106f2:	461a      	mov	r2, r3
 80106f4:	f7f3 fd2d 	bl	8004152 <_read>
 80106f8:	1c43      	adds	r3, r0, #1
 80106fa:	d102      	bne.n	8010702 <_read_r+0x1e>
 80106fc:	682b      	ldr	r3, [r5, #0]
 80106fe:	b103      	cbz	r3, 8010702 <_read_r+0x1e>
 8010700:	6023      	str	r3, [r4, #0]
 8010702:	bd38      	pop	{r3, r4, r5, pc}
 8010704:	20002280 	.word	0x20002280

08010708 <_sbrk_r>:
 8010708:	b538      	push	{r3, r4, r5, lr}
 801070a:	4d06      	ldr	r5, [pc, #24]	@ (8010724 <_sbrk_r+0x1c>)
 801070c:	2300      	movs	r3, #0
 801070e:	4604      	mov	r4, r0
 8010710:	4608      	mov	r0, r1
 8010712:	602b      	str	r3, [r5, #0]
 8010714:	f7f3 fd6e 	bl	80041f4 <_sbrk>
 8010718:	1c43      	adds	r3, r0, #1
 801071a:	d102      	bne.n	8010722 <_sbrk_r+0x1a>
 801071c:	682b      	ldr	r3, [r5, #0]
 801071e:	b103      	cbz	r3, 8010722 <_sbrk_r+0x1a>
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	bd38      	pop	{r3, r4, r5, pc}
 8010724:	20002280 	.word	0x20002280

08010728 <_write_r>:
 8010728:	b538      	push	{r3, r4, r5, lr}
 801072a:	4d07      	ldr	r5, [pc, #28]	@ (8010748 <_write_r+0x20>)
 801072c:	4604      	mov	r4, r0
 801072e:	4608      	mov	r0, r1
 8010730:	4611      	mov	r1, r2
 8010732:	2200      	movs	r2, #0
 8010734:	602a      	str	r2, [r5, #0]
 8010736:	461a      	mov	r2, r3
 8010738:	f7f1 fbec 	bl	8001f14 <_write>
 801073c:	1c43      	adds	r3, r0, #1
 801073e:	d102      	bne.n	8010746 <_write_r+0x1e>
 8010740:	682b      	ldr	r3, [r5, #0]
 8010742:	b103      	cbz	r3, 8010746 <_write_r+0x1e>
 8010744:	6023      	str	r3, [r4, #0]
 8010746:	bd38      	pop	{r3, r4, r5, pc}
 8010748:	20002280 	.word	0x20002280

0801074c <__errno>:
 801074c:	4b01      	ldr	r3, [pc, #4]	@ (8010754 <__errno+0x8>)
 801074e:	6818      	ldr	r0, [r3, #0]
 8010750:	4770      	bx	lr
 8010752:	bf00      	nop
 8010754:	2000017c 	.word	0x2000017c

08010758 <__libc_init_array>:
 8010758:	b570      	push	{r4, r5, r6, lr}
 801075a:	4d0d      	ldr	r5, [pc, #52]	@ (8010790 <__libc_init_array+0x38>)
 801075c:	4c0d      	ldr	r4, [pc, #52]	@ (8010794 <__libc_init_array+0x3c>)
 801075e:	1b64      	subs	r4, r4, r5
 8010760:	10a4      	asrs	r4, r4, #2
 8010762:	2600      	movs	r6, #0
 8010764:	42a6      	cmp	r6, r4
 8010766:	d109      	bne.n	801077c <__libc_init_array+0x24>
 8010768:	4d0b      	ldr	r5, [pc, #44]	@ (8010798 <__libc_init_array+0x40>)
 801076a:	4c0c      	ldr	r4, [pc, #48]	@ (801079c <__libc_init_array+0x44>)
 801076c:	f004 fe4c 	bl	8015408 <_init>
 8010770:	1b64      	subs	r4, r4, r5
 8010772:	10a4      	asrs	r4, r4, #2
 8010774:	2600      	movs	r6, #0
 8010776:	42a6      	cmp	r6, r4
 8010778:	d105      	bne.n	8010786 <__libc_init_array+0x2e>
 801077a:	bd70      	pop	{r4, r5, r6, pc}
 801077c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010780:	4798      	blx	r3
 8010782:	3601      	adds	r6, #1
 8010784:	e7ee      	b.n	8010764 <__libc_init_array+0xc>
 8010786:	f855 3b04 	ldr.w	r3, [r5], #4
 801078a:	4798      	blx	r3
 801078c:	3601      	adds	r6, #1
 801078e:	e7f2      	b.n	8010776 <__libc_init_array+0x1e>
 8010790:	08016134 	.word	0x08016134
 8010794:	08016134 	.word	0x08016134
 8010798:	08016134 	.word	0x08016134
 801079c:	08016138 	.word	0x08016138

080107a0 <__retarget_lock_init_recursive>:
 80107a0:	4770      	bx	lr

080107a2 <__retarget_lock_acquire_recursive>:
 80107a2:	4770      	bx	lr

080107a4 <__retarget_lock_release_recursive>:
 80107a4:	4770      	bx	lr

080107a6 <memcpy>:
 80107a6:	440a      	add	r2, r1
 80107a8:	4291      	cmp	r1, r2
 80107aa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80107ae:	d100      	bne.n	80107b2 <memcpy+0xc>
 80107b0:	4770      	bx	lr
 80107b2:	b510      	push	{r4, lr}
 80107b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80107bc:	4291      	cmp	r1, r2
 80107be:	d1f9      	bne.n	80107b4 <memcpy+0xe>
 80107c0:	bd10      	pop	{r4, pc}
	...

080107c4 <nanf>:
 80107c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80107cc <nanf+0x8>
 80107c8:	4770      	bx	lr
 80107ca:	bf00      	nop
 80107cc:	7fc00000 	.word	0x7fc00000

080107d0 <copysignf>:
 80107d0:	ee10 3a10 	vmov	r3, s0
 80107d4:	ee10 2a90 	vmov	r2, s1
 80107d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80107dc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80107e0:	4313      	orrs	r3, r2
 80107e2:	ee00 3a10 	vmov	s0, r3
 80107e6:	4770      	bx	lr

080107e8 <quorem>:
 80107e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ec:	6903      	ldr	r3, [r0, #16]
 80107ee:	690c      	ldr	r4, [r1, #16]
 80107f0:	42a3      	cmp	r3, r4
 80107f2:	4607      	mov	r7, r0
 80107f4:	db7e      	blt.n	80108f4 <quorem+0x10c>
 80107f6:	3c01      	subs	r4, #1
 80107f8:	f101 0814 	add.w	r8, r1, #20
 80107fc:	00a3      	lsls	r3, r4, #2
 80107fe:	f100 0514 	add.w	r5, r0, #20
 8010802:	9300      	str	r3, [sp, #0]
 8010804:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010808:	9301      	str	r3, [sp, #4]
 801080a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801080e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010812:	3301      	adds	r3, #1
 8010814:	429a      	cmp	r2, r3
 8010816:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801081a:	fbb2 f6f3 	udiv	r6, r2, r3
 801081e:	d32e      	bcc.n	801087e <quorem+0x96>
 8010820:	f04f 0a00 	mov.w	sl, #0
 8010824:	46c4      	mov	ip, r8
 8010826:	46ae      	mov	lr, r5
 8010828:	46d3      	mov	fp, sl
 801082a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801082e:	b298      	uxth	r0, r3
 8010830:	fb06 a000 	mla	r0, r6, r0, sl
 8010834:	0c02      	lsrs	r2, r0, #16
 8010836:	0c1b      	lsrs	r3, r3, #16
 8010838:	fb06 2303 	mla	r3, r6, r3, r2
 801083c:	f8de 2000 	ldr.w	r2, [lr]
 8010840:	b280      	uxth	r0, r0
 8010842:	b292      	uxth	r2, r2
 8010844:	1a12      	subs	r2, r2, r0
 8010846:	445a      	add	r2, fp
 8010848:	f8de 0000 	ldr.w	r0, [lr]
 801084c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010850:	b29b      	uxth	r3, r3
 8010852:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010856:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801085a:	b292      	uxth	r2, r2
 801085c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010860:	45e1      	cmp	r9, ip
 8010862:	f84e 2b04 	str.w	r2, [lr], #4
 8010866:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801086a:	d2de      	bcs.n	801082a <quorem+0x42>
 801086c:	9b00      	ldr	r3, [sp, #0]
 801086e:	58eb      	ldr	r3, [r5, r3]
 8010870:	b92b      	cbnz	r3, 801087e <quorem+0x96>
 8010872:	9b01      	ldr	r3, [sp, #4]
 8010874:	3b04      	subs	r3, #4
 8010876:	429d      	cmp	r5, r3
 8010878:	461a      	mov	r2, r3
 801087a:	d32f      	bcc.n	80108dc <quorem+0xf4>
 801087c:	613c      	str	r4, [r7, #16]
 801087e:	4638      	mov	r0, r7
 8010880:	f001 f90c 	bl	8011a9c <__mcmp>
 8010884:	2800      	cmp	r0, #0
 8010886:	db25      	blt.n	80108d4 <quorem+0xec>
 8010888:	4629      	mov	r1, r5
 801088a:	2000      	movs	r0, #0
 801088c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010890:	f8d1 c000 	ldr.w	ip, [r1]
 8010894:	fa1f fe82 	uxth.w	lr, r2
 8010898:	fa1f f38c 	uxth.w	r3, ip
 801089c:	eba3 030e 	sub.w	r3, r3, lr
 80108a0:	4403      	add	r3, r0
 80108a2:	0c12      	lsrs	r2, r2, #16
 80108a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80108a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108b2:	45c1      	cmp	r9, r8
 80108b4:	f841 3b04 	str.w	r3, [r1], #4
 80108b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80108bc:	d2e6      	bcs.n	801088c <quorem+0xa4>
 80108be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80108c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80108c6:	b922      	cbnz	r2, 80108d2 <quorem+0xea>
 80108c8:	3b04      	subs	r3, #4
 80108ca:	429d      	cmp	r5, r3
 80108cc:	461a      	mov	r2, r3
 80108ce:	d30b      	bcc.n	80108e8 <quorem+0x100>
 80108d0:	613c      	str	r4, [r7, #16]
 80108d2:	3601      	adds	r6, #1
 80108d4:	4630      	mov	r0, r6
 80108d6:	b003      	add	sp, #12
 80108d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108dc:	6812      	ldr	r2, [r2, #0]
 80108de:	3b04      	subs	r3, #4
 80108e0:	2a00      	cmp	r2, #0
 80108e2:	d1cb      	bne.n	801087c <quorem+0x94>
 80108e4:	3c01      	subs	r4, #1
 80108e6:	e7c6      	b.n	8010876 <quorem+0x8e>
 80108e8:	6812      	ldr	r2, [r2, #0]
 80108ea:	3b04      	subs	r3, #4
 80108ec:	2a00      	cmp	r2, #0
 80108ee:	d1ef      	bne.n	80108d0 <quorem+0xe8>
 80108f0:	3c01      	subs	r4, #1
 80108f2:	e7ea      	b.n	80108ca <quorem+0xe2>
 80108f4:	2000      	movs	r0, #0
 80108f6:	e7ee      	b.n	80108d6 <quorem+0xee>

080108f8 <_dtoa_r>:
 80108f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108fc:	69c7      	ldr	r7, [r0, #28]
 80108fe:	b099      	sub	sp, #100	@ 0x64
 8010900:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010904:	ec55 4b10 	vmov	r4, r5, d0
 8010908:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801090a:	9109      	str	r1, [sp, #36]	@ 0x24
 801090c:	4683      	mov	fp, r0
 801090e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010910:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010912:	b97f      	cbnz	r7, 8010934 <_dtoa_r+0x3c>
 8010914:	2010      	movs	r0, #16
 8010916:	f7fe fcf1 	bl	800f2fc <malloc>
 801091a:	4602      	mov	r2, r0
 801091c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010920:	b920      	cbnz	r0, 801092c <_dtoa_r+0x34>
 8010922:	4ba7      	ldr	r3, [pc, #668]	@ (8010bc0 <_dtoa_r+0x2c8>)
 8010924:	21ef      	movs	r1, #239	@ 0xef
 8010926:	48a7      	ldr	r0, [pc, #668]	@ (8010bc4 <_dtoa_r+0x2cc>)
 8010928:	f003 f8a6 	bl	8013a78 <__assert_func>
 801092c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010930:	6007      	str	r7, [r0, #0]
 8010932:	60c7      	str	r7, [r0, #12]
 8010934:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010938:	6819      	ldr	r1, [r3, #0]
 801093a:	b159      	cbz	r1, 8010954 <_dtoa_r+0x5c>
 801093c:	685a      	ldr	r2, [r3, #4]
 801093e:	604a      	str	r2, [r1, #4]
 8010940:	2301      	movs	r3, #1
 8010942:	4093      	lsls	r3, r2
 8010944:	608b      	str	r3, [r1, #8]
 8010946:	4658      	mov	r0, fp
 8010948:	f000 fe24 	bl	8011594 <_Bfree>
 801094c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010950:	2200      	movs	r2, #0
 8010952:	601a      	str	r2, [r3, #0]
 8010954:	1e2b      	subs	r3, r5, #0
 8010956:	bfb9      	ittee	lt
 8010958:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801095c:	9303      	strlt	r3, [sp, #12]
 801095e:	2300      	movge	r3, #0
 8010960:	6033      	strge	r3, [r6, #0]
 8010962:	9f03      	ldr	r7, [sp, #12]
 8010964:	4b98      	ldr	r3, [pc, #608]	@ (8010bc8 <_dtoa_r+0x2d0>)
 8010966:	bfbc      	itt	lt
 8010968:	2201      	movlt	r2, #1
 801096a:	6032      	strlt	r2, [r6, #0]
 801096c:	43bb      	bics	r3, r7
 801096e:	d112      	bne.n	8010996 <_dtoa_r+0x9e>
 8010970:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010972:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010976:	6013      	str	r3, [r2, #0]
 8010978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801097c:	4323      	orrs	r3, r4
 801097e:	f000 854d 	beq.w	801141c <_dtoa_r+0xb24>
 8010982:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010984:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010bdc <_dtoa_r+0x2e4>
 8010988:	2b00      	cmp	r3, #0
 801098a:	f000 854f 	beq.w	801142c <_dtoa_r+0xb34>
 801098e:	f10a 0303 	add.w	r3, sl, #3
 8010992:	f000 bd49 	b.w	8011428 <_dtoa_r+0xb30>
 8010996:	ed9d 7b02 	vldr	d7, [sp, #8]
 801099a:	2200      	movs	r2, #0
 801099c:	ec51 0b17 	vmov	r0, r1, d7
 80109a0:	2300      	movs	r3, #0
 80109a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80109a6:	f7f0 f8c7 	bl	8000b38 <__aeabi_dcmpeq>
 80109aa:	4680      	mov	r8, r0
 80109ac:	b158      	cbz	r0, 80109c6 <_dtoa_r+0xce>
 80109ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80109b0:	2301      	movs	r3, #1
 80109b2:	6013      	str	r3, [r2, #0]
 80109b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80109b6:	b113      	cbz	r3, 80109be <_dtoa_r+0xc6>
 80109b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80109ba:	4b84      	ldr	r3, [pc, #528]	@ (8010bcc <_dtoa_r+0x2d4>)
 80109bc:	6013      	str	r3, [r2, #0]
 80109be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010be0 <_dtoa_r+0x2e8>
 80109c2:	f000 bd33 	b.w	801142c <_dtoa_r+0xb34>
 80109c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80109ca:	aa16      	add	r2, sp, #88	@ 0x58
 80109cc:	a917      	add	r1, sp, #92	@ 0x5c
 80109ce:	4658      	mov	r0, fp
 80109d0:	f001 f984 	bl	8011cdc <__d2b>
 80109d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80109d8:	4681      	mov	r9, r0
 80109da:	2e00      	cmp	r6, #0
 80109dc:	d077      	beq.n	8010ace <_dtoa_r+0x1d6>
 80109de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80109e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80109e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80109ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80109f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80109f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80109f8:	4619      	mov	r1, r3
 80109fa:	2200      	movs	r2, #0
 80109fc:	4b74      	ldr	r3, [pc, #464]	@ (8010bd0 <_dtoa_r+0x2d8>)
 80109fe:	f7ef fc7b 	bl	80002f8 <__aeabi_dsub>
 8010a02:	a369      	add	r3, pc, #420	@ (adr r3, 8010ba8 <_dtoa_r+0x2b0>)
 8010a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a08:	f7ef fe2e 	bl	8000668 <__aeabi_dmul>
 8010a0c:	a368      	add	r3, pc, #416	@ (adr r3, 8010bb0 <_dtoa_r+0x2b8>)
 8010a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a12:	f7ef fc73 	bl	80002fc <__adddf3>
 8010a16:	4604      	mov	r4, r0
 8010a18:	4630      	mov	r0, r6
 8010a1a:	460d      	mov	r5, r1
 8010a1c:	f7ef fdba 	bl	8000594 <__aeabi_i2d>
 8010a20:	a365      	add	r3, pc, #404	@ (adr r3, 8010bb8 <_dtoa_r+0x2c0>)
 8010a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a26:	f7ef fe1f 	bl	8000668 <__aeabi_dmul>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	4620      	mov	r0, r4
 8010a30:	4629      	mov	r1, r5
 8010a32:	f7ef fc63 	bl	80002fc <__adddf3>
 8010a36:	4604      	mov	r4, r0
 8010a38:	460d      	mov	r5, r1
 8010a3a:	f7f0 f8c5 	bl	8000bc8 <__aeabi_d2iz>
 8010a3e:	2200      	movs	r2, #0
 8010a40:	4607      	mov	r7, r0
 8010a42:	2300      	movs	r3, #0
 8010a44:	4620      	mov	r0, r4
 8010a46:	4629      	mov	r1, r5
 8010a48:	f7f0 f880 	bl	8000b4c <__aeabi_dcmplt>
 8010a4c:	b140      	cbz	r0, 8010a60 <_dtoa_r+0x168>
 8010a4e:	4638      	mov	r0, r7
 8010a50:	f7ef fda0 	bl	8000594 <__aeabi_i2d>
 8010a54:	4622      	mov	r2, r4
 8010a56:	462b      	mov	r3, r5
 8010a58:	f7f0 f86e 	bl	8000b38 <__aeabi_dcmpeq>
 8010a5c:	b900      	cbnz	r0, 8010a60 <_dtoa_r+0x168>
 8010a5e:	3f01      	subs	r7, #1
 8010a60:	2f16      	cmp	r7, #22
 8010a62:	d851      	bhi.n	8010b08 <_dtoa_r+0x210>
 8010a64:	4b5b      	ldr	r3, [pc, #364]	@ (8010bd4 <_dtoa_r+0x2dc>)
 8010a66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010a72:	f7f0 f86b 	bl	8000b4c <__aeabi_dcmplt>
 8010a76:	2800      	cmp	r0, #0
 8010a78:	d048      	beq.n	8010b0c <_dtoa_r+0x214>
 8010a7a:	3f01      	subs	r7, #1
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010a80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010a82:	1b9b      	subs	r3, r3, r6
 8010a84:	1e5a      	subs	r2, r3, #1
 8010a86:	bf44      	itt	mi
 8010a88:	f1c3 0801 	rsbmi	r8, r3, #1
 8010a8c:	2300      	movmi	r3, #0
 8010a8e:	9208      	str	r2, [sp, #32]
 8010a90:	bf54      	ite	pl
 8010a92:	f04f 0800 	movpl.w	r8, #0
 8010a96:	9308      	strmi	r3, [sp, #32]
 8010a98:	2f00      	cmp	r7, #0
 8010a9a:	db39      	blt.n	8010b10 <_dtoa_r+0x218>
 8010a9c:	9b08      	ldr	r3, [sp, #32]
 8010a9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010aa0:	443b      	add	r3, r7
 8010aa2:	9308      	str	r3, [sp, #32]
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aaa:	2b09      	cmp	r3, #9
 8010aac:	d864      	bhi.n	8010b78 <_dtoa_r+0x280>
 8010aae:	2b05      	cmp	r3, #5
 8010ab0:	bfc4      	itt	gt
 8010ab2:	3b04      	subgt	r3, #4
 8010ab4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ab8:	f1a3 0302 	sub.w	r3, r3, #2
 8010abc:	bfcc      	ite	gt
 8010abe:	2400      	movgt	r4, #0
 8010ac0:	2401      	movle	r4, #1
 8010ac2:	2b03      	cmp	r3, #3
 8010ac4:	d863      	bhi.n	8010b8e <_dtoa_r+0x296>
 8010ac6:	e8df f003 	tbb	[pc, r3]
 8010aca:	372a      	.short	0x372a
 8010acc:	5535      	.short	0x5535
 8010ace:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010ad2:	441e      	add	r6, r3
 8010ad4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010ad8:	2b20      	cmp	r3, #32
 8010ada:	bfc1      	itttt	gt
 8010adc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010ae0:	409f      	lslgt	r7, r3
 8010ae2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010ae6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010aea:	bfd6      	itet	le
 8010aec:	f1c3 0320 	rsble	r3, r3, #32
 8010af0:	ea47 0003 	orrgt.w	r0, r7, r3
 8010af4:	fa04 f003 	lslle.w	r0, r4, r3
 8010af8:	f7ef fd3c 	bl	8000574 <__aeabi_ui2d>
 8010afc:	2201      	movs	r2, #1
 8010afe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010b02:	3e01      	subs	r6, #1
 8010b04:	9214      	str	r2, [sp, #80]	@ 0x50
 8010b06:	e777      	b.n	80109f8 <_dtoa_r+0x100>
 8010b08:	2301      	movs	r3, #1
 8010b0a:	e7b8      	b.n	8010a7e <_dtoa_r+0x186>
 8010b0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8010b0e:	e7b7      	b.n	8010a80 <_dtoa_r+0x188>
 8010b10:	427b      	negs	r3, r7
 8010b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b14:	2300      	movs	r3, #0
 8010b16:	eba8 0807 	sub.w	r8, r8, r7
 8010b1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b1c:	e7c4      	b.n	8010aa8 <_dtoa_r+0x1b0>
 8010b1e:	2300      	movs	r3, #0
 8010b20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	dc35      	bgt.n	8010b94 <_dtoa_r+0x29c>
 8010b28:	2301      	movs	r3, #1
 8010b2a:	9300      	str	r3, [sp, #0]
 8010b2c:	9307      	str	r3, [sp, #28]
 8010b2e:	461a      	mov	r2, r3
 8010b30:	920e      	str	r2, [sp, #56]	@ 0x38
 8010b32:	e00b      	b.n	8010b4c <_dtoa_r+0x254>
 8010b34:	2301      	movs	r3, #1
 8010b36:	e7f3      	b.n	8010b20 <_dtoa_r+0x228>
 8010b38:	2300      	movs	r3, #0
 8010b3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b3e:	18fb      	adds	r3, r7, r3
 8010b40:	9300      	str	r3, [sp, #0]
 8010b42:	3301      	adds	r3, #1
 8010b44:	2b01      	cmp	r3, #1
 8010b46:	9307      	str	r3, [sp, #28]
 8010b48:	bfb8      	it	lt
 8010b4a:	2301      	movlt	r3, #1
 8010b4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010b50:	2100      	movs	r1, #0
 8010b52:	2204      	movs	r2, #4
 8010b54:	f102 0514 	add.w	r5, r2, #20
 8010b58:	429d      	cmp	r5, r3
 8010b5a:	d91f      	bls.n	8010b9c <_dtoa_r+0x2a4>
 8010b5c:	6041      	str	r1, [r0, #4]
 8010b5e:	4658      	mov	r0, fp
 8010b60:	f000 fcd8 	bl	8011514 <_Balloc>
 8010b64:	4682      	mov	sl, r0
 8010b66:	2800      	cmp	r0, #0
 8010b68:	d13c      	bne.n	8010be4 <_dtoa_r+0x2ec>
 8010b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8010bd8 <_dtoa_r+0x2e0>)
 8010b6c:	4602      	mov	r2, r0
 8010b6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010b72:	e6d8      	b.n	8010926 <_dtoa_r+0x2e>
 8010b74:	2301      	movs	r3, #1
 8010b76:	e7e0      	b.n	8010b3a <_dtoa_r+0x242>
 8010b78:	2401      	movs	r4, #1
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010b80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010b84:	9300      	str	r3, [sp, #0]
 8010b86:	9307      	str	r3, [sp, #28]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	2312      	movs	r3, #18
 8010b8c:	e7d0      	b.n	8010b30 <_dtoa_r+0x238>
 8010b8e:	2301      	movs	r3, #1
 8010b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b92:	e7f5      	b.n	8010b80 <_dtoa_r+0x288>
 8010b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b96:	9300      	str	r3, [sp, #0]
 8010b98:	9307      	str	r3, [sp, #28]
 8010b9a:	e7d7      	b.n	8010b4c <_dtoa_r+0x254>
 8010b9c:	3101      	adds	r1, #1
 8010b9e:	0052      	lsls	r2, r2, #1
 8010ba0:	e7d8      	b.n	8010b54 <_dtoa_r+0x25c>
 8010ba2:	bf00      	nop
 8010ba4:	f3af 8000 	nop.w
 8010ba8:	636f4361 	.word	0x636f4361
 8010bac:	3fd287a7 	.word	0x3fd287a7
 8010bb0:	8b60c8b3 	.word	0x8b60c8b3
 8010bb4:	3fc68a28 	.word	0x3fc68a28
 8010bb8:	509f79fb 	.word	0x509f79fb
 8010bbc:	3fd34413 	.word	0x3fd34413
 8010bc0:	08015920 	.word	0x08015920
 8010bc4:	08015937 	.word	0x08015937
 8010bc8:	7ff00000 	.word	0x7ff00000
 8010bcc:	08015c79 	.word	0x08015c79
 8010bd0:	3ff80000 	.word	0x3ff80000
 8010bd4:	08015a30 	.word	0x08015a30
 8010bd8:	0801598f 	.word	0x0801598f
 8010bdc:	0801591c 	.word	0x0801591c
 8010be0:	08015c78 	.word	0x08015c78
 8010be4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010be8:	6018      	str	r0, [r3, #0]
 8010bea:	9b07      	ldr	r3, [sp, #28]
 8010bec:	2b0e      	cmp	r3, #14
 8010bee:	f200 80a4 	bhi.w	8010d3a <_dtoa_r+0x442>
 8010bf2:	2c00      	cmp	r4, #0
 8010bf4:	f000 80a1 	beq.w	8010d3a <_dtoa_r+0x442>
 8010bf8:	2f00      	cmp	r7, #0
 8010bfa:	dd33      	ble.n	8010c64 <_dtoa_r+0x36c>
 8010bfc:	4bad      	ldr	r3, [pc, #692]	@ (8010eb4 <_dtoa_r+0x5bc>)
 8010bfe:	f007 020f 	and.w	r2, r7, #15
 8010c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c06:	ed93 7b00 	vldr	d7, [r3]
 8010c0a:	05f8      	lsls	r0, r7, #23
 8010c0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010c10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010c14:	d516      	bpl.n	8010c44 <_dtoa_r+0x34c>
 8010c16:	4ba8      	ldr	r3, [pc, #672]	@ (8010eb8 <_dtoa_r+0x5c0>)
 8010c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010c20:	f7ef fe4c 	bl	80008bc <__aeabi_ddiv>
 8010c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c28:	f004 040f 	and.w	r4, r4, #15
 8010c2c:	2603      	movs	r6, #3
 8010c2e:	4da2      	ldr	r5, [pc, #648]	@ (8010eb8 <_dtoa_r+0x5c0>)
 8010c30:	b954      	cbnz	r4, 8010c48 <_dtoa_r+0x350>
 8010c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c3a:	f7ef fe3f 	bl	80008bc <__aeabi_ddiv>
 8010c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c42:	e028      	b.n	8010c96 <_dtoa_r+0x39e>
 8010c44:	2602      	movs	r6, #2
 8010c46:	e7f2      	b.n	8010c2e <_dtoa_r+0x336>
 8010c48:	07e1      	lsls	r1, r4, #31
 8010c4a:	d508      	bpl.n	8010c5e <_dtoa_r+0x366>
 8010c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010c54:	f7ef fd08 	bl	8000668 <__aeabi_dmul>
 8010c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c5c:	3601      	adds	r6, #1
 8010c5e:	1064      	asrs	r4, r4, #1
 8010c60:	3508      	adds	r5, #8
 8010c62:	e7e5      	b.n	8010c30 <_dtoa_r+0x338>
 8010c64:	f000 80d2 	beq.w	8010e0c <_dtoa_r+0x514>
 8010c68:	427c      	negs	r4, r7
 8010c6a:	4b92      	ldr	r3, [pc, #584]	@ (8010eb4 <_dtoa_r+0x5bc>)
 8010c6c:	4d92      	ldr	r5, [pc, #584]	@ (8010eb8 <_dtoa_r+0x5c0>)
 8010c6e:	f004 020f 	and.w	r2, r4, #15
 8010c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c7e:	f7ef fcf3 	bl	8000668 <__aeabi_dmul>
 8010c82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c86:	1124      	asrs	r4, r4, #4
 8010c88:	2300      	movs	r3, #0
 8010c8a:	2602      	movs	r6, #2
 8010c8c:	2c00      	cmp	r4, #0
 8010c8e:	f040 80b2 	bne.w	8010df6 <_dtoa_r+0x4fe>
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d1d3      	bne.n	8010c3e <_dtoa_r+0x346>
 8010c96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010c98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f000 80b7 	beq.w	8010e10 <_dtoa_r+0x518>
 8010ca2:	4b86      	ldr	r3, [pc, #536]	@ (8010ebc <_dtoa_r+0x5c4>)
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	4629      	mov	r1, r5
 8010caa:	f7ef ff4f 	bl	8000b4c <__aeabi_dcmplt>
 8010cae:	2800      	cmp	r0, #0
 8010cb0:	f000 80ae 	beq.w	8010e10 <_dtoa_r+0x518>
 8010cb4:	9b07      	ldr	r3, [sp, #28]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	f000 80aa 	beq.w	8010e10 <_dtoa_r+0x518>
 8010cbc:	9b00      	ldr	r3, [sp, #0]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	dd37      	ble.n	8010d32 <_dtoa_r+0x43a>
 8010cc2:	1e7b      	subs	r3, r7, #1
 8010cc4:	9304      	str	r3, [sp, #16]
 8010cc6:	4620      	mov	r0, r4
 8010cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8010ec0 <_dtoa_r+0x5c8>)
 8010cca:	2200      	movs	r2, #0
 8010ccc:	4629      	mov	r1, r5
 8010cce:	f7ef fccb 	bl	8000668 <__aeabi_dmul>
 8010cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010cd6:	9c00      	ldr	r4, [sp, #0]
 8010cd8:	3601      	adds	r6, #1
 8010cda:	4630      	mov	r0, r6
 8010cdc:	f7ef fc5a 	bl	8000594 <__aeabi_i2d>
 8010ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ce4:	f7ef fcc0 	bl	8000668 <__aeabi_dmul>
 8010ce8:	4b76      	ldr	r3, [pc, #472]	@ (8010ec4 <_dtoa_r+0x5cc>)
 8010cea:	2200      	movs	r2, #0
 8010cec:	f7ef fb06 	bl	80002fc <__adddf3>
 8010cf0:	4605      	mov	r5, r0
 8010cf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010cf6:	2c00      	cmp	r4, #0
 8010cf8:	f040 808d 	bne.w	8010e16 <_dtoa_r+0x51e>
 8010cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d00:	4b71      	ldr	r3, [pc, #452]	@ (8010ec8 <_dtoa_r+0x5d0>)
 8010d02:	2200      	movs	r2, #0
 8010d04:	f7ef faf8 	bl	80002f8 <__aeabi_dsub>
 8010d08:	4602      	mov	r2, r0
 8010d0a:	460b      	mov	r3, r1
 8010d0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010d10:	462a      	mov	r2, r5
 8010d12:	4633      	mov	r3, r6
 8010d14:	f7ef ff38 	bl	8000b88 <__aeabi_dcmpgt>
 8010d18:	2800      	cmp	r0, #0
 8010d1a:	f040 828b 	bne.w	8011234 <_dtoa_r+0x93c>
 8010d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d22:	462a      	mov	r2, r5
 8010d24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010d28:	f7ef ff10 	bl	8000b4c <__aeabi_dcmplt>
 8010d2c:	2800      	cmp	r0, #0
 8010d2e:	f040 8128 	bne.w	8010f82 <_dtoa_r+0x68a>
 8010d32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010d36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010d3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	f2c0 815a 	blt.w	8010ff6 <_dtoa_r+0x6fe>
 8010d42:	2f0e      	cmp	r7, #14
 8010d44:	f300 8157 	bgt.w	8010ff6 <_dtoa_r+0x6fe>
 8010d48:	4b5a      	ldr	r3, [pc, #360]	@ (8010eb4 <_dtoa_r+0x5bc>)
 8010d4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010d4e:	ed93 7b00 	vldr	d7, [r3]
 8010d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	ed8d 7b00 	vstr	d7, [sp]
 8010d5a:	da03      	bge.n	8010d64 <_dtoa_r+0x46c>
 8010d5c:	9b07      	ldr	r3, [sp, #28]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	f340 8101 	ble.w	8010f66 <_dtoa_r+0x66e>
 8010d64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010d68:	4656      	mov	r6, sl
 8010d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d6e:	4620      	mov	r0, r4
 8010d70:	4629      	mov	r1, r5
 8010d72:	f7ef fda3 	bl	80008bc <__aeabi_ddiv>
 8010d76:	f7ef ff27 	bl	8000bc8 <__aeabi_d2iz>
 8010d7a:	4680      	mov	r8, r0
 8010d7c:	f7ef fc0a 	bl	8000594 <__aeabi_i2d>
 8010d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d84:	f7ef fc70 	bl	8000668 <__aeabi_dmul>
 8010d88:	4602      	mov	r2, r0
 8010d8a:	460b      	mov	r3, r1
 8010d8c:	4620      	mov	r0, r4
 8010d8e:	4629      	mov	r1, r5
 8010d90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010d94:	f7ef fab0 	bl	80002f8 <__aeabi_dsub>
 8010d98:	f806 4b01 	strb.w	r4, [r6], #1
 8010d9c:	9d07      	ldr	r5, [sp, #28]
 8010d9e:	eba6 040a 	sub.w	r4, r6, sl
 8010da2:	42a5      	cmp	r5, r4
 8010da4:	4602      	mov	r2, r0
 8010da6:	460b      	mov	r3, r1
 8010da8:	f040 8117 	bne.w	8010fda <_dtoa_r+0x6e2>
 8010dac:	f7ef faa6 	bl	80002fc <__adddf3>
 8010db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010db4:	4604      	mov	r4, r0
 8010db6:	460d      	mov	r5, r1
 8010db8:	f7ef fee6 	bl	8000b88 <__aeabi_dcmpgt>
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	f040 80f9 	bne.w	8010fb4 <_dtoa_r+0x6bc>
 8010dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	4629      	mov	r1, r5
 8010dca:	f7ef feb5 	bl	8000b38 <__aeabi_dcmpeq>
 8010dce:	b118      	cbz	r0, 8010dd8 <_dtoa_r+0x4e0>
 8010dd0:	f018 0f01 	tst.w	r8, #1
 8010dd4:	f040 80ee 	bne.w	8010fb4 <_dtoa_r+0x6bc>
 8010dd8:	4649      	mov	r1, r9
 8010dda:	4658      	mov	r0, fp
 8010ddc:	f000 fbda 	bl	8011594 <_Bfree>
 8010de0:	2300      	movs	r3, #0
 8010de2:	7033      	strb	r3, [r6, #0]
 8010de4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010de6:	3701      	adds	r7, #1
 8010de8:	601f      	str	r7, [r3, #0]
 8010dea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	f000 831d 	beq.w	801142c <_dtoa_r+0xb34>
 8010df2:	601e      	str	r6, [r3, #0]
 8010df4:	e31a      	b.n	801142c <_dtoa_r+0xb34>
 8010df6:	07e2      	lsls	r2, r4, #31
 8010df8:	d505      	bpl.n	8010e06 <_dtoa_r+0x50e>
 8010dfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010dfe:	f7ef fc33 	bl	8000668 <__aeabi_dmul>
 8010e02:	3601      	adds	r6, #1
 8010e04:	2301      	movs	r3, #1
 8010e06:	1064      	asrs	r4, r4, #1
 8010e08:	3508      	adds	r5, #8
 8010e0a:	e73f      	b.n	8010c8c <_dtoa_r+0x394>
 8010e0c:	2602      	movs	r6, #2
 8010e0e:	e742      	b.n	8010c96 <_dtoa_r+0x39e>
 8010e10:	9c07      	ldr	r4, [sp, #28]
 8010e12:	9704      	str	r7, [sp, #16]
 8010e14:	e761      	b.n	8010cda <_dtoa_r+0x3e2>
 8010e16:	4b27      	ldr	r3, [pc, #156]	@ (8010eb4 <_dtoa_r+0x5bc>)
 8010e18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010e1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010e1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010e22:	4454      	add	r4, sl
 8010e24:	2900      	cmp	r1, #0
 8010e26:	d053      	beq.n	8010ed0 <_dtoa_r+0x5d8>
 8010e28:	4928      	ldr	r1, [pc, #160]	@ (8010ecc <_dtoa_r+0x5d4>)
 8010e2a:	2000      	movs	r0, #0
 8010e2c:	f7ef fd46 	bl	80008bc <__aeabi_ddiv>
 8010e30:	4633      	mov	r3, r6
 8010e32:	462a      	mov	r2, r5
 8010e34:	f7ef fa60 	bl	80002f8 <__aeabi_dsub>
 8010e38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010e3c:	4656      	mov	r6, sl
 8010e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e42:	f7ef fec1 	bl	8000bc8 <__aeabi_d2iz>
 8010e46:	4605      	mov	r5, r0
 8010e48:	f7ef fba4 	bl	8000594 <__aeabi_i2d>
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	460b      	mov	r3, r1
 8010e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e54:	f7ef fa50 	bl	80002f8 <__aeabi_dsub>
 8010e58:	3530      	adds	r5, #48	@ 0x30
 8010e5a:	4602      	mov	r2, r0
 8010e5c:	460b      	mov	r3, r1
 8010e5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010e62:	f806 5b01 	strb.w	r5, [r6], #1
 8010e66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010e6a:	f7ef fe6f 	bl	8000b4c <__aeabi_dcmplt>
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	d171      	bne.n	8010f56 <_dtoa_r+0x65e>
 8010e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e76:	4911      	ldr	r1, [pc, #68]	@ (8010ebc <_dtoa_r+0x5c4>)
 8010e78:	2000      	movs	r0, #0
 8010e7a:	f7ef fa3d 	bl	80002f8 <__aeabi_dsub>
 8010e7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010e82:	f7ef fe63 	bl	8000b4c <__aeabi_dcmplt>
 8010e86:	2800      	cmp	r0, #0
 8010e88:	f040 8095 	bne.w	8010fb6 <_dtoa_r+0x6be>
 8010e8c:	42a6      	cmp	r6, r4
 8010e8e:	f43f af50 	beq.w	8010d32 <_dtoa_r+0x43a>
 8010e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010e96:	4b0a      	ldr	r3, [pc, #40]	@ (8010ec0 <_dtoa_r+0x5c8>)
 8010e98:	2200      	movs	r2, #0
 8010e9a:	f7ef fbe5 	bl	8000668 <__aeabi_dmul>
 8010e9e:	4b08      	ldr	r3, [pc, #32]	@ (8010ec0 <_dtoa_r+0x5c8>)
 8010ea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010eaa:	f7ef fbdd 	bl	8000668 <__aeabi_dmul>
 8010eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010eb2:	e7c4      	b.n	8010e3e <_dtoa_r+0x546>
 8010eb4:	08015a30 	.word	0x08015a30
 8010eb8:	08015a08 	.word	0x08015a08
 8010ebc:	3ff00000 	.word	0x3ff00000
 8010ec0:	40240000 	.word	0x40240000
 8010ec4:	401c0000 	.word	0x401c0000
 8010ec8:	40140000 	.word	0x40140000
 8010ecc:	3fe00000 	.word	0x3fe00000
 8010ed0:	4631      	mov	r1, r6
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	f7ef fbc8 	bl	8000668 <__aeabi_dmul>
 8010ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010edc:	9415      	str	r4, [sp, #84]	@ 0x54
 8010ede:	4656      	mov	r6, sl
 8010ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ee4:	f7ef fe70 	bl	8000bc8 <__aeabi_d2iz>
 8010ee8:	4605      	mov	r5, r0
 8010eea:	f7ef fb53 	bl	8000594 <__aeabi_i2d>
 8010eee:	4602      	mov	r2, r0
 8010ef0:	460b      	mov	r3, r1
 8010ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ef6:	f7ef f9ff 	bl	80002f8 <__aeabi_dsub>
 8010efa:	3530      	adds	r5, #48	@ 0x30
 8010efc:	f806 5b01 	strb.w	r5, [r6], #1
 8010f00:	4602      	mov	r2, r0
 8010f02:	460b      	mov	r3, r1
 8010f04:	42a6      	cmp	r6, r4
 8010f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f0a:	f04f 0200 	mov.w	r2, #0
 8010f0e:	d124      	bne.n	8010f5a <_dtoa_r+0x662>
 8010f10:	4bac      	ldr	r3, [pc, #688]	@ (80111c4 <_dtoa_r+0x8cc>)
 8010f12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010f16:	f7ef f9f1 	bl	80002fc <__adddf3>
 8010f1a:	4602      	mov	r2, r0
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f22:	f7ef fe31 	bl	8000b88 <__aeabi_dcmpgt>
 8010f26:	2800      	cmp	r0, #0
 8010f28:	d145      	bne.n	8010fb6 <_dtoa_r+0x6be>
 8010f2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010f2e:	49a5      	ldr	r1, [pc, #660]	@ (80111c4 <_dtoa_r+0x8cc>)
 8010f30:	2000      	movs	r0, #0
 8010f32:	f7ef f9e1 	bl	80002f8 <__aeabi_dsub>
 8010f36:	4602      	mov	r2, r0
 8010f38:	460b      	mov	r3, r1
 8010f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f3e:	f7ef fe05 	bl	8000b4c <__aeabi_dcmplt>
 8010f42:	2800      	cmp	r0, #0
 8010f44:	f43f aef5 	beq.w	8010d32 <_dtoa_r+0x43a>
 8010f48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010f4a:	1e73      	subs	r3, r6, #1
 8010f4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8010f4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010f52:	2b30      	cmp	r3, #48	@ 0x30
 8010f54:	d0f8      	beq.n	8010f48 <_dtoa_r+0x650>
 8010f56:	9f04      	ldr	r7, [sp, #16]
 8010f58:	e73e      	b.n	8010dd8 <_dtoa_r+0x4e0>
 8010f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80111c8 <_dtoa_r+0x8d0>)
 8010f5c:	f7ef fb84 	bl	8000668 <__aeabi_dmul>
 8010f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f64:	e7bc      	b.n	8010ee0 <_dtoa_r+0x5e8>
 8010f66:	d10c      	bne.n	8010f82 <_dtoa_r+0x68a>
 8010f68:	4b98      	ldr	r3, [pc, #608]	@ (80111cc <_dtoa_r+0x8d4>)
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f70:	f7ef fb7a 	bl	8000668 <__aeabi_dmul>
 8010f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010f78:	f7ef fdfc 	bl	8000b74 <__aeabi_dcmpge>
 8010f7c:	2800      	cmp	r0, #0
 8010f7e:	f000 8157 	beq.w	8011230 <_dtoa_r+0x938>
 8010f82:	2400      	movs	r4, #0
 8010f84:	4625      	mov	r5, r4
 8010f86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f88:	43db      	mvns	r3, r3
 8010f8a:	9304      	str	r3, [sp, #16]
 8010f8c:	4656      	mov	r6, sl
 8010f8e:	2700      	movs	r7, #0
 8010f90:	4621      	mov	r1, r4
 8010f92:	4658      	mov	r0, fp
 8010f94:	f000 fafe 	bl	8011594 <_Bfree>
 8010f98:	2d00      	cmp	r5, #0
 8010f9a:	d0dc      	beq.n	8010f56 <_dtoa_r+0x65e>
 8010f9c:	b12f      	cbz	r7, 8010faa <_dtoa_r+0x6b2>
 8010f9e:	42af      	cmp	r7, r5
 8010fa0:	d003      	beq.n	8010faa <_dtoa_r+0x6b2>
 8010fa2:	4639      	mov	r1, r7
 8010fa4:	4658      	mov	r0, fp
 8010fa6:	f000 faf5 	bl	8011594 <_Bfree>
 8010faa:	4629      	mov	r1, r5
 8010fac:	4658      	mov	r0, fp
 8010fae:	f000 faf1 	bl	8011594 <_Bfree>
 8010fb2:	e7d0      	b.n	8010f56 <_dtoa_r+0x65e>
 8010fb4:	9704      	str	r7, [sp, #16]
 8010fb6:	4633      	mov	r3, r6
 8010fb8:	461e      	mov	r6, r3
 8010fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010fbe:	2a39      	cmp	r2, #57	@ 0x39
 8010fc0:	d107      	bne.n	8010fd2 <_dtoa_r+0x6da>
 8010fc2:	459a      	cmp	sl, r3
 8010fc4:	d1f8      	bne.n	8010fb8 <_dtoa_r+0x6c0>
 8010fc6:	9a04      	ldr	r2, [sp, #16]
 8010fc8:	3201      	adds	r2, #1
 8010fca:	9204      	str	r2, [sp, #16]
 8010fcc:	2230      	movs	r2, #48	@ 0x30
 8010fce:	f88a 2000 	strb.w	r2, [sl]
 8010fd2:	781a      	ldrb	r2, [r3, #0]
 8010fd4:	3201      	adds	r2, #1
 8010fd6:	701a      	strb	r2, [r3, #0]
 8010fd8:	e7bd      	b.n	8010f56 <_dtoa_r+0x65e>
 8010fda:	4b7b      	ldr	r3, [pc, #492]	@ (80111c8 <_dtoa_r+0x8d0>)
 8010fdc:	2200      	movs	r2, #0
 8010fde:	f7ef fb43 	bl	8000668 <__aeabi_dmul>
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	4604      	mov	r4, r0
 8010fe8:	460d      	mov	r5, r1
 8010fea:	f7ef fda5 	bl	8000b38 <__aeabi_dcmpeq>
 8010fee:	2800      	cmp	r0, #0
 8010ff0:	f43f aebb 	beq.w	8010d6a <_dtoa_r+0x472>
 8010ff4:	e6f0      	b.n	8010dd8 <_dtoa_r+0x4e0>
 8010ff6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010ff8:	2a00      	cmp	r2, #0
 8010ffa:	f000 80db 	beq.w	80111b4 <_dtoa_r+0x8bc>
 8010ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011000:	2a01      	cmp	r2, #1
 8011002:	f300 80bf 	bgt.w	8011184 <_dtoa_r+0x88c>
 8011006:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011008:	2a00      	cmp	r2, #0
 801100a:	f000 80b7 	beq.w	801117c <_dtoa_r+0x884>
 801100e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011012:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011014:	4646      	mov	r6, r8
 8011016:	9a08      	ldr	r2, [sp, #32]
 8011018:	2101      	movs	r1, #1
 801101a:	441a      	add	r2, r3
 801101c:	4658      	mov	r0, fp
 801101e:	4498      	add	r8, r3
 8011020:	9208      	str	r2, [sp, #32]
 8011022:	f000 fbb5 	bl	8011790 <__i2b>
 8011026:	4605      	mov	r5, r0
 8011028:	b15e      	cbz	r6, 8011042 <_dtoa_r+0x74a>
 801102a:	9b08      	ldr	r3, [sp, #32]
 801102c:	2b00      	cmp	r3, #0
 801102e:	dd08      	ble.n	8011042 <_dtoa_r+0x74a>
 8011030:	42b3      	cmp	r3, r6
 8011032:	9a08      	ldr	r2, [sp, #32]
 8011034:	bfa8      	it	ge
 8011036:	4633      	movge	r3, r6
 8011038:	eba8 0803 	sub.w	r8, r8, r3
 801103c:	1af6      	subs	r6, r6, r3
 801103e:	1ad3      	subs	r3, r2, r3
 8011040:	9308      	str	r3, [sp, #32]
 8011042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011044:	b1f3      	cbz	r3, 8011084 <_dtoa_r+0x78c>
 8011046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011048:	2b00      	cmp	r3, #0
 801104a:	f000 80b7 	beq.w	80111bc <_dtoa_r+0x8c4>
 801104e:	b18c      	cbz	r4, 8011074 <_dtoa_r+0x77c>
 8011050:	4629      	mov	r1, r5
 8011052:	4622      	mov	r2, r4
 8011054:	4658      	mov	r0, fp
 8011056:	f000 fc5b 	bl	8011910 <__pow5mult>
 801105a:	464a      	mov	r2, r9
 801105c:	4601      	mov	r1, r0
 801105e:	4605      	mov	r5, r0
 8011060:	4658      	mov	r0, fp
 8011062:	f000 fbab 	bl	80117bc <__multiply>
 8011066:	4649      	mov	r1, r9
 8011068:	9004      	str	r0, [sp, #16]
 801106a:	4658      	mov	r0, fp
 801106c:	f000 fa92 	bl	8011594 <_Bfree>
 8011070:	9b04      	ldr	r3, [sp, #16]
 8011072:	4699      	mov	r9, r3
 8011074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011076:	1b1a      	subs	r2, r3, r4
 8011078:	d004      	beq.n	8011084 <_dtoa_r+0x78c>
 801107a:	4649      	mov	r1, r9
 801107c:	4658      	mov	r0, fp
 801107e:	f000 fc47 	bl	8011910 <__pow5mult>
 8011082:	4681      	mov	r9, r0
 8011084:	2101      	movs	r1, #1
 8011086:	4658      	mov	r0, fp
 8011088:	f000 fb82 	bl	8011790 <__i2b>
 801108c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801108e:	4604      	mov	r4, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	f000 81cf 	beq.w	8011434 <_dtoa_r+0xb3c>
 8011096:	461a      	mov	r2, r3
 8011098:	4601      	mov	r1, r0
 801109a:	4658      	mov	r0, fp
 801109c:	f000 fc38 	bl	8011910 <__pow5mult>
 80110a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110a2:	2b01      	cmp	r3, #1
 80110a4:	4604      	mov	r4, r0
 80110a6:	f300 8095 	bgt.w	80111d4 <_dtoa_r+0x8dc>
 80110aa:	9b02      	ldr	r3, [sp, #8]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	f040 8087 	bne.w	80111c0 <_dtoa_r+0x8c8>
 80110b2:	9b03      	ldr	r3, [sp, #12]
 80110b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	f040 8089 	bne.w	80111d0 <_dtoa_r+0x8d8>
 80110be:	9b03      	ldr	r3, [sp, #12]
 80110c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80110c4:	0d1b      	lsrs	r3, r3, #20
 80110c6:	051b      	lsls	r3, r3, #20
 80110c8:	b12b      	cbz	r3, 80110d6 <_dtoa_r+0x7de>
 80110ca:	9b08      	ldr	r3, [sp, #32]
 80110cc:	3301      	adds	r3, #1
 80110ce:	9308      	str	r3, [sp, #32]
 80110d0:	f108 0801 	add.w	r8, r8, #1
 80110d4:	2301      	movs	r3, #1
 80110d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80110d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110da:	2b00      	cmp	r3, #0
 80110dc:	f000 81b0 	beq.w	8011440 <_dtoa_r+0xb48>
 80110e0:	6923      	ldr	r3, [r4, #16]
 80110e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80110e6:	6918      	ldr	r0, [r3, #16]
 80110e8:	f000 fb06 	bl	80116f8 <__hi0bits>
 80110ec:	f1c0 0020 	rsb	r0, r0, #32
 80110f0:	9b08      	ldr	r3, [sp, #32]
 80110f2:	4418      	add	r0, r3
 80110f4:	f010 001f 	ands.w	r0, r0, #31
 80110f8:	d077      	beq.n	80111ea <_dtoa_r+0x8f2>
 80110fa:	f1c0 0320 	rsb	r3, r0, #32
 80110fe:	2b04      	cmp	r3, #4
 8011100:	dd6b      	ble.n	80111da <_dtoa_r+0x8e2>
 8011102:	9b08      	ldr	r3, [sp, #32]
 8011104:	f1c0 001c 	rsb	r0, r0, #28
 8011108:	4403      	add	r3, r0
 801110a:	4480      	add	r8, r0
 801110c:	4406      	add	r6, r0
 801110e:	9308      	str	r3, [sp, #32]
 8011110:	f1b8 0f00 	cmp.w	r8, #0
 8011114:	dd05      	ble.n	8011122 <_dtoa_r+0x82a>
 8011116:	4649      	mov	r1, r9
 8011118:	4642      	mov	r2, r8
 801111a:	4658      	mov	r0, fp
 801111c:	f000 fc52 	bl	80119c4 <__lshift>
 8011120:	4681      	mov	r9, r0
 8011122:	9b08      	ldr	r3, [sp, #32]
 8011124:	2b00      	cmp	r3, #0
 8011126:	dd05      	ble.n	8011134 <_dtoa_r+0x83c>
 8011128:	4621      	mov	r1, r4
 801112a:	461a      	mov	r2, r3
 801112c:	4658      	mov	r0, fp
 801112e:	f000 fc49 	bl	80119c4 <__lshift>
 8011132:	4604      	mov	r4, r0
 8011134:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011136:	2b00      	cmp	r3, #0
 8011138:	d059      	beq.n	80111ee <_dtoa_r+0x8f6>
 801113a:	4621      	mov	r1, r4
 801113c:	4648      	mov	r0, r9
 801113e:	f000 fcad 	bl	8011a9c <__mcmp>
 8011142:	2800      	cmp	r0, #0
 8011144:	da53      	bge.n	80111ee <_dtoa_r+0x8f6>
 8011146:	1e7b      	subs	r3, r7, #1
 8011148:	9304      	str	r3, [sp, #16]
 801114a:	4649      	mov	r1, r9
 801114c:	2300      	movs	r3, #0
 801114e:	220a      	movs	r2, #10
 8011150:	4658      	mov	r0, fp
 8011152:	f000 fa41 	bl	80115d8 <__multadd>
 8011156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011158:	4681      	mov	r9, r0
 801115a:	2b00      	cmp	r3, #0
 801115c:	f000 8172 	beq.w	8011444 <_dtoa_r+0xb4c>
 8011160:	2300      	movs	r3, #0
 8011162:	4629      	mov	r1, r5
 8011164:	220a      	movs	r2, #10
 8011166:	4658      	mov	r0, fp
 8011168:	f000 fa36 	bl	80115d8 <__multadd>
 801116c:	9b00      	ldr	r3, [sp, #0]
 801116e:	2b00      	cmp	r3, #0
 8011170:	4605      	mov	r5, r0
 8011172:	dc67      	bgt.n	8011244 <_dtoa_r+0x94c>
 8011174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011176:	2b02      	cmp	r3, #2
 8011178:	dc41      	bgt.n	80111fe <_dtoa_r+0x906>
 801117a:	e063      	b.n	8011244 <_dtoa_r+0x94c>
 801117c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801117e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011182:	e746      	b.n	8011012 <_dtoa_r+0x71a>
 8011184:	9b07      	ldr	r3, [sp, #28]
 8011186:	1e5c      	subs	r4, r3, #1
 8011188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801118a:	42a3      	cmp	r3, r4
 801118c:	bfbf      	itttt	lt
 801118e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011190:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011192:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011194:	1ae3      	sublt	r3, r4, r3
 8011196:	bfb4      	ite	lt
 8011198:	18d2      	addlt	r2, r2, r3
 801119a:	1b1c      	subge	r4, r3, r4
 801119c:	9b07      	ldr	r3, [sp, #28]
 801119e:	bfbc      	itt	lt
 80111a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80111a2:	2400      	movlt	r4, #0
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	bfb5      	itete	lt
 80111a8:	eba8 0603 	sublt.w	r6, r8, r3
 80111ac:	9b07      	ldrge	r3, [sp, #28]
 80111ae:	2300      	movlt	r3, #0
 80111b0:	4646      	movge	r6, r8
 80111b2:	e730      	b.n	8011016 <_dtoa_r+0x71e>
 80111b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80111b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80111b8:	4646      	mov	r6, r8
 80111ba:	e735      	b.n	8011028 <_dtoa_r+0x730>
 80111bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80111be:	e75c      	b.n	801107a <_dtoa_r+0x782>
 80111c0:	2300      	movs	r3, #0
 80111c2:	e788      	b.n	80110d6 <_dtoa_r+0x7de>
 80111c4:	3fe00000 	.word	0x3fe00000
 80111c8:	40240000 	.word	0x40240000
 80111cc:	40140000 	.word	0x40140000
 80111d0:	9b02      	ldr	r3, [sp, #8]
 80111d2:	e780      	b.n	80110d6 <_dtoa_r+0x7de>
 80111d4:	2300      	movs	r3, #0
 80111d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80111d8:	e782      	b.n	80110e0 <_dtoa_r+0x7e8>
 80111da:	d099      	beq.n	8011110 <_dtoa_r+0x818>
 80111dc:	9a08      	ldr	r2, [sp, #32]
 80111de:	331c      	adds	r3, #28
 80111e0:	441a      	add	r2, r3
 80111e2:	4498      	add	r8, r3
 80111e4:	441e      	add	r6, r3
 80111e6:	9208      	str	r2, [sp, #32]
 80111e8:	e792      	b.n	8011110 <_dtoa_r+0x818>
 80111ea:	4603      	mov	r3, r0
 80111ec:	e7f6      	b.n	80111dc <_dtoa_r+0x8e4>
 80111ee:	9b07      	ldr	r3, [sp, #28]
 80111f0:	9704      	str	r7, [sp, #16]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	dc20      	bgt.n	8011238 <_dtoa_r+0x940>
 80111f6:	9300      	str	r3, [sp, #0]
 80111f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111fa:	2b02      	cmp	r3, #2
 80111fc:	dd1e      	ble.n	801123c <_dtoa_r+0x944>
 80111fe:	9b00      	ldr	r3, [sp, #0]
 8011200:	2b00      	cmp	r3, #0
 8011202:	f47f aec0 	bne.w	8010f86 <_dtoa_r+0x68e>
 8011206:	4621      	mov	r1, r4
 8011208:	2205      	movs	r2, #5
 801120a:	4658      	mov	r0, fp
 801120c:	f000 f9e4 	bl	80115d8 <__multadd>
 8011210:	4601      	mov	r1, r0
 8011212:	4604      	mov	r4, r0
 8011214:	4648      	mov	r0, r9
 8011216:	f000 fc41 	bl	8011a9c <__mcmp>
 801121a:	2800      	cmp	r0, #0
 801121c:	f77f aeb3 	ble.w	8010f86 <_dtoa_r+0x68e>
 8011220:	4656      	mov	r6, sl
 8011222:	2331      	movs	r3, #49	@ 0x31
 8011224:	f806 3b01 	strb.w	r3, [r6], #1
 8011228:	9b04      	ldr	r3, [sp, #16]
 801122a:	3301      	adds	r3, #1
 801122c:	9304      	str	r3, [sp, #16]
 801122e:	e6ae      	b.n	8010f8e <_dtoa_r+0x696>
 8011230:	9c07      	ldr	r4, [sp, #28]
 8011232:	9704      	str	r7, [sp, #16]
 8011234:	4625      	mov	r5, r4
 8011236:	e7f3      	b.n	8011220 <_dtoa_r+0x928>
 8011238:	9b07      	ldr	r3, [sp, #28]
 801123a:	9300      	str	r3, [sp, #0]
 801123c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801123e:	2b00      	cmp	r3, #0
 8011240:	f000 8104 	beq.w	801144c <_dtoa_r+0xb54>
 8011244:	2e00      	cmp	r6, #0
 8011246:	dd05      	ble.n	8011254 <_dtoa_r+0x95c>
 8011248:	4629      	mov	r1, r5
 801124a:	4632      	mov	r2, r6
 801124c:	4658      	mov	r0, fp
 801124e:	f000 fbb9 	bl	80119c4 <__lshift>
 8011252:	4605      	mov	r5, r0
 8011254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011256:	2b00      	cmp	r3, #0
 8011258:	d05a      	beq.n	8011310 <_dtoa_r+0xa18>
 801125a:	6869      	ldr	r1, [r5, #4]
 801125c:	4658      	mov	r0, fp
 801125e:	f000 f959 	bl	8011514 <_Balloc>
 8011262:	4606      	mov	r6, r0
 8011264:	b928      	cbnz	r0, 8011272 <_dtoa_r+0x97a>
 8011266:	4b84      	ldr	r3, [pc, #528]	@ (8011478 <_dtoa_r+0xb80>)
 8011268:	4602      	mov	r2, r0
 801126a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801126e:	f7ff bb5a 	b.w	8010926 <_dtoa_r+0x2e>
 8011272:	692a      	ldr	r2, [r5, #16]
 8011274:	3202      	adds	r2, #2
 8011276:	0092      	lsls	r2, r2, #2
 8011278:	f105 010c 	add.w	r1, r5, #12
 801127c:	300c      	adds	r0, #12
 801127e:	f7ff fa92 	bl	80107a6 <memcpy>
 8011282:	2201      	movs	r2, #1
 8011284:	4631      	mov	r1, r6
 8011286:	4658      	mov	r0, fp
 8011288:	f000 fb9c 	bl	80119c4 <__lshift>
 801128c:	f10a 0301 	add.w	r3, sl, #1
 8011290:	9307      	str	r3, [sp, #28]
 8011292:	9b00      	ldr	r3, [sp, #0]
 8011294:	4453      	add	r3, sl
 8011296:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011298:	9b02      	ldr	r3, [sp, #8]
 801129a:	f003 0301 	and.w	r3, r3, #1
 801129e:	462f      	mov	r7, r5
 80112a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80112a2:	4605      	mov	r5, r0
 80112a4:	9b07      	ldr	r3, [sp, #28]
 80112a6:	4621      	mov	r1, r4
 80112a8:	3b01      	subs	r3, #1
 80112aa:	4648      	mov	r0, r9
 80112ac:	9300      	str	r3, [sp, #0]
 80112ae:	f7ff fa9b 	bl	80107e8 <quorem>
 80112b2:	4639      	mov	r1, r7
 80112b4:	9002      	str	r0, [sp, #8]
 80112b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80112ba:	4648      	mov	r0, r9
 80112bc:	f000 fbee 	bl	8011a9c <__mcmp>
 80112c0:	462a      	mov	r2, r5
 80112c2:	9008      	str	r0, [sp, #32]
 80112c4:	4621      	mov	r1, r4
 80112c6:	4658      	mov	r0, fp
 80112c8:	f000 fc04 	bl	8011ad4 <__mdiff>
 80112cc:	68c2      	ldr	r2, [r0, #12]
 80112ce:	4606      	mov	r6, r0
 80112d0:	bb02      	cbnz	r2, 8011314 <_dtoa_r+0xa1c>
 80112d2:	4601      	mov	r1, r0
 80112d4:	4648      	mov	r0, r9
 80112d6:	f000 fbe1 	bl	8011a9c <__mcmp>
 80112da:	4602      	mov	r2, r0
 80112dc:	4631      	mov	r1, r6
 80112de:	4658      	mov	r0, fp
 80112e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80112e2:	f000 f957 	bl	8011594 <_Bfree>
 80112e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80112ea:	9e07      	ldr	r6, [sp, #28]
 80112ec:	ea43 0102 	orr.w	r1, r3, r2
 80112f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80112f2:	4319      	orrs	r1, r3
 80112f4:	d110      	bne.n	8011318 <_dtoa_r+0xa20>
 80112f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80112fa:	d029      	beq.n	8011350 <_dtoa_r+0xa58>
 80112fc:	9b08      	ldr	r3, [sp, #32]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	dd02      	ble.n	8011308 <_dtoa_r+0xa10>
 8011302:	9b02      	ldr	r3, [sp, #8]
 8011304:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011308:	9b00      	ldr	r3, [sp, #0]
 801130a:	f883 8000 	strb.w	r8, [r3]
 801130e:	e63f      	b.n	8010f90 <_dtoa_r+0x698>
 8011310:	4628      	mov	r0, r5
 8011312:	e7bb      	b.n	801128c <_dtoa_r+0x994>
 8011314:	2201      	movs	r2, #1
 8011316:	e7e1      	b.n	80112dc <_dtoa_r+0x9e4>
 8011318:	9b08      	ldr	r3, [sp, #32]
 801131a:	2b00      	cmp	r3, #0
 801131c:	db04      	blt.n	8011328 <_dtoa_r+0xa30>
 801131e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011320:	430b      	orrs	r3, r1
 8011322:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011324:	430b      	orrs	r3, r1
 8011326:	d120      	bne.n	801136a <_dtoa_r+0xa72>
 8011328:	2a00      	cmp	r2, #0
 801132a:	dded      	ble.n	8011308 <_dtoa_r+0xa10>
 801132c:	4649      	mov	r1, r9
 801132e:	2201      	movs	r2, #1
 8011330:	4658      	mov	r0, fp
 8011332:	f000 fb47 	bl	80119c4 <__lshift>
 8011336:	4621      	mov	r1, r4
 8011338:	4681      	mov	r9, r0
 801133a:	f000 fbaf 	bl	8011a9c <__mcmp>
 801133e:	2800      	cmp	r0, #0
 8011340:	dc03      	bgt.n	801134a <_dtoa_r+0xa52>
 8011342:	d1e1      	bne.n	8011308 <_dtoa_r+0xa10>
 8011344:	f018 0f01 	tst.w	r8, #1
 8011348:	d0de      	beq.n	8011308 <_dtoa_r+0xa10>
 801134a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801134e:	d1d8      	bne.n	8011302 <_dtoa_r+0xa0a>
 8011350:	9a00      	ldr	r2, [sp, #0]
 8011352:	2339      	movs	r3, #57	@ 0x39
 8011354:	7013      	strb	r3, [r2, #0]
 8011356:	4633      	mov	r3, r6
 8011358:	461e      	mov	r6, r3
 801135a:	3b01      	subs	r3, #1
 801135c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011360:	2a39      	cmp	r2, #57	@ 0x39
 8011362:	d052      	beq.n	801140a <_dtoa_r+0xb12>
 8011364:	3201      	adds	r2, #1
 8011366:	701a      	strb	r2, [r3, #0]
 8011368:	e612      	b.n	8010f90 <_dtoa_r+0x698>
 801136a:	2a00      	cmp	r2, #0
 801136c:	dd07      	ble.n	801137e <_dtoa_r+0xa86>
 801136e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011372:	d0ed      	beq.n	8011350 <_dtoa_r+0xa58>
 8011374:	9a00      	ldr	r2, [sp, #0]
 8011376:	f108 0301 	add.w	r3, r8, #1
 801137a:	7013      	strb	r3, [r2, #0]
 801137c:	e608      	b.n	8010f90 <_dtoa_r+0x698>
 801137e:	9b07      	ldr	r3, [sp, #28]
 8011380:	9a07      	ldr	r2, [sp, #28]
 8011382:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011388:	4293      	cmp	r3, r2
 801138a:	d028      	beq.n	80113de <_dtoa_r+0xae6>
 801138c:	4649      	mov	r1, r9
 801138e:	2300      	movs	r3, #0
 8011390:	220a      	movs	r2, #10
 8011392:	4658      	mov	r0, fp
 8011394:	f000 f920 	bl	80115d8 <__multadd>
 8011398:	42af      	cmp	r7, r5
 801139a:	4681      	mov	r9, r0
 801139c:	f04f 0300 	mov.w	r3, #0
 80113a0:	f04f 020a 	mov.w	r2, #10
 80113a4:	4639      	mov	r1, r7
 80113a6:	4658      	mov	r0, fp
 80113a8:	d107      	bne.n	80113ba <_dtoa_r+0xac2>
 80113aa:	f000 f915 	bl	80115d8 <__multadd>
 80113ae:	4607      	mov	r7, r0
 80113b0:	4605      	mov	r5, r0
 80113b2:	9b07      	ldr	r3, [sp, #28]
 80113b4:	3301      	adds	r3, #1
 80113b6:	9307      	str	r3, [sp, #28]
 80113b8:	e774      	b.n	80112a4 <_dtoa_r+0x9ac>
 80113ba:	f000 f90d 	bl	80115d8 <__multadd>
 80113be:	4629      	mov	r1, r5
 80113c0:	4607      	mov	r7, r0
 80113c2:	2300      	movs	r3, #0
 80113c4:	220a      	movs	r2, #10
 80113c6:	4658      	mov	r0, fp
 80113c8:	f000 f906 	bl	80115d8 <__multadd>
 80113cc:	4605      	mov	r5, r0
 80113ce:	e7f0      	b.n	80113b2 <_dtoa_r+0xaba>
 80113d0:	9b00      	ldr	r3, [sp, #0]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	bfcc      	ite	gt
 80113d6:	461e      	movgt	r6, r3
 80113d8:	2601      	movle	r6, #1
 80113da:	4456      	add	r6, sl
 80113dc:	2700      	movs	r7, #0
 80113de:	4649      	mov	r1, r9
 80113e0:	2201      	movs	r2, #1
 80113e2:	4658      	mov	r0, fp
 80113e4:	f000 faee 	bl	80119c4 <__lshift>
 80113e8:	4621      	mov	r1, r4
 80113ea:	4681      	mov	r9, r0
 80113ec:	f000 fb56 	bl	8011a9c <__mcmp>
 80113f0:	2800      	cmp	r0, #0
 80113f2:	dcb0      	bgt.n	8011356 <_dtoa_r+0xa5e>
 80113f4:	d102      	bne.n	80113fc <_dtoa_r+0xb04>
 80113f6:	f018 0f01 	tst.w	r8, #1
 80113fa:	d1ac      	bne.n	8011356 <_dtoa_r+0xa5e>
 80113fc:	4633      	mov	r3, r6
 80113fe:	461e      	mov	r6, r3
 8011400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011404:	2a30      	cmp	r2, #48	@ 0x30
 8011406:	d0fa      	beq.n	80113fe <_dtoa_r+0xb06>
 8011408:	e5c2      	b.n	8010f90 <_dtoa_r+0x698>
 801140a:	459a      	cmp	sl, r3
 801140c:	d1a4      	bne.n	8011358 <_dtoa_r+0xa60>
 801140e:	9b04      	ldr	r3, [sp, #16]
 8011410:	3301      	adds	r3, #1
 8011412:	9304      	str	r3, [sp, #16]
 8011414:	2331      	movs	r3, #49	@ 0x31
 8011416:	f88a 3000 	strb.w	r3, [sl]
 801141a:	e5b9      	b.n	8010f90 <_dtoa_r+0x698>
 801141c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801141e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801147c <_dtoa_r+0xb84>
 8011422:	b11b      	cbz	r3, 801142c <_dtoa_r+0xb34>
 8011424:	f10a 0308 	add.w	r3, sl, #8
 8011428:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801142a:	6013      	str	r3, [r2, #0]
 801142c:	4650      	mov	r0, sl
 801142e:	b019      	add	sp, #100	@ 0x64
 8011430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011436:	2b01      	cmp	r3, #1
 8011438:	f77f ae37 	ble.w	80110aa <_dtoa_r+0x7b2>
 801143c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801143e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011440:	2001      	movs	r0, #1
 8011442:	e655      	b.n	80110f0 <_dtoa_r+0x7f8>
 8011444:	9b00      	ldr	r3, [sp, #0]
 8011446:	2b00      	cmp	r3, #0
 8011448:	f77f aed6 	ble.w	80111f8 <_dtoa_r+0x900>
 801144c:	4656      	mov	r6, sl
 801144e:	4621      	mov	r1, r4
 8011450:	4648      	mov	r0, r9
 8011452:	f7ff f9c9 	bl	80107e8 <quorem>
 8011456:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801145a:	f806 8b01 	strb.w	r8, [r6], #1
 801145e:	9b00      	ldr	r3, [sp, #0]
 8011460:	eba6 020a 	sub.w	r2, r6, sl
 8011464:	4293      	cmp	r3, r2
 8011466:	ddb3      	ble.n	80113d0 <_dtoa_r+0xad8>
 8011468:	4649      	mov	r1, r9
 801146a:	2300      	movs	r3, #0
 801146c:	220a      	movs	r2, #10
 801146e:	4658      	mov	r0, fp
 8011470:	f000 f8b2 	bl	80115d8 <__multadd>
 8011474:	4681      	mov	r9, r0
 8011476:	e7ea      	b.n	801144e <_dtoa_r+0xb56>
 8011478:	0801598f 	.word	0x0801598f
 801147c:	08015913 	.word	0x08015913

08011480 <_free_r>:
 8011480:	b538      	push	{r3, r4, r5, lr}
 8011482:	4605      	mov	r5, r0
 8011484:	2900      	cmp	r1, #0
 8011486:	d041      	beq.n	801150c <_free_r+0x8c>
 8011488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801148c:	1f0c      	subs	r4, r1, #4
 801148e:	2b00      	cmp	r3, #0
 8011490:	bfb8      	it	lt
 8011492:	18e4      	addlt	r4, r4, r3
 8011494:	f7fd ffe4 	bl	800f460 <__malloc_lock>
 8011498:	4a1d      	ldr	r2, [pc, #116]	@ (8011510 <_free_r+0x90>)
 801149a:	6813      	ldr	r3, [r2, #0]
 801149c:	b933      	cbnz	r3, 80114ac <_free_r+0x2c>
 801149e:	6063      	str	r3, [r4, #4]
 80114a0:	6014      	str	r4, [r2, #0]
 80114a2:	4628      	mov	r0, r5
 80114a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114a8:	f7fd bfe0 	b.w	800f46c <__malloc_unlock>
 80114ac:	42a3      	cmp	r3, r4
 80114ae:	d908      	bls.n	80114c2 <_free_r+0x42>
 80114b0:	6820      	ldr	r0, [r4, #0]
 80114b2:	1821      	adds	r1, r4, r0
 80114b4:	428b      	cmp	r3, r1
 80114b6:	bf01      	itttt	eq
 80114b8:	6819      	ldreq	r1, [r3, #0]
 80114ba:	685b      	ldreq	r3, [r3, #4]
 80114bc:	1809      	addeq	r1, r1, r0
 80114be:	6021      	streq	r1, [r4, #0]
 80114c0:	e7ed      	b.n	801149e <_free_r+0x1e>
 80114c2:	461a      	mov	r2, r3
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	b10b      	cbz	r3, 80114cc <_free_r+0x4c>
 80114c8:	42a3      	cmp	r3, r4
 80114ca:	d9fa      	bls.n	80114c2 <_free_r+0x42>
 80114cc:	6811      	ldr	r1, [r2, #0]
 80114ce:	1850      	adds	r0, r2, r1
 80114d0:	42a0      	cmp	r0, r4
 80114d2:	d10b      	bne.n	80114ec <_free_r+0x6c>
 80114d4:	6820      	ldr	r0, [r4, #0]
 80114d6:	4401      	add	r1, r0
 80114d8:	1850      	adds	r0, r2, r1
 80114da:	4283      	cmp	r3, r0
 80114dc:	6011      	str	r1, [r2, #0]
 80114de:	d1e0      	bne.n	80114a2 <_free_r+0x22>
 80114e0:	6818      	ldr	r0, [r3, #0]
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	6053      	str	r3, [r2, #4]
 80114e6:	4408      	add	r0, r1
 80114e8:	6010      	str	r0, [r2, #0]
 80114ea:	e7da      	b.n	80114a2 <_free_r+0x22>
 80114ec:	d902      	bls.n	80114f4 <_free_r+0x74>
 80114ee:	230c      	movs	r3, #12
 80114f0:	602b      	str	r3, [r5, #0]
 80114f2:	e7d6      	b.n	80114a2 <_free_r+0x22>
 80114f4:	6820      	ldr	r0, [r4, #0]
 80114f6:	1821      	adds	r1, r4, r0
 80114f8:	428b      	cmp	r3, r1
 80114fa:	bf04      	itt	eq
 80114fc:	6819      	ldreq	r1, [r3, #0]
 80114fe:	685b      	ldreq	r3, [r3, #4]
 8011500:	6063      	str	r3, [r4, #4]
 8011502:	bf04      	itt	eq
 8011504:	1809      	addeq	r1, r1, r0
 8011506:	6021      	streq	r1, [r4, #0]
 8011508:	6054      	str	r4, [r2, #4]
 801150a:	e7ca      	b.n	80114a2 <_free_r+0x22>
 801150c:	bd38      	pop	{r3, r4, r5, pc}
 801150e:	bf00      	nop
 8011510:	20002140 	.word	0x20002140

08011514 <_Balloc>:
 8011514:	b570      	push	{r4, r5, r6, lr}
 8011516:	69c6      	ldr	r6, [r0, #28]
 8011518:	4604      	mov	r4, r0
 801151a:	460d      	mov	r5, r1
 801151c:	b976      	cbnz	r6, 801153c <_Balloc+0x28>
 801151e:	2010      	movs	r0, #16
 8011520:	f7fd feec 	bl	800f2fc <malloc>
 8011524:	4602      	mov	r2, r0
 8011526:	61e0      	str	r0, [r4, #28]
 8011528:	b920      	cbnz	r0, 8011534 <_Balloc+0x20>
 801152a:	4b18      	ldr	r3, [pc, #96]	@ (801158c <_Balloc+0x78>)
 801152c:	4818      	ldr	r0, [pc, #96]	@ (8011590 <_Balloc+0x7c>)
 801152e:	216b      	movs	r1, #107	@ 0x6b
 8011530:	f002 faa2 	bl	8013a78 <__assert_func>
 8011534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011538:	6006      	str	r6, [r0, #0]
 801153a:	60c6      	str	r6, [r0, #12]
 801153c:	69e6      	ldr	r6, [r4, #28]
 801153e:	68f3      	ldr	r3, [r6, #12]
 8011540:	b183      	cbz	r3, 8011564 <_Balloc+0x50>
 8011542:	69e3      	ldr	r3, [r4, #28]
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801154a:	b9b8      	cbnz	r0, 801157c <_Balloc+0x68>
 801154c:	2101      	movs	r1, #1
 801154e:	fa01 f605 	lsl.w	r6, r1, r5
 8011552:	1d72      	adds	r2, r6, #5
 8011554:	0092      	lsls	r2, r2, #2
 8011556:	4620      	mov	r0, r4
 8011558:	f002 faac 	bl	8013ab4 <_calloc_r>
 801155c:	b160      	cbz	r0, 8011578 <_Balloc+0x64>
 801155e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011562:	e00e      	b.n	8011582 <_Balloc+0x6e>
 8011564:	2221      	movs	r2, #33	@ 0x21
 8011566:	2104      	movs	r1, #4
 8011568:	4620      	mov	r0, r4
 801156a:	f002 faa3 	bl	8013ab4 <_calloc_r>
 801156e:	69e3      	ldr	r3, [r4, #28]
 8011570:	60f0      	str	r0, [r6, #12]
 8011572:	68db      	ldr	r3, [r3, #12]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d1e4      	bne.n	8011542 <_Balloc+0x2e>
 8011578:	2000      	movs	r0, #0
 801157a:	bd70      	pop	{r4, r5, r6, pc}
 801157c:	6802      	ldr	r2, [r0, #0]
 801157e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011582:	2300      	movs	r3, #0
 8011584:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011588:	e7f7      	b.n	801157a <_Balloc+0x66>
 801158a:	bf00      	nop
 801158c:	08015920 	.word	0x08015920
 8011590:	080159a0 	.word	0x080159a0

08011594 <_Bfree>:
 8011594:	b570      	push	{r4, r5, r6, lr}
 8011596:	69c6      	ldr	r6, [r0, #28]
 8011598:	4605      	mov	r5, r0
 801159a:	460c      	mov	r4, r1
 801159c:	b976      	cbnz	r6, 80115bc <_Bfree+0x28>
 801159e:	2010      	movs	r0, #16
 80115a0:	f7fd feac 	bl	800f2fc <malloc>
 80115a4:	4602      	mov	r2, r0
 80115a6:	61e8      	str	r0, [r5, #28]
 80115a8:	b920      	cbnz	r0, 80115b4 <_Bfree+0x20>
 80115aa:	4b09      	ldr	r3, [pc, #36]	@ (80115d0 <_Bfree+0x3c>)
 80115ac:	4809      	ldr	r0, [pc, #36]	@ (80115d4 <_Bfree+0x40>)
 80115ae:	218f      	movs	r1, #143	@ 0x8f
 80115b0:	f002 fa62 	bl	8013a78 <__assert_func>
 80115b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80115b8:	6006      	str	r6, [r0, #0]
 80115ba:	60c6      	str	r6, [r0, #12]
 80115bc:	b13c      	cbz	r4, 80115ce <_Bfree+0x3a>
 80115be:	69eb      	ldr	r3, [r5, #28]
 80115c0:	6862      	ldr	r2, [r4, #4]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80115c8:	6021      	str	r1, [r4, #0]
 80115ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80115ce:	bd70      	pop	{r4, r5, r6, pc}
 80115d0:	08015920 	.word	0x08015920
 80115d4:	080159a0 	.word	0x080159a0

080115d8 <__multadd>:
 80115d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115dc:	690d      	ldr	r5, [r1, #16]
 80115de:	4607      	mov	r7, r0
 80115e0:	460c      	mov	r4, r1
 80115e2:	461e      	mov	r6, r3
 80115e4:	f101 0c14 	add.w	ip, r1, #20
 80115e8:	2000      	movs	r0, #0
 80115ea:	f8dc 3000 	ldr.w	r3, [ip]
 80115ee:	b299      	uxth	r1, r3
 80115f0:	fb02 6101 	mla	r1, r2, r1, r6
 80115f4:	0c1e      	lsrs	r6, r3, #16
 80115f6:	0c0b      	lsrs	r3, r1, #16
 80115f8:	fb02 3306 	mla	r3, r2, r6, r3
 80115fc:	b289      	uxth	r1, r1
 80115fe:	3001      	adds	r0, #1
 8011600:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011604:	4285      	cmp	r5, r0
 8011606:	f84c 1b04 	str.w	r1, [ip], #4
 801160a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801160e:	dcec      	bgt.n	80115ea <__multadd+0x12>
 8011610:	b30e      	cbz	r6, 8011656 <__multadd+0x7e>
 8011612:	68a3      	ldr	r3, [r4, #8]
 8011614:	42ab      	cmp	r3, r5
 8011616:	dc19      	bgt.n	801164c <__multadd+0x74>
 8011618:	6861      	ldr	r1, [r4, #4]
 801161a:	4638      	mov	r0, r7
 801161c:	3101      	adds	r1, #1
 801161e:	f7ff ff79 	bl	8011514 <_Balloc>
 8011622:	4680      	mov	r8, r0
 8011624:	b928      	cbnz	r0, 8011632 <__multadd+0x5a>
 8011626:	4602      	mov	r2, r0
 8011628:	4b0c      	ldr	r3, [pc, #48]	@ (801165c <__multadd+0x84>)
 801162a:	480d      	ldr	r0, [pc, #52]	@ (8011660 <__multadd+0x88>)
 801162c:	21ba      	movs	r1, #186	@ 0xba
 801162e:	f002 fa23 	bl	8013a78 <__assert_func>
 8011632:	6922      	ldr	r2, [r4, #16]
 8011634:	3202      	adds	r2, #2
 8011636:	f104 010c 	add.w	r1, r4, #12
 801163a:	0092      	lsls	r2, r2, #2
 801163c:	300c      	adds	r0, #12
 801163e:	f7ff f8b2 	bl	80107a6 <memcpy>
 8011642:	4621      	mov	r1, r4
 8011644:	4638      	mov	r0, r7
 8011646:	f7ff ffa5 	bl	8011594 <_Bfree>
 801164a:	4644      	mov	r4, r8
 801164c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011650:	3501      	adds	r5, #1
 8011652:	615e      	str	r6, [r3, #20]
 8011654:	6125      	str	r5, [r4, #16]
 8011656:	4620      	mov	r0, r4
 8011658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801165c:	0801598f 	.word	0x0801598f
 8011660:	080159a0 	.word	0x080159a0

08011664 <__s2b>:
 8011664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011668:	460c      	mov	r4, r1
 801166a:	4615      	mov	r5, r2
 801166c:	461f      	mov	r7, r3
 801166e:	2209      	movs	r2, #9
 8011670:	3308      	adds	r3, #8
 8011672:	4606      	mov	r6, r0
 8011674:	fb93 f3f2 	sdiv	r3, r3, r2
 8011678:	2100      	movs	r1, #0
 801167a:	2201      	movs	r2, #1
 801167c:	429a      	cmp	r2, r3
 801167e:	db09      	blt.n	8011694 <__s2b+0x30>
 8011680:	4630      	mov	r0, r6
 8011682:	f7ff ff47 	bl	8011514 <_Balloc>
 8011686:	b940      	cbnz	r0, 801169a <__s2b+0x36>
 8011688:	4602      	mov	r2, r0
 801168a:	4b19      	ldr	r3, [pc, #100]	@ (80116f0 <__s2b+0x8c>)
 801168c:	4819      	ldr	r0, [pc, #100]	@ (80116f4 <__s2b+0x90>)
 801168e:	21d3      	movs	r1, #211	@ 0xd3
 8011690:	f002 f9f2 	bl	8013a78 <__assert_func>
 8011694:	0052      	lsls	r2, r2, #1
 8011696:	3101      	adds	r1, #1
 8011698:	e7f0      	b.n	801167c <__s2b+0x18>
 801169a:	9b08      	ldr	r3, [sp, #32]
 801169c:	6143      	str	r3, [r0, #20]
 801169e:	2d09      	cmp	r5, #9
 80116a0:	f04f 0301 	mov.w	r3, #1
 80116a4:	6103      	str	r3, [r0, #16]
 80116a6:	dd16      	ble.n	80116d6 <__s2b+0x72>
 80116a8:	f104 0909 	add.w	r9, r4, #9
 80116ac:	46c8      	mov	r8, r9
 80116ae:	442c      	add	r4, r5
 80116b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80116b4:	4601      	mov	r1, r0
 80116b6:	3b30      	subs	r3, #48	@ 0x30
 80116b8:	220a      	movs	r2, #10
 80116ba:	4630      	mov	r0, r6
 80116bc:	f7ff ff8c 	bl	80115d8 <__multadd>
 80116c0:	45a0      	cmp	r8, r4
 80116c2:	d1f5      	bne.n	80116b0 <__s2b+0x4c>
 80116c4:	f1a5 0408 	sub.w	r4, r5, #8
 80116c8:	444c      	add	r4, r9
 80116ca:	1b2d      	subs	r5, r5, r4
 80116cc:	1963      	adds	r3, r4, r5
 80116ce:	42bb      	cmp	r3, r7
 80116d0:	db04      	blt.n	80116dc <__s2b+0x78>
 80116d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116d6:	340a      	adds	r4, #10
 80116d8:	2509      	movs	r5, #9
 80116da:	e7f6      	b.n	80116ca <__s2b+0x66>
 80116dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80116e0:	4601      	mov	r1, r0
 80116e2:	3b30      	subs	r3, #48	@ 0x30
 80116e4:	220a      	movs	r2, #10
 80116e6:	4630      	mov	r0, r6
 80116e8:	f7ff ff76 	bl	80115d8 <__multadd>
 80116ec:	e7ee      	b.n	80116cc <__s2b+0x68>
 80116ee:	bf00      	nop
 80116f0:	0801598f 	.word	0x0801598f
 80116f4:	080159a0 	.word	0x080159a0

080116f8 <__hi0bits>:
 80116f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80116fc:	4603      	mov	r3, r0
 80116fe:	bf36      	itet	cc
 8011700:	0403      	lslcc	r3, r0, #16
 8011702:	2000      	movcs	r0, #0
 8011704:	2010      	movcc	r0, #16
 8011706:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801170a:	bf3c      	itt	cc
 801170c:	021b      	lslcc	r3, r3, #8
 801170e:	3008      	addcc	r0, #8
 8011710:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011714:	bf3c      	itt	cc
 8011716:	011b      	lslcc	r3, r3, #4
 8011718:	3004      	addcc	r0, #4
 801171a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801171e:	bf3c      	itt	cc
 8011720:	009b      	lslcc	r3, r3, #2
 8011722:	3002      	addcc	r0, #2
 8011724:	2b00      	cmp	r3, #0
 8011726:	db05      	blt.n	8011734 <__hi0bits+0x3c>
 8011728:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801172c:	f100 0001 	add.w	r0, r0, #1
 8011730:	bf08      	it	eq
 8011732:	2020      	moveq	r0, #32
 8011734:	4770      	bx	lr

08011736 <__lo0bits>:
 8011736:	6803      	ldr	r3, [r0, #0]
 8011738:	4602      	mov	r2, r0
 801173a:	f013 0007 	ands.w	r0, r3, #7
 801173e:	d00b      	beq.n	8011758 <__lo0bits+0x22>
 8011740:	07d9      	lsls	r1, r3, #31
 8011742:	d421      	bmi.n	8011788 <__lo0bits+0x52>
 8011744:	0798      	lsls	r0, r3, #30
 8011746:	bf49      	itett	mi
 8011748:	085b      	lsrmi	r3, r3, #1
 801174a:	089b      	lsrpl	r3, r3, #2
 801174c:	2001      	movmi	r0, #1
 801174e:	6013      	strmi	r3, [r2, #0]
 8011750:	bf5c      	itt	pl
 8011752:	6013      	strpl	r3, [r2, #0]
 8011754:	2002      	movpl	r0, #2
 8011756:	4770      	bx	lr
 8011758:	b299      	uxth	r1, r3
 801175a:	b909      	cbnz	r1, 8011760 <__lo0bits+0x2a>
 801175c:	0c1b      	lsrs	r3, r3, #16
 801175e:	2010      	movs	r0, #16
 8011760:	b2d9      	uxtb	r1, r3
 8011762:	b909      	cbnz	r1, 8011768 <__lo0bits+0x32>
 8011764:	3008      	adds	r0, #8
 8011766:	0a1b      	lsrs	r3, r3, #8
 8011768:	0719      	lsls	r1, r3, #28
 801176a:	bf04      	itt	eq
 801176c:	091b      	lsreq	r3, r3, #4
 801176e:	3004      	addeq	r0, #4
 8011770:	0799      	lsls	r1, r3, #30
 8011772:	bf04      	itt	eq
 8011774:	089b      	lsreq	r3, r3, #2
 8011776:	3002      	addeq	r0, #2
 8011778:	07d9      	lsls	r1, r3, #31
 801177a:	d403      	bmi.n	8011784 <__lo0bits+0x4e>
 801177c:	085b      	lsrs	r3, r3, #1
 801177e:	f100 0001 	add.w	r0, r0, #1
 8011782:	d003      	beq.n	801178c <__lo0bits+0x56>
 8011784:	6013      	str	r3, [r2, #0]
 8011786:	4770      	bx	lr
 8011788:	2000      	movs	r0, #0
 801178a:	4770      	bx	lr
 801178c:	2020      	movs	r0, #32
 801178e:	4770      	bx	lr

08011790 <__i2b>:
 8011790:	b510      	push	{r4, lr}
 8011792:	460c      	mov	r4, r1
 8011794:	2101      	movs	r1, #1
 8011796:	f7ff febd 	bl	8011514 <_Balloc>
 801179a:	4602      	mov	r2, r0
 801179c:	b928      	cbnz	r0, 80117aa <__i2b+0x1a>
 801179e:	4b05      	ldr	r3, [pc, #20]	@ (80117b4 <__i2b+0x24>)
 80117a0:	4805      	ldr	r0, [pc, #20]	@ (80117b8 <__i2b+0x28>)
 80117a2:	f240 1145 	movw	r1, #325	@ 0x145
 80117a6:	f002 f967 	bl	8013a78 <__assert_func>
 80117aa:	2301      	movs	r3, #1
 80117ac:	6144      	str	r4, [r0, #20]
 80117ae:	6103      	str	r3, [r0, #16]
 80117b0:	bd10      	pop	{r4, pc}
 80117b2:	bf00      	nop
 80117b4:	0801598f 	.word	0x0801598f
 80117b8:	080159a0 	.word	0x080159a0

080117bc <__multiply>:
 80117bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c0:	4614      	mov	r4, r2
 80117c2:	690a      	ldr	r2, [r1, #16]
 80117c4:	6923      	ldr	r3, [r4, #16]
 80117c6:	429a      	cmp	r2, r3
 80117c8:	bfa8      	it	ge
 80117ca:	4623      	movge	r3, r4
 80117cc:	460f      	mov	r7, r1
 80117ce:	bfa4      	itt	ge
 80117d0:	460c      	movge	r4, r1
 80117d2:	461f      	movge	r7, r3
 80117d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80117d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80117dc:	68a3      	ldr	r3, [r4, #8]
 80117de:	6861      	ldr	r1, [r4, #4]
 80117e0:	eb0a 0609 	add.w	r6, sl, r9
 80117e4:	42b3      	cmp	r3, r6
 80117e6:	b085      	sub	sp, #20
 80117e8:	bfb8      	it	lt
 80117ea:	3101      	addlt	r1, #1
 80117ec:	f7ff fe92 	bl	8011514 <_Balloc>
 80117f0:	b930      	cbnz	r0, 8011800 <__multiply+0x44>
 80117f2:	4602      	mov	r2, r0
 80117f4:	4b44      	ldr	r3, [pc, #272]	@ (8011908 <__multiply+0x14c>)
 80117f6:	4845      	ldr	r0, [pc, #276]	@ (801190c <__multiply+0x150>)
 80117f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80117fc:	f002 f93c 	bl	8013a78 <__assert_func>
 8011800:	f100 0514 	add.w	r5, r0, #20
 8011804:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011808:	462b      	mov	r3, r5
 801180a:	2200      	movs	r2, #0
 801180c:	4543      	cmp	r3, r8
 801180e:	d321      	bcc.n	8011854 <__multiply+0x98>
 8011810:	f107 0114 	add.w	r1, r7, #20
 8011814:	f104 0214 	add.w	r2, r4, #20
 8011818:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801181c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011820:	9302      	str	r3, [sp, #8]
 8011822:	1b13      	subs	r3, r2, r4
 8011824:	3b15      	subs	r3, #21
 8011826:	f023 0303 	bic.w	r3, r3, #3
 801182a:	3304      	adds	r3, #4
 801182c:	f104 0715 	add.w	r7, r4, #21
 8011830:	42ba      	cmp	r2, r7
 8011832:	bf38      	it	cc
 8011834:	2304      	movcc	r3, #4
 8011836:	9301      	str	r3, [sp, #4]
 8011838:	9b02      	ldr	r3, [sp, #8]
 801183a:	9103      	str	r1, [sp, #12]
 801183c:	428b      	cmp	r3, r1
 801183e:	d80c      	bhi.n	801185a <__multiply+0x9e>
 8011840:	2e00      	cmp	r6, #0
 8011842:	dd03      	ble.n	801184c <__multiply+0x90>
 8011844:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011848:	2b00      	cmp	r3, #0
 801184a:	d05b      	beq.n	8011904 <__multiply+0x148>
 801184c:	6106      	str	r6, [r0, #16]
 801184e:	b005      	add	sp, #20
 8011850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011854:	f843 2b04 	str.w	r2, [r3], #4
 8011858:	e7d8      	b.n	801180c <__multiply+0x50>
 801185a:	f8b1 a000 	ldrh.w	sl, [r1]
 801185e:	f1ba 0f00 	cmp.w	sl, #0
 8011862:	d024      	beq.n	80118ae <__multiply+0xf2>
 8011864:	f104 0e14 	add.w	lr, r4, #20
 8011868:	46a9      	mov	r9, r5
 801186a:	f04f 0c00 	mov.w	ip, #0
 801186e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011872:	f8d9 3000 	ldr.w	r3, [r9]
 8011876:	fa1f fb87 	uxth.w	fp, r7
 801187a:	b29b      	uxth	r3, r3
 801187c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011880:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011884:	f8d9 7000 	ldr.w	r7, [r9]
 8011888:	4463      	add	r3, ip
 801188a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801188e:	fb0a c70b 	mla	r7, sl, fp, ip
 8011892:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011896:	b29b      	uxth	r3, r3
 8011898:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801189c:	4572      	cmp	r2, lr
 801189e:	f849 3b04 	str.w	r3, [r9], #4
 80118a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80118a6:	d8e2      	bhi.n	801186e <__multiply+0xb2>
 80118a8:	9b01      	ldr	r3, [sp, #4]
 80118aa:	f845 c003 	str.w	ip, [r5, r3]
 80118ae:	9b03      	ldr	r3, [sp, #12]
 80118b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80118b4:	3104      	adds	r1, #4
 80118b6:	f1b9 0f00 	cmp.w	r9, #0
 80118ba:	d021      	beq.n	8011900 <__multiply+0x144>
 80118bc:	682b      	ldr	r3, [r5, #0]
 80118be:	f104 0c14 	add.w	ip, r4, #20
 80118c2:	46ae      	mov	lr, r5
 80118c4:	f04f 0a00 	mov.w	sl, #0
 80118c8:	f8bc b000 	ldrh.w	fp, [ip]
 80118cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80118d0:	fb09 770b 	mla	r7, r9, fp, r7
 80118d4:	4457      	add	r7, sl
 80118d6:	b29b      	uxth	r3, r3
 80118d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80118dc:	f84e 3b04 	str.w	r3, [lr], #4
 80118e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80118e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118e8:	f8be 3000 	ldrh.w	r3, [lr]
 80118ec:	fb09 330a 	mla	r3, r9, sl, r3
 80118f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80118f4:	4562      	cmp	r2, ip
 80118f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118fa:	d8e5      	bhi.n	80118c8 <__multiply+0x10c>
 80118fc:	9f01      	ldr	r7, [sp, #4]
 80118fe:	51eb      	str	r3, [r5, r7]
 8011900:	3504      	adds	r5, #4
 8011902:	e799      	b.n	8011838 <__multiply+0x7c>
 8011904:	3e01      	subs	r6, #1
 8011906:	e79b      	b.n	8011840 <__multiply+0x84>
 8011908:	0801598f 	.word	0x0801598f
 801190c:	080159a0 	.word	0x080159a0

08011910 <__pow5mult>:
 8011910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011914:	4615      	mov	r5, r2
 8011916:	f012 0203 	ands.w	r2, r2, #3
 801191a:	4607      	mov	r7, r0
 801191c:	460e      	mov	r6, r1
 801191e:	d007      	beq.n	8011930 <__pow5mult+0x20>
 8011920:	4c25      	ldr	r4, [pc, #148]	@ (80119b8 <__pow5mult+0xa8>)
 8011922:	3a01      	subs	r2, #1
 8011924:	2300      	movs	r3, #0
 8011926:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801192a:	f7ff fe55 	bl	80115d8 <__multadd>
 801192e:	4606      	mov	r6, r0
 8011930:	10ad      	asrs	r5, r5, #2
 8011932:	d03d      	beq.n	80119b0 <__pow5mult+0xa0>
 8011934:	69fc      	ldr	r4, [r7, #28]
 8011936:	b97c      	cbnz	r4, 8011958 <__pow5mult+0x48>
 8011938:	2010      	movs	r0, #16
 801193a:	f7fd fcdf 	bl	800f2fc <malloc>
 801193e:	4602      	mov	r2, r0
 8011940:	61f8      	str	r0, [r7, #28]
 8011942:	b928      	cbnz	r0, 8011950 <__pow5mult+0x40>
 8011944:	4b1d      	ldr	r3, [pc, #116]	@ (80119bc <__pow5mult+0xac>)
 8011946:	481e      	ldr	r0, [pc, #120]	@ (80119c0 <__pow5mult+0xb0>)
 8011948:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801194c:	f002 f894 	bl	8013a78 <__assert_func>
 8011950:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011954:	6004      	str	r4, [r0, #0]
 8011956:	60c4      	str	r4, [r0, #12]
 8011958:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801195c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011960:	b94c      	cbnz	r4, 8011976 <__pow5mult+0x66>
 8011962:	f240 2171 	movw	r1, #625	@ 0x271
 8011966:	4638      	mov	r0, r7
 8011968:	f7ff ff12 	bl	8011790 <__i2b>
 801196c:	2300      	movs	r3, #0
 801196e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011972:	4604      	mov	r4, r0
 8011974:	6003      	str	r3, [r0, #0]
 8011976:	f04f 0900 	mov.w	r9, #0
 801197a:	07eb      	lsls	r3, r5, #31
 801197c:	d50a      	bpl.n	8011994 <__pow5mult+0x84>
 801197e:	4631      	mov	r1, r6
 8011980:	4622      	mov	r2, r4
 8011982:	4638      	mov	r0, r7
 8011984:	f7ff ff1a 	bl	80117bc <__multiply>
 8011988:	4631      	mov	r1, r6
 801198a:	4680      	mov	r8, r0
 801198c:	4638      	mov	r0, r7
 801198e:	f7ff fe01 	bl	8011594 <_Bfree>
 8011992:	4646      	mov	r6, r8
 8011994:	106d      	asrs	r5, r5, #1
 8011996:	d00b      	beq.n	80119b0 <__pow5mult+0xa0>
 8011998:	6820      	ldr	r0, [r4, #0]
 801199a:	b938      	cbnz	r0, 80119ac <__pow5mult+0x9c>
 801199c:	4622      	mov	r2, r4
 801199e:	4621      	mov	r1, r4
 80119a0:	4638      	mov	r0, r7
 80119a2:	f7ff ff0b 	bl	80117bc <__multiply>
 80119a6:	6020      	str	r0, [r4, #0]
 80119a8:	f8c0 9000 	str.w	r9, [r0]
 80119ac:	4604      	mov	r4, r0
 80119ae:	e7e4      	b.n	801197a <__pow5mult+0x6a>
 80119b0:	4630      	mov	r0, r6
 80119b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119b6:	bf00      	nop
 80119b8:	080159fc 	.word	0x080159fc
 80119bc:	08015920 	.word	0x08015920
 80119c0:	080159a0 	.word	0x080159a0

080119c4 <__lshift>:
 80119c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119c8:	460c      	mov	r4, r1
 80119ca:	6849      	ldr	r1, [r1, #4]
 80119cc:	6923      	ldr	r3, [r4, #16]
 80119ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80119d2:	68a3      	ldr	r3, [r4, #8]
 80119d4:	4607      	mov	r7, r0
 80119d6:	4691      	mov	r9, r2
 80119d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80119dc:	f108 0601 	add.w	r6, r8, #1
 80119e0:	42b3      	cmp	r3, r6
 80119e2:	db0b      	blt.n	80119fc <__lshift+0x38>
 80119e4:	4638      	mov	r0, r7
 80119e6:	f7ff fd95 	bl	8011514 <_Balloc>
 80119ea:	4605      	mov	r5, r0
 80119ec:	b948      	cbnz	r0, 8011a02 <__lshift+0x3e>
 80119ee:	4602      	mov	r2, r0
 80119f0:	4b28      	ldr	r3, [pc, #160]	@ (8011a94 <__lshift+0xd0>)
 80119f2:	4829      	ldr	r0, [pc, #164]	@ (8011a98 <__lshift+0xd4>)
 80119f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80119f8:	f002 f83e 	bl	8013a78 <__assert_func>
 80119fc:	3101      	adds	r1, #1
 80119fe:	005b      	lsls	r3, r3, #1
 8011a00:	e7ee      	b.n	80119e0 <__lshift+0x1c>
 8011a02:	2300      	movs	r3, #0
 8011a04:	f100 0114 	add.w	r1, r0, #20
 8011a08:	f100 0210 	add.w	r2, r0, #16
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	4553      	cmp	r3, sl
 8011a10:	db33      	blt.n	8011a7a <__lshift+0xb6>
 8011a12:	6920      	ldr	r0, [r4, #16]
 8011a14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011a18:	f104 0314 	add.w	r3, r4, #20
 8011a1c:	f019 091f 	ands.w	r9, r9, #31
 8011a20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011a28:	d02b      	beq.n	8011a82 <__lshift+0xbe>
 8011a2a:	f1c9 0e20 	rsb	lr, r9, #32
 8011a2e:	468a      	mov	sl, r1
 8011a30:	2200      	movs	r2, #0
 8011a32:	6818      	ldr	r0, [r3, #0]
 8011a34:	fa00 f009 	lsl.w	r0, r0, r9
 8011a38:	4310      	orrs	r0, r2
 8011a3a:	f84a 0b04 	str.w	r0, [sl], #4
 8011a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a42:	459c      	cmp	ip, r3
 8011a44:	fa22 f20e 	lsr.w	r2, r2, lr
 8011a48:	d8f3      	bhi.n	8011a32 <__lshift+0x6e>
 8011a4a:	ebac 0304 	sub.w	r3, ip, r4
 8011a4e:	3b15      	subs	r3, #21
 8011a50:	f023 0303 	bic.w	r3, r3, #3
 8011a54:	3304      	adds	r3, #4
 8011a56:	f104 0015 	add.w	r0, r4, #21
 8011a5a:	4584      	cmp	ip, r0
 8011a5c:	bf38      	it	cc
 8011a5e:	2304      	movcc	r3, #4
 8011a60:	50ca      	str	r2, [r1, r3]
 8011a62:	b10a      	cbz	r2, 8011a68 <__lshift+0xa4>
 8011a64:	f108 0602 	add.w	r6, r8, #2
 8011a68:	3e01      	subs	r6, #1
 8011a6a:	4638      	mov	r0, r7
 8011a6c:	612e      	str	r6, [r5, #16]
 8011a6e:	4621      	mov	r1, r4
 8011a70:	f7ff fd90 	bl	8011594 <_Bfree>
 8011a74:	4628      	mov	r0, r5
 8011a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a7e:	3301      	adds	r3, #1
 8011a80:	e7c5      	b.n	8011a0e <__lshift+0x4a>
 8011a82:	3904      	subs	r1, #4
 8011a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a88:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a8c:	459c      	cmp	ip, r3
 8011a8e:	d8f9      	bhi.n	8011a84 <__lshift+0xc0>
 8011a90:	e7ea      	b.n	8011a68 <__lshift+0xa4>
 8011a92:	bf00      	nop
 8011a94:	0801598f 	.word	0x0801598f
 8011a98:	080159a0 	.word	0x080159a0

08011a9c <__mcmp>:
 8011a9c:	690a      	ldr	r2, [r1, #16]
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	6900      	ldr	r0, [r0, #16]
 8011aa2:	1a80      	subs	r0, r0, r2
 8011aa4:	b530      	push	{r4, r5, lr}
 8011aa6:	d10e      	bne.n	8011ac6 <__mcmp+0x2a>
 8011aa8:	3314      	adds	r3, #20
 8011aaa:	3114      	adds	r1, #20
 8011aac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011ab0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011ab4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011ab8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011abc:	4295      	cmp	r5, r2
 8011abe:	d003      	beq.n	8011ac8 <__mcmp+0x2c>
 8011ac0:	d205      	bcs.n	8011ace <__mcmp+0x32>
 8011ac2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ac6:	bd30      	pop	{r4, r5, pc}
 8011ac8:	42a3      	cmp	r3, r4
 8011aca:	d3f3      	bcc.n	8011ab4 <__mcmp+0x18>
 8011acc:	e7fb      	b.n	8011ac6 <__mcmp+0x2a>
 8011ace:	2001      	movs	r0, #1
 8011ad0:	e7f9      	b.n	8011ac6 <__mcmp+0x2a>
	...

08011ad4 <__mdiff>:
 8011ad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad8:	4689      	mov	r9, r1
 8011ada:	4606      	mov	r6, r0
 8011adc:	4611      	mov	r1, r2
 8011ade:	4648      	mov	r0, r9
 8011ae0:	4614      	mov	r4, r2
 8011ae2:	f7ff ffdb 	bl	8011a9c <__mcmp>
 8011ae6:	1e05      	subs	r5, r0, #0
 8011ae8:	d112      	bne.n	8011b10 <__mdiff+0x3c>
 8011aea:	4629      	mov	r1, r5
 8011aec:	4630      	mov	r0, r6
 8011aee:	f7ff fd11 	bl	8011514 <_Balloc>
 8011af2:	4602      	mov	r2, r0
 8011af4:	b928      	cbnz	r0, 8011b02 <__mdiff+0x2e>
 8011af6:	4b3f      	ldr	r3, [pc, #252]	@ (8011bf4 <__mdiff+0x120>)
 8011af8:	f240 2137 	movw	r1, #567	@ 0x237
 8011afc:	483e      	ldr	r0, [pc, #248]	@ (8011bf8 <__mdiff+0x124>)
 8011afe:	f001 ffbb 	bl	8013a78 <__assert_func>
 8011b02:	2301      	movs	r3, #1
 8011b04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011b08:	4610      	mov	r0, r2
 8011b0a:	b003      	add	sp, #12
 8011b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b10:	bfbc      	itt	lt
 8011b12:	464b      	movlt	r3, r9
 8011b14:	46a1      	movlt	r9, r4
 8011b16:	4630      	mov	r0, r6
 8011b18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011b1c:	bfba      	itte	lt
 8011b1e:	461c      	movlt	r4, r3
 8011b20:	2501      	movlt	r5, #1
 8011b22:	2500      	movge	r5, #0
 8011b24:	f7ff fcf6 	bl	8011514 <_Balloc>
 8011b28:	4602      	mov	r2, r0
 8011b2a:	b918      	cbnz	r0, 8011b34 <__mdiff+0x60>
 8011b2c:	4b31      	ldr	r3, [pc, #196]	@ (8011bf4 <__mdiff+0x120>)
 8011b2e:	f240 2145 	movw	r1, #581	@ 0x245
 8011b32:	e7e3      	b.n	8011afc <__mdiff+0x28>
 8011b34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011b38:	6926      	ldr	r6, [r4, #16]
 8011b3a:	60c5      	str	r5, [r0, #12]
 8011b3c:	f109 0310 	add.w	r3, r9, #16
 8011b40:	f109 0514 	add.w	r5, r9, #20
 8011b44:	f104 0e14 	add.w	lr, r4, #20
 8011b48:	f100 0b14 	add.w	fp, r0, #20
 8011b4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011b50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011b54:	9301      	str	r3, [sp, #4]
 8011b56:	46d9      	mov	r9, fp
 8011b58:	f04f 0c00 	mov.w	ip, #0
 8011b5c:	9b01      	ldr	r3, [sp, #4]
 8011b5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011b62:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011b66:	9301      	str	r3, [sp, #4]
 8011b68:	fa1f f38a 	uxth.w	r3, sl
 8011b6c:	4619      	mov	r1, r3
 8011b6e:	b283      	uxth	r3, r0
 8011b70:	1acb      	subs	r3, r1, r3
 8011b72:	0c00      	lsrs	r0, r0, #16
 8011b74:	4463      	add	r3, ip
 8011b76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011b7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011b84:	4576      	cmp	r6, lr
 8011b86:	f849 3b04 	str.w	r3, [r9], #4
 8011b8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b8e:	d8e5      	bhi.n	8011b5c <__mdiff+0x88>
 8011b90:	1b33      	subs	r3, r6, r4
 8011b92:	3b15      	subs	r3, #21
 8011b94:	f023 0303 	bic.w	r3, r3, #3
 8011b98:	3415      	adds	r4, #21
 8011b9a:	3304      	adds	r3, #4
 8011b9c:	42a6      	cmp	r6, r4
 8011b9e:	bf38      	it	cc
 8011ba0:	2304      	movcc	r3, #4
 8011ba2:	441d      	add	r5, r3
 8011ba4:	445b      	add	r3, fp
 8011ba6:	461e      	mov	r6, r3
 8011ba8:	462c      	mov	r4, r5
 8011baa:	4544      	cmp	r4, r8
 8011bac:	d30e      	bcc.n	8011bcc <__mdiff+0xf8>
 8011bae:	f108 0103 	add.w	r1, r8, #3
 8011bb2:	1b49      	subs	r1, r1, r5
 8011bb4:	f021 0103 	bic.w	r1, r1, #3
 8011bb8:	3d03      	subs	r5, #3
 8011bba:	45a8      	cmp	r8, r5
 8011bbc:	bf38      	it	cc
 8011bbe:	2100      	movcc	r1, #0
 8011bc0:	440b      	add	r3, r1
 8011bc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011bc6:	b191      	cbz	r1, 8011bee <__mdiff+0x11a>
 8011bc8:	6117      	str	r7, [r2, #16]
 8011bca:	e79d      	b.n	8011b08 <__mdiff+0x34>
 8011bcc:	f854 1b04 	ldr.w	r1, [r4], #4
 8011bd0:	46e6      	mov	lr, ip
 8011bd2:	0c08      	lsrs	r0, r1, #16
 8011bd4:	fa1c fc81 	uxtah	ip, ip, r1
 8011bd8:	4471      	add	r1, lr
 8011bda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011bde:	b289      	uxth	r1, r1
 8011be0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011be4:	f846 1b04 	str.w	r1, [r6], #4
 8011be8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011bec:	e7dd      	b.n	8011baa <__mdiff+0xd6>
 8011bee:	3f01      	subs	r7, #1
 8011bf0:	e7e7      	b.n	8011bc2 <__mdiff+0xee>
 8011bf2:	bf00      	nop
 8011bf4:	0801598f 	.word	0x0801598f
 8011bf8:	080159a0 	.word	0x080159a0

08011bfc <__ulp>:
 8011bfc:	b082      	sub	sp, #8
 8011bfe:	ed8d 0b00 	vstr	d0, [sp]
 8011c02:	9a01      	ldr	r2, [sp, #4]
 8011c04:	4b0f      	ldr	r3, [pc, #60]	@ (8011c44 <__ulp+0x48>)
 8011c06:	4013      	ands	r3, r2
 8011c08:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	dc08      	bgt.n	8011c22 <__ulp+0x26>
 8011c10:	425b      	negs	r3, r3
 8011c12:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011c16:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011c1a:	da04      	bge.n	8011c26 <__ulp+0x2a>
 8011c1c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011c20:	4113      	asrs	r3, r2
 8011c22:	2200      	movs	r2, #0
 8011c24:	e008      	b.n	8011c38 <__ulp+0x3c>
 8011c26:	f1a2 0314 	sub.w	r3, r2, #20
 8011c2a:	2b1e      	cmp	r3, #30
 8011c2c:	bfda      	itte	le
 8011c2e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011c32:	40da      	lsrle	r2, r3
 8011c34:	2201      	movgt	r2, #1
 8011c36:	2300      	movs	r3, #0
 8011c38:	4619      	mov	r1, r3
 8011c3a:	4610      	mov	r0, r2
 8011c3c:	ec41 0b10 	vmov	d0, r0, r1
 8011c40:	b002      	add	sp, #8
 8011c42:	4770      	bx	lr
 8011c44:	7ff00000 	.word	0x7ff00000

08011c48 <__b2d>:
 8011c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c4c:	6906      	ldr	r6, [r0, #16]
 8011c4e:	f100 0814 	add.w	r8, r0, #20
 8011c52:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011c56:	1f37      	subs	r7, r6, #4
 8011c58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011c5c:	4610      	mov	r0, r2
 8011c5e:	f7ff fd4b 	bl	80116f8 <__hi0bits>
 8011c62:	f1c0 0320 	rsb	r3, r0, #32
 8011c66:	280a      	cmp	r0, #10
 8011c68:	600b      	str	r3, [r1, #0]
 8011c6a:	491b      	ldr	r1, [pc, #108]	@ (8011cd8 <__b2d+0x90>)
 8011c6c:	dc15      	bgt.n	8011c9a <__b2d+0x52>
 8011c6e:	f1c0 0c0b 	rsb	ip, r0, #11
 8011c72:	fa22 f30c 	lsr.w	r3, r2, ip
 8011c76:	45b8      	cmp	r8, r7
 8011c78:	ea43 0501 	orr.w	r5, r3, r1
 8011c7c:	bf34      	ite	cc
 8011c7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c82:	2300      	movcs	r3, #0
 8011c84:	3015      	adds	r0, #21
 8011c86:	fa02 f000 	lsl.w	r0, r2, r0
 8011c8a:	fa23 f30c 	lsr.w	r3, r3, ip
 8011c8e:	4303      	orrs	r3, r0
 8011c90:	461c      	mov	r4, r3
 8011c92:	ec45 4b10 	vmov	d0, r4, r5
 8011c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c9a:	45b8      	cmp	r8, r7
 8011c9c:	bf3a      	itte	cc
 8011c9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011ca2:	f1a6 0708 	subcc.w	r7, r6, #8
 8011ca6:	2300      	movcs	r3, #0
 8011ca8:	380b      	subs	r0, #11
 8011caa:	d012      	beq.n	8011cd2 <__b2d+0x8a>
 8011cac:	f1c0 0120 	rsb	r1, r0, #32
 8011cb0:	fa23 f401 	lsr.w	r4, r3, r1
 8011cb4:	4082      	lsls	r2, r0
 8011cb6:	4322      	orrs	r2, r4
 8011cb8:	4547      	cmp	r7, r8
 8011cba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011cbe:	bf8c      	ite	hi
 8011cc0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011cc4:	2200      	movls	r2, #0
 8011cc6:	4083      	lsls	r3, r0
 8011cc8:	40ca      	lsrs	r2, r1
 8011cca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011cce:	4313      	orrs	r3, r2
 8011cd0:	e7de      	b.n	8011c90 <__b2d+0x48>
 8011cd2:	ea42 0501 	orr.w	r5, r2, r1
 8011cd6:	e7db      	b.n	8011c90 <__b2d+0x48>
 8011cd8:	3ff00000 	.word	0x3ff00000

08011cdc <__d2b>:
 8011cdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011ce0:	460f      	mov	r7, r1
 8011ce2:	2101      	movs	r1, #1
 8011ce4:	ec59 8b10 	vmov	r8, r9, d0
 8011ce8:	4616      	mov	r6, r2
 8011cea:	f7ff fc13 	bl	8011514 <_Balloc>
 8011cee:	4604      	mov	r4, r0
 8011cf0:	b930      	cbnz	r0, 8011d00 <__d2b+0x24>
 8011cf2:	4602      	mov	r2, r0
 8011cf4:	4b23      	ldr	r3, [pc, #140]	@ (8011d84 <__d2b+0xa8>)
 8011cf6:	4824      	ldr	r0, [pc, #144]	@ (8011d88 <__d2b+0xac>)
 8011cf8:	f240 310f 	movw	r1, #783	@ 0x30f
 8011cfc:	f001 febc 	bl	8013a78 <__assert_func>
 8011d00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011d04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011d08:	b10d      	cbz	r5, 8011d0e <__d2b+0x32>
 8011d0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011d0e:	9301      	str	r3, [sp, #4]
 8011d10:	f1b8 0300 	subs.w	r3, r8, #0
 8011d14:	d023      	beq.n	8011d5e <__d2b+0x82>
 8011d16:	4668      	mov	r0, sp
 8011d18:	9300      	str	r3, [sp, #0]
 8011d1a:	f7ff fd0c 	bl	8011736 <__lo0bits>
 8011d1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011d22:	b1d0      	cbz	r0, 8011d5a <__d2b+0x7e>
 8011d24:	f1c0 0320 	rsb	r3, r0, #32
 8011d28:	fa02 f303 	lsl.w	r3, r2, r3
 8011d2c:	430b      	orrs	r3, r1
 8011d2e:	40c2      	lsrs	r2, r0
 8011d30:	6163      	str	r3, [r4, #20]
 8011d32:	9201      	str	r2, [sp, #4]
 8011d34:	9b01      	ldr	r3, [sp, #4]
 8011d36:	61a3      	str	r3, [r4, #24]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	bf0c      	ite	eq
 8011d3c:	2201      	moveq	r2, #1
 8011d3e:	2202      	movne	r2, #2
 8011d40:	6122      	str	r2, [r4, #16]
 8011d42:	b1a5      	cbz	r5, 8011d6e <__d2b+0x92>
 8011d44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011d48:	4405      	add	r5, r0
 8011d4a:	603d      	str	r5, [r7, #0]
 8011d4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011d50:	6030      	str	r0, [r6, #0]
 8011d52:	4620      	mov	r0, r4
 8011d54:	b003      	add	sp, #12
 8011d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d5a:	6161      	str	r1, [r4, #20]
 8011d5c:	e7ea      	b.n	8011d34 <__d2b+0x58>
 8011d5e:	a801      	add	r0, sp, #4
 8011d60:	f7ff fce9 	bl	8011736 <__lo0bits>
 8011d64:	9b01      	ldr	r3, [sp, #4]
 8011d66:	6163      	str	r3, [r4, #20]
 8011d68:	3020      	adds	r0, #32
 8011d6a:	2201      	movs	r2, #1
 8011d6c:	e7e8      	b.n	8011d40 <__d2b+0x64>
 8011d6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011d76:	6038      	str	r0, [r7, #0]
 8011d78:	6918      	ldr	r0, [r3, #16]
 8011d7a:	f7ff fcbd 	bl	80116f8 <__hi0bits>
 8011d7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d82:	e7e5      	b.n	8011d50 <__d2b+0x74>
 8011d84:	0801598f 	.word	0x0801598f
 8011d88:	080159a0 	.word	0x080159a0

08011d8c <__ratio>:
 8011d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d90:	b085      	sub	sp, #20
 8011d92:	e9cd 1000 	strd	r1, r0, [sp]
 8011d96:	a902      	add	r1, sp, #8
 8011d98:	f7ff ff56 	bl	8011c48 <__b2d>
 8011d9c:	9800      	ldr	r0, [sp, #0]
 8011d9e:	a903      	add	r1, sp, #12
 8011da0:	ec55 4b10 	vmov	r4, r5, d0
 8011da4:	f7ff ff50 	bl	8011c48 <__b2d>
 8011da8:	9b01      	ldr	r3, [sp, #4]
 8011daa:	6919      	ldr	r1, [r3, #16]
 8011dac:	9b00      	ldr	r3, [sp, #0]
 8011dae:	691b      	ldr	r3, [r3, #16]
 8011db0:	1ac9      	subs	r1, r1, r3
 8011db2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011db6:	1a9b      	subs	r3, r3, r2
 8011db8:	ec5b ab10 	vmov	sl, fp, d0
 8011dbc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	bfce      	itee	gt
 8011dc4:	462a      	movgt	r2, r5
 8011dc6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011dca:	465a      	movle	r2, fp
 8011dcc:	462f      	mov	r7, r5
 8011dce:	46d9      	mov	r9, fp
 8011dd0:	bfcc      	ite	gt
 8011dd2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011dd6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011dda:	464b      	mov	r3, r9
 8011ddc:	4652      	mov	r2, sl
 8011dde:	4620      	mov	r0, r4
 8011de0:	4639      	mov	r1, r7
 8011de2:	f7ee fd6b 	bl	80008bc <__aeabi_ddiv>
 8011de6:	ec41 0b10 	vmov	d0, r0, r1
 8011dea:	b005      	add	sp, #20
 8011dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011df0 <__copybits>:
 8011df0:	3901      	subs	r1, #1
 8011df2:	b570      	push	{r4, r5, r6, lr}
 8011df4:	1149      	asrs	r1, r1, #5
 8011df6:	6914      	ldr	r4, [r2, #16]
 8011df8:	3101      	adds	r1, #1
 8011dfa:	f102 0314 	add.w	r3, r2, #20
 8011dfe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011e02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011e06:	1f05      	subs	r5, r0, #4
 8011e08:	42a3      	cmp	r3, r4
 8011e0a:	d30c      	bcc.n	8011e26 <__copybits+0x36>
 8011e0c:	1aa3      	subs	r3, r4, r2
 8011e0e:	3b11      	subs	r3, #17
 8011e10:	f023 0303 	bic.w	r3, r3, #3
 8011e14:	3211      	adds	r2, #17
 8011e16:	42a2      	cmp	r2, r4
 8011e18:	bf88      	it	hi
 8011e1a:	2300      	movhi	r3, #0
 8011e1c:	4418      	add	r0, r3
 8011e1e:	2300      	movs	r3, #0
 8011e20:	4288      	cmp	r0, r1
 8011e22:	d305      	bcc.n	8011e30 <__copybits+0x40>
 8011e24:	bd70      	pop	{r4, r5, r6, pc}
 8011e26:	f853 6b04 	ldr.w	r6, [r3], #4
 8011e2a:	f845 6f04 	str.w	r6, [r5, #4]!
 8011e2e:	e7eb      	b.n	8011e08 <__copybits+0x18>
 8011e30:	f840 3b04 	str.w	r3, [r0], #4
 8011e34:	e7f4      	b.n	8011e20 <__copybits+0x30>

08011e36 <__any_on>:
 8011e36:	f100 0214 	add.w	r2, r0, #20
 8011e3a:	6900      	ldr	r0, [r0, #16]
 8011e3c:	114b      	asrs	r3, r1, #5
 8011e3e:	4298      	cmp	r0, r3
 8011e40:	b510      	push	{r4, lr}
 8011e42:	db11      	blt.n	8011e68 <__any_on+0x32>
 8011e44:	dd0a      	ble.n	8011e5c <__any_on+0x26>
 8011e46:	f011 011f 	ands.w	r1, r1, #31
 8011e4a:	d007      	beq.n	8011e5c <__any_on+0x26>
 8011e4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011e50:	fa24 f001 	lsr.w	r0, r4, r1
 8011e54:	fa00 f101 	lsl.w	r1, r0, r1
 8011e58:	428c      	cmp	r4, r1
 8011e5a:	d10b      	bne.n	8011e74 <__any_on+0x3e>
 8011e5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e60:	4293      	cmp	r3, r2
 8011e62:	d803      	bhi.n	8011e6c <__any_on+0x36>
 8011e64:	2000      	movs	r0, #0
 8011e66:	bd10      	pop	{r4, pc}
 8011e68:	4603      	mov	r3, r0
 8011e6a:	e7f7      	b.n	8011e5c <__any_on+0x26>
 8011e6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011e70:	2900      	cmp	r1, #0
 8011e72:	d0f5      	beq.n	8011e60 <__any_on+0x2a>
 8011e74:	2001      	movs	r0, #1
 8011e76:	e7f6      	b.n	8011e66 <__any_on+0x30>

08011e78 <sulp>:
 8011e78:	b570      	push	{r4, r5, r6, lr}
 8011e7a:	4604      	mov	r4, r0
 8011e7c:	460d      	mov	r5, r1
 8011e7e:	ec45 4b10 	vmov	d0, r4, r5
 8011e82:	4616      	mov	r6, r2
 8011e84:	f7ff feba 	bl	8011bfc <__ulp>
 8011e88:	ec51 0b10 	vmov	r0, r1, d0
 8011e8c:	b17e      	cbz	r6, 8011eae <sulp+0x36>
 8011e8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011e92:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	dd09      	ble.n	8011eae <sulp+0x36>
 8011e9a:	051b      	lsls	r3, r3, #20
 8011e9c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011ea0:	2400      	movs	r4, #0
 8011ea2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011ea6:	4622      	mov	r2, r4
 8011ea8:	462b      	mov	r3, r5
 8011eaa:	f7ee fbdd 	bl	8000668 <__aeabi_dmul>
 8011eae:	ec41 0b10 	vmov	d0, r0, r1
 8011eb2:	bd70      	pop	{r4, r5, r6, pc}
 8011eb4:	0000      	movs	r0, r0
	...

08011eb8 <_strtod_l>:
 8011eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ebc:	b09f      	sub	sp, #124	@ 0x7c
 8011ebe:	460c      	mov	r4, r1
 8011ec0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	921a      	str	r2, [sp, #104]	@ 0x68
 8011ec6:	9005      	str	r0, [sp, #20]
 8011ec8:	f04f 0a00 	mov.w	sl, #0
 8011ecc:	f04f 0b00 	mov.w	fp, #0
 8011ed0:	460a      	mov	r2, r1
 8011ed2:	9219      	str	r2, [sp, #100]	@ 0x64
 8011ed4:	7811      	ldrb	r1, [r2, #0]
 8011ed6:	292b      	cmp	r1, #43	@ 0x2b
 8011ed8:	d04a      	beq.n	8011f70 <_strtod_l+0xb8>
 8011eda:	d838      	bhi.n	8011f4e <_strtod_l+0x96>
 8011edc:	290d      	cmp	r1, #13
 8011ede:	d832      	bhi.n	8011f46 <_strtod_l+0x8e>
 8011ee0:	2908      	cmp	r1, #8
 8011ee2:	d832      	bhi.n	8011f4a <_strtod_l+0x92>
 8011ee4:	2900      	cmp	r1, #0
 8011ee6:	d03b      	beq.n	8011f60 <_strtod_l+0xa8>
 8011ee8:	2200      	movs	r2, #0
 8011eea:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011eec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011eee:	782a      	ldrb	r2, [r5, #0]
 8011ef0:	2a30      	cmp	r2, #48	@ 0x30
 8011ef2:	f040 80b3 	bne.w	801205c <_strtod_l+0x1a4>
 8011ef6:	786a      	ldrb	r2, [r5, #1]
 8011ef8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011efc:	2a58      	cmp	r2, #88	@ 0x58
 8011efe:	d16e      	bne.n	8011fde <_strtod_l+0x126>
 8011f00:	9302      	str	r3, [sp, #8]
 8011f02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f04:	9301      	str	r3, [sp, #4]
 8011f06:	ab1a      	add	r3, sp, #104	@ 0x68
 8011f08:	9300      	str	r3, [sp, #0]
 8011f0a:	4a8e      	ldr	r2, [pc, #568]	@ (8012144 <_strtod_l+0x28c>)
 8011f0c:	9805      	ldr	r0, [sp, #20]
 8011f0e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011f10:	a919      	add	r1, sp, #100	@ 0x64
 8011f12:	f001 fe4b 	bl	8013bac <__gethex>
 8011f16:	f010 060f 	ands.w	r6, r0, #15
 8011f1a:	4604      	mov	r4, r0
 8011f1c:	d005      	beq.n	8011f2a <_strtod_l+0x72>
 8011f1e:	2e06      	cmp	r6, #6
 8011f20:	d128      	bne.n	8011f74 <_strtod_l+0xbc>
 8011f22:	3501      	adds	r5, #1
 8011f24:	2300      	movs	r3, #0
 8011f26:	9519      	str	r5, [sp, #100]	@ 0x64
 8011f28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	f040 858e 	bne.w	8012a4e <_strtod_l+0xb96>
 8011f32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f34:	b1cb      	cbz	r3, 8011f6a <_strtod_l+0xb2>
 8011f36:	4652      	mov	r2, sl
 8011f38:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011f3c:	ec43 2b10 	vmov	d0, r2, r3
 8011f40:	b01f      	add	sp, #124	@ 0x7c
 8011f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f46:	2920      	cmp	r1, #32
 8011f48:	d1ce      	bne.n	8011ee8 <_strtod_l+0x30>
 8011f4a:	3201      	adds	r2, #1
 8011f4c:	e7c1      	b.n	8011ed2 <_strtod_l+0x1a>
 8011f4e:	292d      	cmp	r1, #45	@ 0x2d
 8011f50:	d1ca      	bne.n	8011ee8 <_strtod_l+0x30>
 8011f52:	2101      	movs	r1, #1
 8011f54:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011f56:	1c51      	adds	r1, r2, #1
 8011f58:	9119      	str	r1, [sp, #100]	@ 0x64
 8011f5a:	7852      	ldrb	r2, [r2, #1]
 8011f5c:	2a00      	cmp	r2, #0
 8011f5e:	d1c5      	bne.n	8011eec <_strtod_l+0x34>
 8011f60:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011f62:	9419      	str	r4, [sp, #100]	@ 0x64
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	f040 8570 	bne.w	8012a4a <_strtod_l+0xb92>
 8011f6a:	4652      	mov	r2, sl
 8011f6c:	465b      	mov	r3, fp
 8011f6e:	e7e5      	b.n	8011f3c <_strtod_l+0x84>
 8011f70:	2100      	movs	r1, #0
 8011f72:	e7ef      	b.n	8011f54 <_strtod_l+0x9c>
 8011f74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011f76:	b13a      	cbz	r2, 8011f88 <_strtod_l+0xd0>
 8011f78:	2135      	movs	r1, #53	@ 0x35
 8011f7a:	a81c      	add	r0, sp, #112	@ 0x70
 8011f7c:	f7ff ff38 	bl	8011df0 <__copybits>
 8011f80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011f82:	9805      	ldr	r0, [sp, #20]
 8011f84:	f7ff fb06 	bl	8011594 <_Bfree>
 8011f88:	3e01      	subs	r6, #1
 8011f8a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011f8c:	2e04      	cmp	r6, #4
 8011f8e:	d806      	bhi.n	8011f9e <_strtod_l+0xe6>
 8011f90:	e8df f006 	tbb	[pc, r6]
 8011f94:	201d0314 	.word	0x201d0314
 8011f98:	14          	.byte	0x14
 8011f99:	00          	.byte	0x00
 8011f9a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011f9e:	05e1      	lsls	r1, r4, #23
 8011fa0:	bf48      	it	mi
 8011fa2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011fa6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011faa:	0d1b      	lsrs	r3, r3, #20
 8011fac:	051b      	lsls	r3, r3, #20
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d1bb      	bne.n	8011f2a <_strtod_l+0x72>
 8011fb2:	f7fe fbcb 	bl	801074c <__errno>
 8011fb6:	2322      	movs	r3, #34	@ 0x22
 8011fb8:	6003      	str	r3, [r0, #0]
 8011fba:	e7b6      	b.n	8011f2a <_strtod_l+0x72>
 8011fbc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011fc0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011fc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011fc8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011fcc:	e7e7      	b.n	8011f9e <_strtod_l+0xe6>
 8011fce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801214c <_strtod_l+0x294>
 8011fd2:	e7e4      	b.n	8011f9e <_strtod_l+0xe6>
 8011fd4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011fd8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8011fdc:	e7df      	b.n	8011f9e <_strtod_l+0xe6>
 8011fde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011fe0:	1c5a      	adds	r2, r3, #1
 8011fe2:	9219      	str	r2, [sp, #100]	@ 0x64
 8011fe4:	785b      	ldrb	r3, [r3, #1]
 8011fe6:	2b30      	cmp	r3, #48	@ 0x30
 8011fe8:	d0f9      	beq.n	8011fde <_strtod_l+0x126>
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d09d      	beq.n	8011f2a <_strtod_l+0x72>
 8011fee:	2301      	movs	r3, #1
 8011ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ff2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011ff4:	930c      	str	r3, [sp, #48]	@ 0x30
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	9308      	str	r3, [sp, #32]
 8011ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ffc:	461f      	mov	r7, r3
 8011ffe:	220a      	movs	r2, #10
 8012000:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8012002:	7805      	ldrb	r5, [r0, #0]
 8012004:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8012008:	b2d9      	uxtb	r1, r3
 801200a:	2909      	cmp	r1, #9
 801200c:	d928      	bls.n	8012060 <_strtod_l+0x1a8>
 801200e:	494e      	ldr	r1, [pc, #312]	@ (8012148 <_strtod_l+0x290>)
 8012010:	2201      	movs	r2, #1
 8012012:	f7fe fb2f 	bl	8010674 <strncmp>
 8012016:	2800      	cmp	r0, #0
 8012018:	d032      	beq.n	8012080 <_strtod_l+0x1c8>
 801201a:	2000      	movs	r0, #0
 801201c:	462a      	mov	r2, r5
 801201e:	4681      	mov	r9, r0
 8012020:	463d      	mov	r5, r7
 8012022:	4603      	mov	r3, r0
 8012024:	2a65      	cmp	r2, #101	@ 0x65
 8012026:	d001      	beq.n	801202c <_strtod_l+0x174>
 8012028:	2a45      	cmp	r2, #69	@ 0x45
 801202a:	d114      	bne.n	8012056 <_strtod_l+0x19e>
 801202c:	b91d      	cbnz	r5, 8012036 <_strtod_l+0x17e>
 801202e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012030:	4302      	orrs	r2, r0
 8012032:	d095      	beq.n	8011f60 <_strtod_l+0xa8>
 8012034:	2500      	movs	r5, #0
 8012036:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8012038:	1c62      	adds	r2, r4, #1
 801203a:	9219      	str	r2, [sp, #100]	@ 0x64
 801203c:	7862      	ldrb	r2, [r4, #1]
 801203e:	2a2b      	cmp	r2, #43	@ 0x2b
 8012040:	d077      	beq.n	8012132 <_strtod_l+0x27a>
 8012042:	2a2d      	cmp	r2, #45	@ 0x2d
 8012044:	d07b      	beq.n	801213e <_strtod_l+0x286>
 8012046:	f04f 0c00 	mov.w	ip, #0
 801204a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801204e:	2909      	cmp	r1, #9
 8012050:	f240 8082 	bls.w	8012158 <_strtod_l+0x2a0>
 8012054:	9419      	str	r4, [sp, #100]	@ 0x64
 8012056:	f04f 0800 	mov.w	r8, #0
 801205a:	e0a2      	b.n	80121a2 <_strtod_l+0x2ea>
 801205c:	2300      	movs	r3, #0
 801205e:	e7c7      	b.n	8011ff0 <_strtod_l+0x138>
 8012060:	2f08      	cmp	r7, #8
 8012062:	bfd5      	itete	le
 8012064:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8012066:	9908      	ldrgt	r1, [sp, #32]
 8012068:	fb02 3301 	mlale	r3, r2, r1, r3
 801206c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8012070:	f100 0001 	add.w	r0, r0, #1
 8012074:	bfd4      	ite	le
 8012076:	930a      	strle	r3, [sp, #40]	@ 0x28
 8012078:	9308      	strgt	r3, [sp, #32]
 801207a:	3701      	adds	r7, #1
 801207c:	9019      	str	r0, [sp, #100]	@ 0x64
 801207e:	e7bf      	b.n	8012000 <_strtod_l+0x148>
 8012080:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012082:	1c5a      	adds	r2, r3, #1
 8012084:	9219      	str	r2, [sp, #100]	@ 0x64
 8012086:	785a      	ldrb	r2, [r3, #1]
 8012088:	b37f      	cbz	r7, 80120ea <_strtod_l+0x232>
 801208a:	4681      	mov	r9, r0
 801208c:	463d      	mov	r5, r7
 801208e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8012092:	2b09      	cmp	r3, #9
 8012094:	d912      	bls.n	80120bc <_strtod_l+0x204>
 8012096:	2301      	movs	r3, #1
 8012098:	e7c4      	b.n	8012024 <_strtod_l+0x16c>
 801209a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801209c:	1c5a      	adds	r2, r3, #1
 801209e:	9219      	str	r2, [sp, #100]	@ 0x64
 80120a0:	785a      	ldrb	r2, [r3, #1]
 80120a2:	3001      	adds	r0, #1
 80120a4:	2a30      	cmp	r2, #48	@ 0x30
 80120a6:	d0f8      	beq.n	801209a <_strtod_l+0x1e2>
 80120a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80120ac:	2b08      	cmp	r3, #8
 80120ae:	f200 84d3 	bhi.w	8012a58 <_strtod_l+0xba0>
 80120b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80120b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80120b6:	4681      	mov	r9, r0
 80120b8:	2000      	movs	r0, #0
 80120ba:	4605      	mov	r5, r0
 80120bc:	3a30      	subs	r2, #48	@ 0x30
 80120be:	f100 0301 	add.w	r3, r0, #1
 80120c2:	d02a      	beq.n	801211a <_strtod_l+0x262>
 80120c4:	4499      	add	r9, r3
 80120c6:	eb00 0c05 	add.w	ip, r0, r5
 80120ca:	462b      	mov	r3, r5
 80120cc:	210a      	movs	r1, #10
 80120ce:	4563      	cmp	r3, ip
 80120d0:	d10d      	bne.n	80120ee <_strtod_l+0x236>
 80120d2:	1c69      	adds	r1, r5, #1
 80120d4:	4401      	add	r1, r0
 80120d6:	4428      	add	r0, r5
 80120d8:	2808      	cmp	r0, #8
 80120da:	dc16      	bgt.n	801210a <_strtod_l+0x252>
 80120dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80120de:	230a      	movs	r3, #10
 80120e0:	fb03 2300 	mla	r3, r3, r0, r2
 80120e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80120e6:	2300      	movs	r3, #0
 80120e8:	e018      	b.n	801211c <_strtod_l+0x264>
 80120ea:	4638      	mov	r0, r7
 80120ec:	e7da      	b.n	80120a4 <_strtod_l+0x1ec>
 80120ee:	2b08      	cmp	r3, #8
 80120f0:	f103 0301 	add.w	r3, r3, #1
 80120f4:	dc03      	bgt.n	80120fe <_strtod_l+0x246>
 80120f6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80120f8:	434e      	muls	r6, r1
 80120fa:	960a      	str	r6, [sp, #40]	@ 0x28
 80120fc:	e7e7      	b.n	80120ce <_strtod_l+0x216>
 80120fe:	2b10      	cmp	r3, #16
 8012100:	bfde      	ittt	le
 8012102:	9e08      	ldrle	r6, [sp, #32]
 8012104:	434e      	mulle	r6, r1
 8012106:	9608      	strle	r6, [sp, #32]
 8012108:	e7e1      	b.n	80120ce <_strtod_l+0x216>
 801210a:	280f      	cmp	r0, #15
 801210c:	dceb      	bgt.n	80120e6 <_strtod_l+0x22e>
 801210e:	9808      	ldr	r0, [sp, #32]
 8012110:	230a      	movs	r3, #10
 8012112:	fb03 2300 	mla	r3, r3, r0, r2
 8012116:	9308      	str	r3, [sp, #32]
 8012118:	e7e5      	b.n	80120e6 <_strtod_l+0x22e>
 801211a:	4629      	mov	r1, r5
 801211c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801211e:	1c50      	adds	r0, r2, #1
 8012120:	9019      	str	r0, [sp, #100]	@ 0x64
 8012122:	7852      	ldrb	r2, [r2, #1]
 8012124:	4618      	mov	r0, r3
 8012126:	460d      	mov	r5, r1
 8012128:	e7b1      	b.n	801208e <_strtod_l+0x1d6>
 801212a:	f04f 0900 	mov.w	r9, #0
 801212e:	2301      	movs	r3, #1
 8012130:	e77d      	b.n	801202e <_strtod_l+0x176>
 8012132:	f04f 0c00 	mov.w	ip, #0
 8012136:	1ca2      	adds	r2, r4, #2
 8012138:	9219      	str	r2, [sp, #100]	@ 0x64
 801213a:	78a2      	ldrb	r2, [r4, #2]
 801213c:	e785      	b.n	801204a <_strtod_l+0x192>
 801213e:	f04f 0c01 	mov.w	ip, #1
 8012142:	e7f8      	b.n	8012136 <_strtod_l+0x27e>
 8012144:	08015b10 	.word	0x08015b10
 8012148:	08015af8 	.word	0x08015af8
 801214c:	7ff00000 	.word	0x7ff00000
 8012150:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012152:	1c51      	adds	r1, r2, #1
 8012154:	9119      	str	r1, [sp, #100]	@ 0x64
 8012156:	7852      	ldrb	r2, [r2, #1]
 8012158:	2a30      	cmp	r2, #48	@ 0x30
 801215a:	d0f9      	beq.n	8012150 <_strtod_l+0x298>
 801215c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8012160:	2908      	cmp	r1, #8
 8012162:	f63f af78 	bhi.w	8012056 <_strtod_l+0x19e>
 8012166:	3a30      	subs	r2, #48	@ 0x30
 8012168:	920e      	str	r2, [sp, #56]	@ 0x38
 801216a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801216c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801216e:	f04f 080a 	mov.w	r8, #10
 8012172:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012174:	1c56      	adds	r6, r2, #1
 8012176:	9619      	str	r6, [sp, #100]	@ 0x64
 8012178:	7852      	ldrb	r2, [r2, #1]
 801217a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801217e:	f1be 0f09 	cmp.w	lr, #9
 8012182:	d939      	bls.n	80121f8 <_strtod_l+0x340>
 8012184:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012186:	1a76      	subs	r6, r6, r1
 8012188:	2e08      	cmp	r6, #8
 801218a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801218e:	dc03      	bgt.n	8012198 <_strtod_l+0x2e0>
 8012190:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012192:	4588      	cmp	r8, r1
 8012194:	bfa8      	it	ge
 8012196:	4688      	movge	r8, r1
 8012198:	f1bc 0f00 	cmp.w	ip, #0
 801219c:	d001      	beq.n	80121a2 <_strtod_l+0x2ea>
 801219e:	f1c8 0800 	rsb	r8, r8, #0
 80121a2:	2d00      	cmp	r5, #0
 80121a4:	d14e      	bne.n	8012244 <_strtod_l+0x38c>
 80121a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80121a8:	4308      	orrs	r0, r1
 80121aa:	f47f aebe 	bne.w	8011f2a <_strtod_l+0x72>
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	f47f aed6 	bne.w	8011f60 <_strtod_l+0xa8>
 80121b4:	2a69      	cmp	r2, #105	@ 0x69
 80121b6:	d028      	beq.n	801220a <_strtod_l+0x352>
 80121b8:	dc25      	bgt.n	8012206 <_strtod_l+0x34e>
 80121ba:	2a49      	cmp	r2, #73	@ 0x49
 80121bc:	d025      	beq.n	801220a <_strtod_l+0x352>
 80121be:	2a4e      	cmp	r2, #78	@ 0x4e
 80121c0:	f47f aece 	bne.w	8011f60 <_strtod_l+0xa8>
 80121c4:	499b      	ldr	r1, [pc, #620]	@ (8012434 <_strtod_l+0x57c>)
 80121c6:	a819      	add	r0, sp, #100	@ 0x64
 80121c8:	f001 ff12 	bl	8013ff0 <__match>
 80121cc:	2800      	cmp	r0, #0
 80121ce:	f43f aec7 	beq.w	8011f60 <_strtod_l+0xa8>
 80121d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	2b28      	cmp	r3, #40	@ 0x28
 80121d8:	d12e      	bne.n	8012238 <_strtod_l+0x380>
 80121da:	4997      	ldr	r1, [pc, #604]	@ (8012438 <_strtod_l+0x580>)
 80121dc:	aa1c      	add	r2, sp, #112	@ 0x70
 80121de:	a819      	add	r0, sp, #100	@ 0x64
 80121e0:	f001 ff1a 	bl	8014018 <__hexnan>
 80121e4:	2805      	cmp	r0, #5
 80121e6:	d127      	bne.n	8012238 <_strtod_l+0x380>
 80121e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80121ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80121ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80121f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80121f6:	e698      	b.n	8011f2a <_strtod_l+0x72>
 80121f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80121fa:	fb08 2101 	mla	r1, r8, r1, r2
 80121fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8012202:	920e      	str	r2, [sp, #56]	@ 0x38
 8012204:	e7b5      	b.n	8012172 <_strtod_l+0x2ba>
 8012206:	2a6e      	cmp	r2, #110	@ 0x6e
 8012208:	e7da      	b.n	80121c0 <_strtod_l+0x308>
 801220a:	498c      	ldr	r1, [pc, #560]	@ (801243c <_strtod_l+0x584>)
 801220c:	a819      	add	r0, sp, #100	@ 0x64
 801220e:	f001 feef 	bl	8013ff0 <__match>
 8012212:	2800      	cmp	r0, #0
 8012214:	f43f aea4 	beq.w	8011f60 <_strtod_l+0xa8>
 8012218:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801221a:	4989      	ldr	r1, [pc, #548]	@ (8012440 <_strtod_l+0x588>)
 801221c:	3b01      	subs	r3, #1
 801221e:	a819      	add	r0, sp, #100	@ 0x64
 8012220:	9319      	str	r3, [sp, #100]	@ 0x64
 8012222:	f001 fee5 	bl	8013ff0 <__match>
 8012226:	b910      	cbnz	r0, 801222e <_strtod_l+0x376>
 8012228:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801222a:	3301      	adds	r3, #1
 801222c:	9319      	str	r3, [sp, #100]	@ 0x64
 801222e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8012450 <_strtod_l+0x598>
 8012232:	f04f 0a00 	mov.w	sl, #0
 8012236:	e678      	b.n	8011f2a <_strtod_l+0x72>
 8012238:	4882      	ldr	r0, [pc, #520]	@ (8012444 <_strtod_l+0x58c>)
 801223a:	f001 fc15 	bl	8013a68 <nan>
 801223e:	ec5b ab10 	vmov	sl, fp, d0
 8012242:	e672      	b.n	8011f2a <_strtod_l+0x72>
 8012244:	eba8 0309 	sub.w	r3, r8, r9
 8012248:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801224a:	9309      	str	r3, [sp, #36]	@ 0x24
 801224c:	2f00      	cmp	r7, #0
 801224e:	bf08      	it	eq
 8012250:	462f      	moveq	r7, r5
 8012252:	2d10      	cmp	r5, #16
 8012254:	462c      	mov	r4, r5
 8012256:	bfa8      	it	ge
 8012258:	2410      	movge	r4, #16
 801225a:	f7ee f98b 	bl	8000574 <__aeabi_ui2d>
 801225e:	2d09      	cmp	r5, #9
 8012260:	4682      	mov	sl, r0
 8012262:	468b      	mov	fp, r1
 8012264:	dc13      	bgt.n	801228e <_strtod_l+0x3d6>
 8012266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012268:	2b00      	cmp	r3, #0
 801226a:	f43f ae5e 	beq.w	8011f2a <_strtod_l+0x72>
 801226e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012270:	dd78      	ble.n	8012364 <_strtod_l+0x4ac>
 8012272:	2b16      	cmp	r3, #22
 8012274:	dc5f      	bgt.n	8012336 <_strtod_l+0x47e>
 8012276:	4974      	ldr	r1, [pc, #464]	@ (8012448 <_strtod_l+0x590>)
 8012278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801227c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012280:	4652      	mov	r2, sl
 8012282:	465b      	mov	r3, fp
 8012284:	f7ee f9f0 	bl	8000668 <__aeabi_dmul>
 8012288:	4682      	mov	sl, r0
 801228a:	468b      	mov	fp, r1
 801228c:	e64d      	b.n	8011f2a <_strtod_l+0x72>
 801228e:	4b6e      	ldr	r3, [pc, #440]	@ (8012448 <_strtod_l+0x590>)
 8012290:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012294:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8012298:	f7ee f9e6 	bl	8000668 <__aeabi_dmul>
 801229c:	4682      	mov	sl, r0
 801229e:	9808      	ldr	r0, [sp, #32]
 80122a0:	468b      	mov	fp, r1
 80122a2:	f7ee f967 	bl	8000574 <__aeabi_ui2d>
 80122a6:	4602      	mov	r2, r0
 80122a8:	460b      	mov	r3, r1
 80122aa:	4650      	mov	r0, sl
 80122ac:	4659      	mov	r1, fp
 80122ae:	f7ee f825 	bl	80002fc <__adddf3>
 80122b2:	2d0f      	cmp	r5, #15
 80122b4:	4682      	mov	sl, r0
 80122b6:	468b      	mov	fp, r1
 80122b8:	ddd5      	ble.n	8012266 <_strtod_l+0x3ae>
 80122ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122bc:	1b2c      	subs	r4, r5, r4
 80122be:	441c      	add	r4, r3
 80122c0:	2c00      	cmp	r4, #0
 80122c2:	f340 8096 	ble.w	80123f2 <_strtod_l+0x53a>
 80122c6:	f014 030f 	ands.w	r3, r4, #15
 80122ca:	d00a      	beq.n	80122e2 <_strtod_l+0x42a>
 80122cc:	495e      	ldr	r1, [pc, #376]	@ (8012448 <_strtod_l+0x590>)
 80122ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80122d2:	4652      	mov	r2, sl
 80122d4:	465b      	mov	r3, fp
 80122d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122da:	f7ee f9c5 	bl	8000668 <__aeabi_dmul>
 80122de:	4682      	mov	sl, r0
 80122e0:	468b      	mov	fp, r1
 80122e2:	f034 040f 	bics.w	r4, r4, #15
 80122e6:	d073      	beq.n	80123d0 <_strtod_l+0x518>
 80122e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80122ec:	dd48      	ble.n	8012380 <_strtod_l+0x4c8>
 80122ee:	2400      	movs	r4, #0
 80122f0:	46a0      	mov	r8, r4
 80122f2:	940a      	str	r4, [sp, #40]	@ 0x28
 80122f4:	46a1      	mov	r9, r4
 80122f6:	9a05      	ldr	r2, [sp, #20]
 80122f8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8012450 <_strtod_l+0x598>
 80122fc:	2322      	movs	r3, #34	@ 0x22
 80122fe:	6013      	str	r3, [r2, #0]
 8012300:	f04f 0a00 	mov.w	sl, #0
 8012304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012306:	2b00      	cmp	r3, #0
 8012308:	f43f ae0f 	beq.w	8011f2a <_strtod_l+0x72>
 801230c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801230e:	9805      	ldr	r0, [sp, #20]
 8012310:	f7ff f940 	bl	8011594 <_Bfree>
 8012314:	9805      	ldr	r0, [sp, #20]
 8012316:	4649      	mov	r1, r9
 8012318:	f7ff f93c 	bl	8011594 <_Bfree>
 801231c:	9805      	ldr	r0, [sp, #20]
 801231e:	4641      	mov	r1, r8
 8012320:	f7ff f938 	bl	8011594 <_Bfree>
 8012324:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012326:	9805      	ldr	r0, [sp, #20]
 8012328:	f7ff f934 	bl	8011594 <_Bfree>
 801232c:	9805      	ldr	r0, [sp, #20]
 801232e:	4621      	mov	r1, r4
 8012330:	f7ff f930 	bl	8011594 <_Bfree>
 8012334:	e5f9      	b.n	8011f2a <_strtod_l+0x72>
 8012336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012338:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801233c:	4293      	cmp	r3, r2
 801233e:	dbbc      	blt.n	80122ba <_strtod_l+0x402>
 8012340:	4c41      	ldr	r4, [pc, #260]	@ (8012448 <_strtod_l+0x590>)
 8012342:	f1c5 050f 	rsb	r5, r5, #15
 8012346:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801234a:	4652      	mov	r2, sl
 801234c:	465b      	mov	r3, fp
 801234e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012352:	f7ee f989 	bl	8000668 <__aeabi_dmul>
 8012356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012358:	1b5d      	subs	r5, r3, r5
 801235a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801235e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012362:	e78f      	b.n	8012284 <_strtod_l+0x3cc>
 8012364:	3316      	adds	r3, #22
 8012366:	dba8      	blt.n	80122ba <_strtod_l+0x402>
 8012368:	4b37      	ldr	r3, [pc, #220]	@ (8012448 <_strtod_l+0x590>)
 801236a:	eba9 0808 	sub.w	r8, r9, r8
 801236e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8012372:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012376:	4650      	mov	r0, sl
 8012378:	4659      	mov	r1, fp
 801237a:	f7ee fa9f 	bl	80008bc <__aeabi_ddiv>
 801237e:	e783      	b.n	8012288 <_strtod_l+0x3d0>
 8012380:	4b32      	ldr	r3, [pc, #200]	@ (801244c <_strtod_l+0x594>)
 8012382:	9308      	str	r3, [sp, #32]
 8012384:	2300      	movs	r3, #0
 8012386:	1124      	asrs	r4, r4, #4
 8012388:	4650      	mov	r0, sl
 801238a:	4659      	mov	r1, fp
 801238c:	461e      	mov	r6, r3
 801238e:	2c01      	cmp	r4, #1
 8012390:	dc21      	bgt.n	80123d6 <_strtod_l+0x51e>
 8012392:	b10b      	cbz	r3, 8012398 <_strtod_l+0x4e0>
 8012394:	4682      	mov	sl, r0
 8012396:	468b      	mov	fp, r1
 8012398:	492c      	ldr	r1, [pc, #176]	@ (801244c <_strtod_l+0x594>)
 801239a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801239e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80123a2:	4652      	mov	r2, sl
 80123a4:	465b      	mov	r3, fp
 80123a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123aa:	f7ee f95d 	bl	8000668 <__aeabi_dmul>
 80123ae:	4b28      	ldr	r3, [pc, #160]	@ (8012450 <_strtod_l+0x598>)
 80123b0:	460a      	mov	r2, r1
 80123b2:	400b      	ands	r3, r1
 80123b4:	4927      	ldr	r1, [pc, #156]	@ (8012454 <_strtod_l+0x59c>)
 80123b6:	428b      	cmp	r3, r1
 80123b8:	4682      	mov	sl, r0
 80123ba:	d898      	bhi.n	80122ee <_strtod_l+0x436>
 80123bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80123c0:	428b      	cmp	r3, r1
 80123c2:	bf86      	itte	hi
 80123c4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8012458 <_strtod_l+0x5a0>
 80123c8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80123cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80123d0:	2300      	movs	r3, #0
 80123d2:	9308      	str	r3, [sp, #32]
 80123d4:	e07a      	b.n	80124cc <_strtod_l+0x614>
 80123d6:	07e2      	lsls	r2, r4, #31
 80123d8:	d505      	bpl.n	80123e6 <_strtod_l+0x52e>
 80123da:	9b08      	ldr	r3, [sp, #32]
 80123dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e0:	f7ee f942 	bl	8000668 <__aeabi_dmul>
 80123e4:	2301      	movs	r3, #1
 80123e6:	9a08      	ldr	r2, [sp, #32]
 80123e8:	3208      	adds	r2, #8
 80123ea:	3601      	adds	r6, #1
 80123ec:	1064      	asrs	r4, r4, #1
 80123ee:	9208      	str	r2, [sp, #32]
 80123f0:	e7cd      	b.n	801238e <_strtod_l+0x4d6>
 80123f2:	d0ed      	beq.n	80123d0 <_strtod_l+0x518>
 80123f4:	4264      	negs	r4, r4
 80123f6:	f014 020f 	ands.w	r2, r4, #15
 80123fa:	d00a      	beq.n	8012412 <_strtod_l+0x55a>
 80123fc:	4b12      	ldr	r3, [pc, #72]	@ (8012448 <_strtod_l+0x590>)
 80123fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012402:	4650      	mov	r0, sl
 8012404:	4659      	mov	r1, fp
 8012406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240a:	f7ee fa57 	bl	80008bc <__aeabi_ddiv>
 801240e:	4682      	mov	sl, r0
 8012410:	468b      	mov	fp, r1
 8012412:	1124      	asrs	r4, r4, #4
 8012414:	d0dc      	beq.n	80123d0 <_strtod_l+0x518>
 8012416:	2c1f      	cmp	r4, #31
 8012418:	dd20      	ble.n	801245c <_strtod_l+0x5a4>
 801241a:	2400      	movs	r4, #0
 801241c:	46a0      	mov	r8, r4
 801241e:	940a      	str	r4, [sp, #40]	@ 0x28
 8012420:	46a1      	mov	r9, r4
 8012422:	9a05      	ldr	r2, [sp, #20]
 8012424:	2322      	movs	r3, #34	@ 0x22
 8012426:	f04f 0a00 	mov.w	sl, #0
 801242a:	f04f 0b00 	mov.w	fp, #0
 801242e:	6013      	str	r3, [r2, #0]
 8012430:	e768      	b.n	8012304 <_strtod_l+0x44c>
 8012432:	bf00      	nop
 8012434:	080158e9 	.word	0x080158e9
 8012438:	08015afc 	.word	0x08015afc
 801243c:	080158e1 	.word	0x080158e1
 8012440:	08015916 	.word	0x08015916
 8012444:	08015cc0 	.word	0x08015cc0
 8012448:	08015a30 	.word	0x08015a30
 801244c:	08015a08 	.word	0x08015a08
 8012450:	7ff00000 	.word	0x7ff00000
 8012454:	7ca00000 	.word	0x7ca00000
 8012458:	7fefffff 	.word	0x7fefffff
 801245c:	f014 0310 	ands.w	r3, r4, #16
 8012460:	bf18      	it	ne
 8012462:	236a      	movne	r3, #106	@ 0x6a
 8012464:	4ea9      	ldr	r6, [pc, #676]	@ (801270c <_strtod_l+0x854>)
 8012466:	9308      	str	r3, [sp, #32]
 8012468:	4650      	mov	r0, sl
 801246a:	4659      	mov	r1, fp
 801246c:	2300      	movs	r3, #0
 801246e:	07e2      	lsls	r2, r4, #31
 8012470:	d504      	bpl.n	801247c <_strtod_l+0x5c4>
 8012472:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012476:	f7ee f8f7 	bl	8000668 <__aeabi_dmul>
 801247a:	2301      	movs	r3, #1
 801247c:	1064      	asrs	r4, r4, #1
 801247e:	f106 0608 	add.w	r6, r6, #8
 8012482:	d1f4      	bne.n	801246e <_strtod_l+0x5b6>
 8012484:	b10b      	cbz	r3, 801248a <_strtod_l+0x5d2>
 8012486:	4682      	mov	sl, r0
 8012488:	468b      	mov	fp, r1
 801248a:	9b08      	ldr	r3, [sp, #32]
 801248c:	b1b3      	cbz	r3, 80124bc <_strtod_l+0x604>
 801248e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012492:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8012496:	2b00      	cmp	r3, #0
 8012498:	4659      	mov	r1, fp
 801249a:	dd0f      	ble.n	80124bc <_strtod_l+0x604>
 801249c:	2b1f      	cmp	r3, #31
 801249e:	dd55      	ble.n	801254c <_strtod_l+0x694>
 80124a0:	2b34      	cmp	r3, #52	@ 0x34
 80124a2:	bfde      	ittt	le
 80124a4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80124a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80124ac:	4093      	lslle	r3, r2
 80124ae:	f04f 0a00 	mov.w	sl, #0
 80124b2:	bfcc      	ite	gt
 80124b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80124b8:	ea03 0b01 	andle.w	fp, r3, r1
 80124bc:	2200      	movs	r2, #0
 80124be:	2300      	movs	r3, #0
 80124c0:	4650      	mov	r0, sl
 80124c2:	4659      	mov	r1, fp
 80124c4:	f7ee fb38 	bl	8000b38 <__aeabi_dcmpeq>
 80124c8:	2800      	cmp	r0, #0
 80124ca:	d1a6      	bne.n	801241a <_strtod_l+0x562>
 80124cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80124ce:	9300      	str	r3, [sp, #0]
 80124d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80124d2:	9805      	ldr	r0, [sp, #20]
 80124d4:	462b      	mov	r3, r5
 80124d6:	463a      	mov	r2, r7
 80124d8:	f7ff f8c4 	bl	8011664 <__s2b>
 80124dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80124de:	2800      	cmp	r0, #0
 80124e0:	f43f af05 	beq.w	80122ee <_strtod_l+0x436>
 80124e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80124e6:	2a00      	cmp	r2, #0
 80124e8:	eba9 0308 	sub.w	r3, r9, r8
 80124ec:	bfa8      	it	ge
 80124ee:	2300      	movge	r3, #0
 80124f0:	9312      	str	r3, [sp, #72]	@ 0x48
 80124f2:	2400      	movs	r4, #0
 80124f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80124f8:	9316      	str	r3, [sp, #88]	@ 0x58
 80124fa:	46a0      	mov	r8, r4
 80124fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80124fe:	9805      	ldr	r0, [sp, #20]
 8012500:	6859      	ldr	r1, [r3, #4]
 8012502:	f7ff f807 	bl	8011514 <_Balloc>
 8012506:	4681      	mov	r9, r0
 8012508:	2800      	cmp	r0, #0
 801250a:	f43f aef4 	beq.w	80122f6 <_strtod_l+0x43e>
 801250e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012510:	691a      	ldr	r2, [r3, #16]
 8012512:	3202      	adds	r2, #2
 8012514:	f103 010c 	add.w	r1, r3, #12
 8012518:	0092      	lsls	r2, r2, #2
 801251a:	300c      	adds	r0, #12
 801251c:	f7fe f943 	bl	80107a6 <memcpy>
 8012520:	ec4b ab10 	vmov	d0, sl, fp
 8012524:	9805      	ldr	r0, [sp, #20]
 8012526:	aa1c      	add	r2, sp, #112	@ 0x70
 8012528:	a91b      	add	r1, sp, #108	@ 0x6c
 801252a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801252e:	f7ff fbd5 	bl	8011cdc <__d2b>
 8012532:	901a      	str	r0, [sp, #104]	@ 0x68
 8012534:	2800      	cmp	r0, #0
 8012536:	f43f aede 	beq.w	80122f6 <_strtod_l+0x43e>
 801253a:	9805      	ldr	r0, [sp, #20]
 801253c:	2101      	movs	r1, #1
 801253e:	f7ff f927 	bl	8011790 <__i2b>
 8012542:	4680      	mov	r8, r0
 8012544:	b948      	cbnz	r0, 801255a <_strtod_l+0x6a2>
 8012546:	f04f 0800 	mov.w	r8, #0
 801254a:	e6d4      	b.n	80122f6 <_strtod_l+0x43e>
 801254c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012550:	fa02 f303 	lsl.w	r3, r2, r3
 8012554:	ea03 0a0a 	and.w	sl, r3, sl
 8012558:	e7b0      	b.n	80124bc <_strtod_l+0x604>
 801255a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801255c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801255e:	2d00      	cmp	r5, #0
 8012560:	bfab      	itete	ge
 8012562:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012564:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012566:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012568:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801256a:	bfac      	ite	ge
 801256c:	18ef      	addge	r7, r5, r3
 801256e:	1b5e      	sublt	r6, r3, r5
 8012570:	9b08      	ldr	r3, [sp, #32]
 8012572:	1aed      	subs	r5, r5, r3
 8012574:	4415      	add	r5, r2
 8012576:	4b66      	ldr	r3, [pc, #408]	@ (8012710 <_strtod_l+0x858>)
 8012578:	3d01      	subs	r5, #1
 801257a:	429d      	cmp	r5, r3
 801257c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012580:	da50      	bge.n	8012624 <_strtod_l+0x76c>
 8012582:	1b5b      	subs	r3, r3, r5
 8012584:	2b1f      	cmp	r3, #31
 8012586:	eba2 0203 	sub.w	r2, r2, r3
 801258a:	f04f 0101 	mov.w	r1, #1
 801258e:	dc3d      	bgt.n	801260c <_strtod_l+0x754>
 8012590:	fa01 f303 	lsl.w	r3, r1, r3
 8012594:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012596:	2300      	movs	r3, #0
 8012598:	9310      	str	r3, [sp, #64]	@ 0x40
 801259a:	18bd      	adds	r5, r7, r2
 801259c:	9b08      	ldr	r3, [sp, #32]
 801259e:	42af      	cmp	r7, r5
 80125a0:	4416      	add	r6, r2
 80125a2:	441e      	add	r6, r3
 80125a4:	463b      	mov	r3, r7
 80125a6:	bfa8      	it	ge
 80125a8:	462b      	movge	r3, r5
 80125aa:	42b3      	cmp	r3, r6
 80125ac:	bfa8      	it	ge
 80125ae:	4633      	movge	r3, r6
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	bfc2      	ittt	gt
 80125b4:	1aed      	subgt	r5, r5, r3
 80125b6:	1af6      	subgt	r6, r6, r3
 80125b8:	1aff      	subgt	r7, r7, r3
 80125ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80125bc:	2b00      	cmp	r3, #0
 80125be:	dd16      	ble.n	80125ee <_strtod_l+0x736>
 80125c0:	4641      	mov	r1, r8
 80125c2:	9805      	ldr	r0, [sp, #20]
 80125c4:	461a      	mov	r2, r3
 80125c6:	f7ff f9a3 	bl	8011910 <__pow5mult>
 80125ca:	4680      	mov	r8, r0
 80125cc:	2800      	cmp	r0, #0
 80125ce:	d0ba      	beq.n	8012546 <_strtod_l+0x68e>
 80125d0:	4601      	mov	r1, r0
 80125d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80125d4:	9805      	ldr	r0, [sp, #20]
 80125d6:	f7ff f8f1 	bl	80117bc <__multiply>
 80125da:	900e      	str	r0, [sp, #56]	@ 0x38
 80125dc:	2800      	cmp	r0, #0
 80125de:	f43f ae8a 	beq.w	80122f6 <_strtod_l+0x43e>
 80125e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80125e4:	9805      	ldr	r0, [sp, #20]
 80125e6:	f7fe ffd5 	bl	8011594 <_Bfree>
 80125ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80125ee:	2d00      	cmp	r5, #0
 80125f0:	dc1d      	bgt.n	801262e <_strtod_l+0x776>
 80125f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	dd23      	ble.n	8012640 <_strtod_l+0x788>
 80125f8:	4649      	mov	r1, r9
 80125fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80125fc:	9805      	ldr	r0, [sp, #20]
 80125fe:	f7ff f987 	bl	8011910 <__pow5mult>
 8012602:	4681      	mov	r9, r0
 8012604:	b9e0      	cbnz	r0, 8012640 <_strtod_l+0x788>
 8012606:	f04f 0900 	mov.w	r9, #0
 801260a:	e674      	b.n	80122f6 <_strtod_l+0x43e>
 801260c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012610:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012614:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012618:	35e2      	adds	r5, #226	@ 0xe2
 801261a:	fa01 f305 	lsl.w	r3, r1, r5
 801261e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012620:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012622:	e7ba      	b.n	801259a <_strtod_l+0x6e2>
 8012624:	2300      	movs	r3, #0
 8012626:	9310      	str	r3, [sp, #64]	@ 0x40
 8012628:	2301      	movs	r3, #1
 801262a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801262c:	e7b5      	b.n	801259a <_strtod_l+0x6e2>
 801262e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012630:	9805      	ldr	r0, [sp, #20]
 8012632:	462a      	mov	r2, r5
 8012634:	f7ff f9c6 	bl	80119c4 <__lshift>
 8012638:	901a      	str	r0, [sp, #104]	@ 0x68
 801263a:	2800      	cmp	r0, #0
 801263c:	d1d9      	bne.n	80125f2 <_strtod_l+0x73a>
 801263e:	e65a      	b.n	80122f6 <_strtod_l+0x43e>
 8012640:	2e00      	cmp	r6, #0
 8012642:	dd07      	ble.n	8012654 <_strtod_l+0x79c>
 8012644:	4649      	mov	r1, r9
 8012646:	9805      	ldr	r0, [sp, #20]
 8012648:	4632      	mov	r2, r6
 801264a:	f7ff f9bb 	bl	80119c4 <__lshift>
 801264e:	4681      	mov	r9, r0
 8012650:	2800      	cmp	r0, #0
 8012652:	d0d8      	beq.n	8012606 <_strtod_l+0x74e>
 8012654:	2f00      	cmp	r7, #0
 8012656:	dd08      	ble.n	801266a <_strtod_l+0x7b2>
 8012658:	4641      	mov	r1, r8
 801265a:	9805      	ldr	r0, [sp, #20]
 801265c:	463a      	mov	r2, r7
 801265e:	f7ff f9b1 	bl	80119c4 <__lshift>
 8012662:	4680      	mov	r8, r0
 8012664:	2800      	cmp	r0, #0
 8012666:	f43f ae46 	beq.w	80122f6 <_strtod_l+0x43e>
 801266a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801266c:	9805      	ldr	r0, [sp, #20]
 801266e:	464a      	mov	r2, r9
 8012670:	f7ff fa30 	bl	8011ad4 <__mdiff>
 8012674:	4604      	mov	r4, r0
 8012676:	2800      	cmp	r0, #0
 8012678:	f43f ae3d 	beq.w	80122f6 <_strtod_l+0x43e>
 801267c:	68c3      	ldr	r3, [r0, #12]
 801267e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012680:	2300      	movs	r3, #0
 8012682:	60c3      	str	r3, [r0, #12]
 8012684:	4641      	mov	r1, r8
 8012686:	f7ff fa09 	bl	8011a9c <__mcmp>
 801268a:	2800      	cmp	r0, #0
 801268c:	da46      	bge.n	801271c <_strtod_l+0x864>
 801268e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012690:	ea53 030a 	orrs.w	r3, r3, sl
 8012694:	d16c      	bne.n	8012770 <_strtod_l+0x8b8>
 8012696:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801269a:	2b00      	cmp	r3, #0
 801269c:	d168      	bne.n	8012770 <_strtod_l+0x8b8>
 801269e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80126a2:	0d1b      	lsrs	r3, r3, #20
 80126a4:	051b      	lsls	r3, r3, #20
 80126a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80126aa:	d961      	bls.n	8012770 <_strtod_l+0x8b8>
 80126ac:	6963      	ldr	r3, [r4, #20]
 80126ae:	b913      	cbnz	r3, 80126b6 <_strtod_l+0x7fe>
 80126b0:	6923      	ldr	r3, [r4, #16]
 80126b2:	2b01      	cmp	r3, #1
 80126b4:	dd5c      	ble.n	8012770 <_strtod_l+0x8b8>
 80126b6:	4621      	mov	r1, r4
 80126b8:	2201      	movs	r2, #1
 80126ba:	9805      	ldr	r0, [sp, #20]
 80126bc:	f7ff f982 	bl	80119c4 <__lshift>
 80126c0:	4641      	mov	r1, r8
 80126c2:	4604      	mov	r4, r0
 80126c4:	f7ff f9ea 	bl	8011a9c <__mcmp>
 80126c8:	2800      	cmp	r0, #0
 80126ca:	dd51      	ble.n	8012770 <_strtod_l+0x8b8>
 80126cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80126d0:	9a08      	ldr	r2, [sp, #32]
 80126d2:	0d1b      	lsrs	r3, r3, #20
 80126d4:	051b      	lsls	r3, r3, #20
 80126d6:	2a00      	cmp	r2, #0
 80126d8:	d06b      	beq.n	80127b2 <_strtod_l+0x8fa>
 80126da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80126de:	d868      	bhi.n	80127b2 <_strtod_l+0x8fa>
 80126e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80126e4:	f67f ae9d 	bls.w	8012422 <_strtod_l+0x56a>
 80126e8:	4b0a      	ldr	r3, [pc, #40]	@ (8012714 <_strtod_l+0x85c>)
 80126ea:	4650      	mov	r0, sl
 80126ec:	4659      	mov	r1, fp
 80126ee:	2200      	movs	r2, #0
 80126f0:	f7ed ffba 	bl	8000668 <__aeabi_dmul>
 80126f4:	4b08      	ldr	r3, [pc, #32]	@ (8012718 <_strtod_l+0x860>)
 80126f6:	400b      	ands	r3, r1
 80126f8:	4682      	mov	sl, r0
 80126fa:	468b      	mov	fp, r1
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	f47f ae05 	bne.w	801230c <_strtod_l+0x454>
 8012702:	9a05      	ldr	r2, [sp, #20]
 8012704:	2322      	movs	r3, #34	@ 0x22
 8012706:	6013      	str	r3, [r2, #0]
 8012708:	e600      	b.n	801230c <_strtod_l+0x454>
 801270a:	bf00      	nop
 801270c:	08015b28 	.word	0x08015b28
 8012710:	fffffc02 	.word	0xfffffc02
 8012714:	39500000 	.word	0x39500000
 8012718:	7ff00000 	.word	0x7ff00000
 801271c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012720:	d165      	bne.n	80127ee <_strtod_l+0x936>
 8012722:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012724:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012728:	b35a      	cbz	r2, 8012782 <_strtod_l+0x8ca>
 801272a:	4a9f      	ldr	r2, [pc, #636]	@ (80129a8 <_strtod_l+0xaf0>)
 801272c:	4293      	cmp	r3, r2
 801272e:	d12b      	bne.n	8012788 <_strtod_l+0x8d0>
 8012730:	9b08      	ldr	r3, [sp, #32]
 8012732:	4651      	mov	r1, sl
 8012734:	b303      	cbz	r3, 8012778 <_strtod_l+0x8c0>
 8012736:	4b9d      	ldr	r3, [pc, #628]	@ (80129ac <_strtod_l+0xaf4>)
 8012738:	465a      	mov	r2, fp
 801273a:	4013      	ands	r3, r2
 801273c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012740:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012744:	d81b      	bhi.n	801277e <_strtod_l+0x8c6>
 8012746:	0d1b      	lsrs	r3, r3, #20
 8012748:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801274c:	fa02 f303 	lsl.w	r3, r2, r3
 8012750:	4299      	cmp	r1, r3
 8012752:	d119      	bne.n	8012788 <_strtod_l+0x8d0>
 8012754:	4b96      	ldr	r3, [pc, #600]	@ (80129b0 <_strtod_l+0xaf8>)
 8012756:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012758:	429a      	cmp	r2, r3
 801275a:	d102      	bne.n	8012762 <_strtod_l+0x8aa>
 801275c:	3101      	adds	r1, #1
 801275e:	f43f adca 	beq.w	80122f6 <_strtod_l+0x43e>
 8012762:	4b92      	ldr	r3, [pc, #584]	@ (80129ac <_strtod_l+0xaf4>)
 8012764:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012766:	401a      	ands	r2, r3
 8012768:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801276c:	f04f 0a00 	mov.w	sl, #0
 8012770:	9b08      	ldr	r3, [sp, #32]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d1b8      	bne.n	80126e8 <_strtod_l+0x830>
 8012776:	e5c9      	b.n	801230c <_strtod_l+0x454>
 8012778:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801277c:	e7e8      	b.n	8012750 <_strtod_l+0x898>
 801277e:	4613      	mov	r3, r2
 8012780:	e7e6      	b.n	8012750 <_strtod_l+0x898>
 8012782:	ea53 030a 	orrs.w	r3, r3, sl
 8012786:	d0a1      	beq.n	80126cc <_strtod_l+0x814>
 8012788:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801278a:	b1db      	cbz	r3, 80127c4 <_strtod_l+0x90c>
 801278c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801278e:	4213      	tst	r3, r2
 8012790:	d0ee      	beq.n	8012770 <_strtod_l+0x8b8>
 8012792:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012794:	9a08      	ldr	r2, [sp, #32]
 8012796:	4650      	mov	r0, sl
 8012798:	4659      	mov	r1, fp
 801279a:	b1bb      	cbz	r3, 80127cc <_strtod_l+0x914>
 801279c:	f7ff fb6c 	bl	8011e78 <sulp>
 80127a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80127a4:	ec53 2b10 	vmov	r2, r3, d0
 80127a8:	f7ed fda8 	bl	80002fc <__adddf3>
 80127ac:	4682      	mov	sl, r0
 80127ae:	468b      	mov	fp, r1
 80127b0:	e7de      	b.n	8012770 <_strtod_l+0x8b8>
 80127b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80127b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80127ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80127be:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80127c2:	e7d5      	b.n	8012770 <_strtod_l+0x8b8>
 80127c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80127c6:	ea13 0f0a 	tst.w	r3, sl
 80127ca:	e7e1      	b.n	8012790 <_strtod_l+0x8d8>
 80127cc:	f7ff fb54 	bl	8011e78 <sulp>
 80127d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80127d4:	ec53 2b10 	vmov	r2, r3, d0
 80127d8:	f7ed fd8e 	bl	80002f8 <__aeabi_dsub>
 80127dc:	2200      	movs	r2, #0
 80127de:	2300      	movs	r3, #0
 80127e0:	4682      	mov	sl, r0
 80127e2:	468b      	mov	fp, r1
 80127e4:	f7ee f9a8 	bl	8000b38 <__aeabi_dcmpeq>
 80127e8:	2800      	cmp	r0, #0
 80127ea:	d0c1      	beq.n	8012770 <_strtod_l+0x8b8>
 80127ec:	e619      	b.n	8012422 <_strtod_l+0x56a>
 80127ee:	4641      	mov	r1, r8
 80127f0:	4620      	mov	r0, r4
 80127f2:	f7ff facb 	bl	8011d8c <__ratio>
 80127f6:	ec57 6b10 	vmov	r6, r7, d0
 80127fa:	2200      	movs	r2, #0
 80127fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012800:	4630      	mov	r0, r6
 8012802:	4639      	mov	r1, r7
 8012804:	f7ee f9ac 	bl	8000b60 <__aeabi_dcmple>
 8012808:	2800      	cmp	r0, #0
 801280a:	d06f      	beq.n	80128ec <_strtod_l+0xa34>
 801280c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801280e:	2b00      	cmp	r3, #0
 8012810:	d17a      	bne.n	8012908 <_strtod_l+0xa50>
 8012812:	f1ba 0f00 	cmp.w	sl, #0
 8012816:	d158      	bne.n	80128ca <_strtod_l+0xa12>
 8012818:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801281a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801281e:	2b00      	cmp	r3, #0
 8012820:	d15a      	bne.n	80128d8 <_strtod_l+0xa20>
 8012822:	4b64      	ldr	r3, [pc, #400]	@ (80129b4 <_strtod_l+0xafc>)
 8012824:	2200      	movs	r2, #0
 8012826:	4630      	mov	r0, r6
 8012828:	4639      	mov	r1, r7
 801282a:	f7ee f98f 	bl	8000b4c <__aeabi_dcmplt>
 801282e:	2800      	cmp	r0, #0
 8012830:	d159      	bne.n	80128e6 <_strtod_l+0xa2e>
 8012832:	4630      	mov	r0, r6
 8012834:	4639      	mov	r1, r7
 8012836:	4b60      	ldr	r3, [pc, #384]	@ (80129b8 <_strtod_l+0xb00>)
 8012838:	2200      	movs	r2, #0
 801283a:	f7ed ff15 	bl	8000668 <__aeabi_dmul>
 801283e:	4606      	mov	r6, r0
 8012840:	460f      	mov	r7, r1
 8012842:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012846:	9606      	str	r6, [sp, #24]
 8012848:	9307      	str	r3, [sp, #28]
 801284a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801284e:	4d57      	ldr	r5, [pc, #348]	@ (80129ac <_strtod_l+0xaf4>)
 8012850:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012856:	401d      	ands	r5, r3
 8012858:	4b58      	ldr	r3, [pc, #352]	@ (80129bc <_strtod_l+0xb04>)
 801285a:	429d      	cmp	r5, r3
 801285c:	f040 80b2 	bne.w	80129c4 <_strtod_l+0xb0c>
 8012860:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012862:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012866:	ec4b ab10 	vmov	d0, sl, fp
 801286a:	f7ff f9c7 	bl	8011bfc <__ulp>
 801286e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012872:	ec51 0b10 	vmov	r0, r1, d0
 8012876:	f7ed fef7 	bl	8000668 <__aeabi_dmul>
 801287a:	4652      	mov	r2, sl
 801287c:	465b      	mov	r3, fp
 801287e:	f7ed fd3d 	bl	80002fc <__adddf3>
 8012882:	460b      	mov	r3, r1
 8012884:	4949      	ldr	r1, [pc, #292]	@ (80129ac <_strtod_l+0xaf4>)
 8012886:	4a4e      	ldr	r2, [pc, #312]	@ (80129c0 <_strtod_l+0xb08>)
 8012888:	4019      	ands	r1, r3
 801288a:	4291      	cmp	r1, r2
 801288c:	4682      	mov	sl, r0
 801288e:	d942      	bls.n	8012916 <_strtod_l+0xa5e>
 8012890:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012892:	4b47      	ldr	r3, [pc, #284]	@ (80129b0 <_strtod_l+0xaf8>)
 8012894:	429a      	cmp	r2, r3
 8012896:	d103      	bne.n	80128a0 <_strtod_l+0x9e8>
 8012898:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801289a:	3301      	adds	r3, #1
 801289c:	f43f ad2b 	beq.w	80122f6 <_strtod_l+0x43e>
 80128a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80129b0 <_strtod_l+0xaf8>
 80128a4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80128a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80128aa:	9805      	ldr	r0, [sp, #20]
 80128ac:	f7fe fe72 	bl	8011594 <_Bfree>
 80128b0:	9805      	ldr	r0, [sp, #20]
 80128b2:	4649      	mov	r1, r9
 80128b4:	f7fe fe6e 	bl	8011594 <_Bfree>
 80128b8:	9805      	ldr	r0, [sp, #20]
 80128ba:	4641      	mov	r1, r8
 80128bc:	f7fe fe6a 	bl	8011594 <_Bfree>
 80128c0:	9805      	ldr	r0, [sp, #20]
 80128c2:	4621      	mov	r1, r4
 80128c4:	f7fe fe66 	bl	8011594 <_Bfree>
 80128c8:	e618      	b.n	80124fc <_strtod_l+0x644>
 80128ca:	f1ba 0f01 	cmp.w	sl, #1
 80128ce:	d103      	bne.n	80128d8 <_strtod_l+0xa20>
 80128d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	f43f ada5 	beq.w	8012422 <_strtod_l+0x56a>
 80128d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012988 <_strtod_l+0xad0>
 80128dc:	4f35      	ldr	r7, [pc, #212]	@ (80129b4 <_strtod_l+0xafc>)
 80128de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80128e2:	2600      	movs	r6, #0
 80128e4:	e7b1      	b.n	801284a <_strtod_l+0x992>
 80128e6:	4f34      	ldr	r7, [pc, #208]	@ (80129b8 <_strtod_l+0xb00>)
 80128e8:	2600      	movs	r6, #0
 80128ea:	e7aa      	b.n	8012842 <_strtod_l+0x98a>
 80128ec:	4b32      	ldr	r3, [pc, #200]	@ (80129b8 <_strtod_l+0xb00>)
 80128ee:	4630      	mov	r0, r6
 80128f0:	4639      	mov	r1, r7
 80128f2:	2200      	movs	r2, #0
 80128f4:	f7ed feb8 	bl	8000668 <__aeabi_dmul>
 80128f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128fa:	4606      	mov	r6, r0
 80128fc:	460f      	mov	r7, r1
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d09f      	beq.n	8012842 <_strtod_l+0x98a>
 8012902:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012906:	e7a0      	b.n	801284a <_strtod_l+0x992>
 8012908:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012990 <_strtod_l+0xad8>
 801290c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012910:	ec57 6b17 	vmov	r6, r7, d7
 8012914:	e799      	b.n	801284a <_strtod_l+0x992>
 8012916:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801291a:	9b08      	ldr	r3, [sp, #32]
 801291c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012920:	2b00      	cmp	r3, #0
 8012922:	d1c1      	bne.n	80128a8 <_strtod_l+0x9f0>
 8012924:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012928:	0d1b      	lsrs	r3, r3, #20
 801292a:	051b      	lsls	r3, r3, #20
 801292c:	429d      	cmp	r5, r3
 801292e:	d1bb      	bne.n	80128a8 <_strtod_l+0x9f0>
 8012930:	4630      	mov	r0, r6
 8012932:	4639      	mov	r1, r7
 8012934:	f7ee f9f8 	bl	8000d28 <__aeabi_d2lz>
 8012938:	f7ed fe68 	bl	800060c <__aeabi_l2d>
 801293c:	4602      	mov	r2, r0
 801293e:	460b      	mov	r3, r1
 8012940:	4630      	mov	r0, r6
 8012942:	4639      	mov	r1, r7
 8012944:	f7ed fcd8 	bl	80002f8 <__aeabi_dsub>
 8012948:	460b      	mov	r3, r1
 801294a:	4602      	mov	r2, r0
 801294c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012950:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012956:	ea46 060a 	orr.w	r6, r6, sl
 801295a:	431e      	orrs	r6, r3
 801295c:	d06f      	beq.n	8012a3e <_strtod_l+0xb86>
 801295e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012998 <_strtod_l+0xae0>)
 8012960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012964:	f7ee f8f2 	bl	8000b4c <__aeabi_dcmplt>
 8012968:	2800      	cmp	r0, #0
 801296a:	f47f accf 	bne.w	801230c <_strtod_l+0x454>
 801296e:	a30c      	add	r3, pc, #48	@ (adr r3, 80129a0 <_strtod_l+0xae8>)
 8012970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012974:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012978:	f7ee f906 	bl	8000b88 <__aeabi_dcmpgt>
 801297c:	2800      	cmp	r0, #0
 801297e:	d093      	beq.n	80128a8 <_strtod_l+0x9f0>
 8012980:	e4c4      	b.n	801230c <_strtod_l+0x454>
 8012982:	bf00      	nop
 8012984:	f3af 8000 	nop.w
 8012988:	00000000 	.word	0x00000000
 801298c:	bff00000 	.word	0xbff00000
 8012990:	00000000 	.word	0x00000000
 8012994:	3ff00000 	.word	0x3ff00000
 8012998:	94a03595 	.word	0x94a03595
 801299c:	3fdfffff 	.word	0x3fdfffff
 80129a0:	35afe535 	.word	0x35afe535
 80129a4:	3fe00000 	.word	0x3fe00000
 80129a8:	000fffff 	.word	0x000fffff
 80129ac:	7ff00000 	.word	0x7ff00000
 80129b0:	7fefffff 	.word	0x7fefffff
 80129b4:	3ff00000 	.word	0x3ff00000
 80129b8:	3fe00000 	.word	0x3fe00000
 80129bc:	7fe00000 	.word	0x7fe00000
 80129c0:	7c9fffff 	.word	0x7c9fffff
 80129c4:	9b08      	ldr	r3, [sp, #32]
 80129c6:	b323      	cbz	r3, 8012a12 <_strtod_l+0xb5a>
 80129c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80129cc:	d821      	bhi.n	8012a12 <_strtod_l+0xb5a>
 80129ce:	a328      	add	r3, pc, #160	@ (adr r3, 8012a70 <_strtod_l+0xbb8>)
 80129d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d4:	4630      	mov	r0, r6
 80129d6:	4639      	mov	r1, r7
 80129d8:	f7ee f8c2 	bl	8000b60 <__aeabi_dcmple>
 80129dc:	b1a0      	cbz	r0, 8012a08 <_strtod_l+0xb50>
 80129de:	4639      	mov	r1, r7
 80129e0:	4630      	mov	r0, r6
 80129e2:	f7ee f919 	bl	8000c18 <__aeabi_d2uiz>
 80129e6:	2801      	cmp	r0, #1
 80129e8:	bf38      	it	cc
 80129ea:	2001      	movcc	r0, #1
 80129ec:	f7ed fdc2 	bl	8000574 <__aeabi_ui2d>
 80129f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129f2:	4606      	mov	r6, r0
 80129f4:	460f      	mov	r7, r1
 80129f6:	b9fb      	cbnz	r3, 8012a38 <_strtod_l+0xb80>
 80129f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80129fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80129fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8012a00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012a04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012a08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012a0a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012a0e:	1b5b      	subs	r3, r3, r5
 8012a10:	9311      	str	r3, [sp, #68]	@ 0x44
 8012a12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012a16:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8012a1a:	f7ff f8ef 	bl	8011bfc <__ulp>
 8012a1e:	4650      	mov	r0, sl
 8012a20:	ec53 2b10 	vmov	r2, r3, d0
 8012a24:	4659      	mov	r1, fp
 8012a26:	f7ed fe1f 	bl	8000668 <__aeabi_dmul>
 8012a2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012a2e:	f7ed fc65 	bl	80002fc <__adddf3>
 8012a32:	4682      	mov	sl, r0
 8012a34:	468b      	mov	fp, r1
 8012a36:	e770      	b.n	801291a <_strtod_l+0xa62>
 8012a38:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8012a3c:	e7e0      	b.n	8012a00 <_strtod_l+0xb48>
 8012a3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012a78 <_strtod_l+0xbc0>)
 8012a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a44:	f7ee f882 	bl	8000b4c <__aeabi_dcmplt>
 8012a48:	e798      	b.n	801297c <_strtod_l+0xac4>
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012a4e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012a50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012a52:	6013      	str	r3, [r2, #0]
 8012a54:	f7ff ba6d 	b.w	8011f32 <_strtod_l+0x7a>
 8012a58:	2a65      	cmp	r2, #101	@ 0x65
 8012a5a:	f43f ab66 	beq.w	801212a <_strtod_l+0x272>
 8012a5e:	2a45      	cmp	r2, #69	@ 0x45
 8012a60:	f43f ab63 	beq.w	801212a <_strtod_l+0x272>
 8012a64:	2301      	movs	r3, #1
 8012a66:	f7ff bb9e 	b.w	80121a6 <_strtod_l+0x2ee>
 8012a6a:	bf00      	nop
 8012a6c:	f3af 8000 	nop.w
 8012a70:	ffc00000 	.word	0xffc00000
 8012a74:	41dfffff 	.word	0x41dfffff
 8012a78:	94a03595 	.word	0x94a03595
 8012a7c:	3fcfffff 	.word	0x3fcfffff

08012a80 <_strtod_r>:
 8012a80:	4b01      	ldr	r3, [pc, #4]	@ (8012a88 <_strtod_r+0x8>)
 8012a82:	f7ff ba19 	b.w	8011eb8 <_strtod_l>
 8012a86:	bf00      	nop
 8012a88:	200001cc 	.word	0x200001cc

08012a8c <_strtol_l.constprop.0>:
 8012a8c:	2b24      	cmp	r3, #36	@ 0x24
 8012a8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a92:	4686      	mov	lr, r0
 8012a94:	4690      	mov	r8, r2
 8012a96:	d801      	bhi.n	8012a9c <_strtol_l.constprop.0+0x10>
 8012a98:	2b01      	cmp	r3, #1
 8012a9a:	d106      	bne.n	8012aaa <_strtol_l.constprop.0+0x1e>
 8012a9c:	f7fd fe56 	bl	801074c <__errno>
 8012aa0:	2316      	movs	r3, #22
 8012aa2:	6003      	str	r3, [r0, #0]
 8012aa4:	2000      	movs	r0, #0
 8012aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012aaa:	4834      	ldr	r0, [pc, #208]	@ (8012b7c <_strtol_l.constprop.0+0xf0>)
 8012aac:	460d      	mov	r5, r1
 8012aae:	462a      	mov	r2, r5
 8012ab0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012ab4:	5d06      	ldrb	r6, [r0, r4]
 8012ab6:	f016 0608 	ands.w	r6, r6, #8
 8012aba:	d1f8      	bne.n	8012aae <_strtol_l.constprop.0+0x22>
 8012abc:	2c2d      	cmp	r4, #45	@ 0x2d
 8012abe:	d12d      	bne.n	8012b1c <_strtol_l.constprop.0+0x90>
 8012ac0:	782c      	ldrb	r4, [r5, #0]
 8012ac2:	2601      	movs	r6, #1
 8012ac4:	1c95      	adds	r5, r2, #2
 8012ac6:	f033 0210 	bics.w	r2, r3, #16
 8012aca:	d109      	bne.n	8012ae0 <_strtol_l.constprop.0+0x54>
 8012acc:	2c30      	cmp	r4, #48	@ 0x30
 8012ace:	d12a      	bne.n	8012b26 <_strtol_l.constprop.0+0x9a>
 8012ad0:	782a      	ldrb	r2, [r5, #0]
 8012ad2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012ad6:	2a58      	cmp	r2, #88	@ 0x58
 8012ad8:	d125      	bne.n	8012b26 <_strtol_l.constprop.0+0x9a>
 8012ada:	786c      	ldrb	r4, [r5, #1]
 8012adc:	2310      	movs	r3, #16
 8012ade:	3502      	adds	r5, #2
 8012ae0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012ae4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8012ae8:	2200      	movs	r2, #0
 8012aea:	fbbc f9f3 	udiv	r9, ip, r3
 8012aee:	4610      	mov	r0, r2
 8012af0:	fb03 ca19 	mls	sl, r3, r9, ip
 8012af4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012af8:	2f09      	cmp	r7, #9
 8012afa:	d81b      	bhi.n	8012b34 <_strtol_l.constprop.0+0xa8>
 8012afc:	463c      	mov	r4, r7
 8012afe:	42a3      	cmp	r3, r4
 8012b00:	dd27      	ble.n	8012b52 <_strtol_l.constprop.0+0xc6>
 8012b02:	1c57      	adds	r7, r2, #1
 8012b04:	d007      	beq.n	8012b16 <_strtol_l.constprop.0+0x8a>
 8012b06:	4581      	cmp	r9, r0
 8012b08:	d320      	bcc.n	8012b4c <_strtol_l.constprop.0+0xc0>
 8012b0a:	d101      	bne.n	8012b10 <_strtol_l.constprop.0+0x84>
 8012b0c:	45a2      	cmp	sl, r4
 8012b0e:	db1d      	blt.n	8012b4c <_strtol_l.constprop.0+0xc0>
 8012b10:	fb00 4003 	mla	r0, r0, r3, r4
 8012b14:	2201      	movs	r2, #1
 8012b16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b1a:	e7eb      	b.n	8012af4 <_strtol_l.constprop.0+0x68>
 8012b1c:	2c2b      	cmp	r4, #43	@ 0x2b
 8012b1e:	bf04      	itt	eq
 8012b20:	782c      	ldrbeq	r4, [r5, #0]
 8012b22:	1c95      	addeq	r5, r2, #2
 8012b24:	e7cf      	b.n	8012ac6 <_strtol_l.constprop.0+0x3a>
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d1da      	bne.n	8012ae0 <_strtol_l.constprop.0+0x54>
 8012b2a:	2c30      	cmp	r4, #48	@ 0x30
 8012b2c:	bf0c      	ite	eq
 8012b2e:	2308      	moveq	r3, #8
 8012b30:	230a      	movne	r3, #10
 8012b32:	e7d5      	b.n	8012ae0 <_strtol_l.constprop.0+0x54>
 8012b34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012b38:	2f19      	cmp	r7, #25
 8012b3a:	d801      	bhi.n	8012b40 <_strtol_l.constprop.0+0xb4>
 8012b3c:	3c37      	subs	r4, #55	@ 0x37
 8012b3e:	e7de      	b.n	8012afe <_strtol_l.constprop.0+0x72>
 8012b40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012b44:	2f19      	cmp	r7, #25
 8012b46:	d804      	bhi.n	8012b52 <_strtol_l.constprop.0+0xc6>
 8012b48:	3c57      	subs	r4, #87	@ 0x57
 8012b4a:	e7d8      	b.n	8012afe <_strtol_l.constprop.0+0x72>
 8012b4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012b50:	e7e1      	b.n	8012b16 <_strtol_l.constprop.0+0x8a>
 8012b52:	1c53      	adds	r3, r2, #1
 8012b54:	d108      	bne.n	8012b68 <_strtol_l.constprop.0+0xdc>
 8012b56:	2322      	movs	r3, #34	@ 0x22
 8012b58:	f8ce 3000 	str.w	r3, [lr]
 8012b5c:	4660      	mov	r0, ip
 8012b5e:	f1b8 0f00 	cmp.w	r8, #0
 8012b62:	d0a0      	beq.n	8012aa6 <_strtol_l.constprop.0+0x1a>
 8012b64:	1e69      	subs	r1, r5, #1
 8012b66:	e006      	b.n	8012b76 <_strtol_l.constprop.0+0xea>
 8012b68:	b106      	cbz	r6, 8012b6c <_strtol_l.constprop.0+0xe0>
 8012b6a:	4240      	negs	r0, r0
 8012b6c:	f1b8 0f00 	cmp.w	r8, #0
 8012b70:	d099      	beq.n	8012aa6 <_strtol_l.constprop.0+0x1a>
 8012b72:	2a00      	cmp	r2, #0
 8012b74:	d1f6      	bne.n	8012b64 <_strtol_l.constprop.0+0xd8>
 8012b76:	f8c8 1000 	str.w	r1, [r8]
 8012b7a:	e794      	b.n	8012aa6 <_strtol_l.constprop.0+0x1a>
 8012b7c:	08015b51 	.word	0x08015b51

08012b80 <_strtol_r>:
 8012b80:	f7ff bf84 	b.w	8012a8c <_strtol_l.constprop.0>

08012b84 <__ssputs_r>:
 8012b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b88:	688e      	ldr	r6, [r1, #8]
 8012b8a:	461f      	mov	r7, r3
 8012b8c:	42be      	cmp	r6, r7
 8012b8e:	680b      	ldr	r3, [r1, #0]
 8012b90:	4682      	mov	sl, r0
 8012b92:	460c      	mov	r4, r1
 8012b94:	4690      	mov	r8, r2
 8012b96:	d82d      	bhi.n	8012bf4 <__ssputs_r+0x70>
 8012b98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012b9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012ba0:	d026      	beq.n	8012bf0 <__ssputs_r+0x6c>
 8012ba2:	6965      	ldr	r5, [r4, #20]
 8012ba4:	6909      	ldr	r1, [r1, #16]
 8012ba6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012baa:	eba3 0901 	sub.w	r9, r3, r1
 8012bae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012bb2:	1c7b      	adds	r3, r7, #1
 8012bb4:	444b      	add	r3, r9
 8012bb6:	106d      	asrs	r5, r5, #1
 8012bb8:	429d      	cmp	r5, r3
 8012bba:	bf38      	it	cc
 8012bbc:	461d      	movcc	r5, r3
 8012bbe:	0553      	lsls	r3, r2, #21
 8012bc0:	d527      	bpl.n	8012c12 <__ssputs_r+0x8e>
 8012bc2:	4629      	mov	r1, r5
 8012bc4:	f7fc fbcc 	bl	800f360 <_malloc_r>
 8012bc8:	4606      	mov	r6, r0
 8012bca:	b360      	cbz	r0, 8012c26 <__ssputs_r+0xa2>
 8012bcc:	6921      	ldr	r1, [r4, #16]
 8012bce:	464a      	mov	r2, r9
 8012bd0:	f7fd fde9 	bl	80107a6 <memcpy>
 8012bd4:	89a3      	ldrh	r3, [r4, #12]
 8012bd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012bde:	81a3      	strh	r3, [r4, #12]
 8012be0:	6126      	str	r6, [r4, #16]
 8012be2:	6165      	str	r5, [r4, #20]
 8012be4:	444e      	add	r6, r9
 8012be6:	eba5 0509 	sub.w	r5, r5, r9
 8012bea:	6026      	str	r6, [r4, #0]
 8012bec:	60a5      	str	r5, [r4, #8]
 8012bee:	463e      	mov	r6, r7
 8012bf0:	42be      	cmp	r6, r7
 8012bf2:	d900      	bls.n	8012bf6 <__ssputs_r+0x72>
 8012bf4:	463e      	mov	r6, r7
 8012bf6:	6820      	ldr	r0, [r4, #0]
 8012bf8:	4632      	mov	r2, r6
 8012bfa:	4641      	mov	r1, r8
 8012bfc:	f000 fef7 	bl	80139ee <memmove>
 8012c00:	68a3      	ldr	r3, [r4, #8]
 8012c02:	1b9b      	subs	r3, r3, r6
 8012c04:	60a3      	str	r3, [r4, #8]
 8012c06:	6823      	ldr	r3, [r4, #0]
 8012c08:	4433      	add	r3, r6
 8012c0a:	6023      	str	r3, [r4, #0]
 8012c0c:	2000      	movs	r0, #0
 8012c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c12:	462a      	mov	r2, r5
 8012c14:	f001 faad 	bl	8014172 <_realloc_r>
 8012c18:	4606      	mov	r6, r0
 8012c1a:	2800      	cmp	r0, #0
 8012c1c:	d1e0      	bne.n	8012be0 <__ssputs_r+0x5c>
 8012c1e:	6921      	ldr	r1, [r4, #16]
 8012c20:	4650      	mov	r0, sl
 8012c22:	f7fe fc2d 	bl	8011480 <_free_r>
 8012c26:	230c      	movs	r3, #12
 8012c28:	f8ca 3000 	str.w	r3, [sl]
 8012c2c:	89a3      	ldrh	r3, [r4, #12]
 8012c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c32:	81a3      	strh	r3, [r4, #12]
 8012c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c38:	e7e9      	b.n	8012c0e <__ssputs_r+0x8a>
	...

08012c3c <_svfiprintf_r>:
 8012c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c40:	4698      	mov	r8, r3
 8012c42:	898b      	ldrh	r3, [r1, #12]
 8012c44:	061b      	lsls	r3, r3, #24
 8012c46:	b09d      	sub	sp, #116	@ 0x74
 8012c48:	4607      	mov	r7, r0
 8012c4a:	460d      	mov	r5, r1
 8012c4c:	4614      	mov	r4, r2
 8012c4e:	d510      	bpl.n	8012c72 <_svfiprintf_r+0x36>
 8012c50:	690b      	ldr	r3, [r1, #16]
 8012c52:	b973      	cbnz	r3, 8012c72 <_svfiprintf_r+0x36>
 8012c54:	2140      	movs	r1, #64	@ 0x40
 8012c56:	f7fc fb83 	bl	800f360 <_malloc_r>
 8012c5a:	6028      	str	r0, [r5, #0]
 8012c5c:	6128      	str	r0, [r5, #16]
 8012c5e:	b930      	cbnz	r0, 8012c6e <_svfiprintf_r+0x32>
 8012c60:	230c      	movs	r3, #12
 8012c62:	603b      	str	r3, [r7, #0]
 8012c64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c68:	b01d      	add	sp, #116	@ 0x74
 8012c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c6e:	2340      	movs	r3, #64	@ 0x40
 8012c70:	616b      	str	r3, [r5, #20]
 8012c72:	2300      	movs	r3, #0
 8012c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c76:	2320      	movs	r3, #32
 8012c78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c80:	2330      	movs	r3, #48	@ 0x30
 8012c82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012e20 <_svfiprintf_r+0x1e4>
 8012c86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c8a:	f04f 0901 	mov.w	r9, #1
 8012c8e:	4623      	mov	r3, r4
 8012c90:	469a      	mov	sl, r3
 8012c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c96:	b10a      	cbz	r2, 8012c9c <_svfiprintf_r+0x60>
 8012c98:	2a25      	cmp	r2, #37	@ 0x25
 8012c9a:	d1f9      	bne.n	8012c90 <_svfiprintf_r+0x54>
 8012c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8012ca0:	d00b      	beq.n	8012cba <_svfiprintf_r+0x7e>
 8012ca2:	465b      	mov	r3, fp
 8012ca4:	4622      	mov	r2, r4
 8012ca6:	4629      	mov	r1, r5
 8012ca8:	4638      	mov	r0, r7
 8012caa:	f7ff ff6b 	bl	8012b84 <__ssputs_r>
 8012cae:	3001      	adds	r0, #1
 8012cb0:	f000 80a7 	beq.w	8012e02 <_svfiprintf_r+0x1c6>
 8012cb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012cb6:	445a      	add	r2, fp
 8012cb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8012cba:	f89a 3000 	ldrb.w	r3, [sl]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	f000 809f 	beq.w	8012e02 <_svfiprintf_r+0x1c6>
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012cce:	f10a 0a01 	add.w	sl, sl, #1
 8012cd2:	9304      	str	r3, [sp, #16]
 8012cd4:	9307      	str	r3, [sp, #28]
 8012cd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012cda:	931a      	str	r3, [sp, #104]	@ 0x68
 8012cdc:	4654      	mov	r4, sl
 8012cde:	2205      	movs	r2, #5
 8012ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ce4:	484e      	ldr	r0, [pc, #312]	@ (8012e20 <_svfiprintf_r+0x1e4>)
 8012ce6:	f7ed faab 	bl	8000240 <memchr>
 8012cea:	9a04      	ldr	r2, [sp, #16]
 8012cec:	b9d8      	cbnz	r0, 8012d26 <_svfiprintf_r+0xea>
 8012cee:	06d0      	lsls	r0, r2, #27
 8012cf0:	bf44      	itt	mi
 8012cf2:	2320      	movmi	r3, #32
 8012cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cf8:	0711      	lsls	r1, r2, #28
 8012cfa:	bf44      	itt	mi
 8012cfc:	232b      	movmi	r3, #43	@ 0x2b
 8012cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d02:	f89a 3000 	ldrb.w	r3, [sl]
 8012d06:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d08:	d015      	beq.n	8012d36 <_svfiprintf_r+0xfa>
 8012d0a:	9a07      	ldr	r2, [sp, #28]
 8012d0c:	4654      	mov	r4, sl
 8012d0e:	2000      	movs	r0, #0
 8012d10:	f04f 0c0a 	mov.w	ip, #10
 8012d14:	4621      	mov	r1, r4
 8012d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d1a:	3b30      	subs	r3, #48	@ 0x30
 8012d1c:	2b09      	cmp	r3, #9
 8012d1e:	d94b      	bls.n	8012db8 <_svfiprintf_r+0x17c>
 8012d20:	b1b0      	cbz	r0, 8012d50 <_svfiprintf_r+0x114>
 8012d22:	9207      	str	r2, [sp, #28]
 8012d24:	e014      	b.n	8012d50 <_svfiprintf_r+0x114>
 8012d26:	eba0 0308 	sub.w	r3, r0, r8
 8012d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8012d2e:	4313      	orrs	r3, r2
 8012d30:	9304      	str	r3, [sp, #16]
 8012d32:	46a2      	mov	sl, r4
 8012d34:	e7d2      	b.n	8012cdc <_svfiprintf_r+0xa0>
 8012d36:	9b03      	ldr	r3, [sp, #12]
 8012d38:	1d19      	adds	r1, r3, #4
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	9103      	str	r1, [sp, #12]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	bfbb      	ittet	lt
 8012d42:	425b      	neglt	r3, r3
 8012d44:	f042 0202 	orrlt.w	r2, r2, #2
 8012d48:	9307      	strge	r3, [sp, #28]
 8012d4a:	9307      	strlt	r3, [sp, #28]
 8012d4c:	bfb8      	it	lt
 8012d4e:	9204      	strlt	r2, [sp, #16]
 8012d50:	7823      	ldrb	r3, [r4, #0]
 8012d52:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d54:	d10a      	bne.n	8012d6c <_svfiprintf_r+0x130>
 8012d56:	7863      	ldrb	r3, [r4, #1]
 8012d58:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d5a:	d132      	bne.n	8012dc2 <_svfiprintf_r+0x186>
 8012d5c:	9b03      	ldr	r3, [sp, #12]
 8012d5e:	1d1a      	adds	r2, r3, #4
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	9203      	str	r2, [sp, #12]
 8012d64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d68:	3402      	adds	r4, #2
 8012d6a:	9305      	str	r3, [sp, #20]
 8012d6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012e30 <_svfiprintf_r+0x1f4>
 8012d70:	7821      	ldrb	r1, [r4, #0]
 8012d72:	2203      	movs	r2, #3
 8012d74:	4650      	mov	r0, sl
 8012d76:	f7ed fa63 	bl	8000240 <memchr>
 8012d7a:	b138      	cbz	r0, 8012d8c <_svfiprintf_r+0x150>
 8012d7c:	9b04      	ldr	r3, [sp, #16]
 8012d7e:	eba0 000a 	sub.w	r0, r0, sl
 8012d82:	2240      	movs	r2, #64	@ 0x40
 8012d84:	4082      	lsls	r2, r0
 8012d86:	4313      	orrs	r3, r2
 8012d88:	3401      	adds	r4, #1
 8012d8a:	9304      	str	r3, [sp, #16]
 8012d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d90:	4824      	ldr	r0, [pc, #144]	@ (8012e24 <_svfiprintf_r+0x1e8>)
 8012d92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012d96:	2206      	movs	r2, #6
 8012d98:	f7ed fa52 	bl	8000240 <memchr>
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	d036      	beq.n	8012e0e <_svfiprintf_r+0x1d2>
 8012da0:	4b21      	ldr	r3, [pc, #132]	@ (8012e28 <_svfiprintf_r+0x1ec>)
 8012da2:	bb1b      	cbnz	r3, 8012dec <_svfiprintf_r+0x1b0>
 8012da4:	9b03      	ldr	r3, [sp, #12]
 8012da6:	3307      	adds	r3, #7
 8012da8:	f023 0307 	bic.w	r3, r3, #7
 8012dac:	3308      	adds	r3, #8
 8012dae:	9303      	str	r3, [sp, #12]
 8012db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012db2:	4433      	add	r3, r6
 8012db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012db6:	e76a      	b.n	8012c8e <_svfiprintf_r+0x52>
 8012db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012dbc:	460c      	mov	r4, r1
 8012dbe:	2001      	movs	r0, #1
 8012dc0:	e7a8      	b.n	8012d14 <_svfiprintf_r+0xd8>
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	3401      	adds	r4, #1
 8012dc6:	9305      	str	r3, [sp, #20]
 8012dc8:	4619      	mov	r1, r3
 8012dca:	f04f 0c0a 	mov.w	ip, #10
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dd4:	3a30      	subs	r2, #48	@ 0x30
 8012dd6:	2a09      	cmp	r2, #9
 8012dd8:	d903      	bls.n	8012de2 <_svfiprintf_r+0x1a6>
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d0c6      	beq.n	8012d6c <_svfiprintf_r+0x130>
 8012dde:	9105      	str	r1, [sp, #20]
 8012de0:	e7c4      	b.n	8012d6c <_svfiprintf_r+0x130>
 8012de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8012de6:	4604      	mov	r4, r0
 8012de8:	2301      	movs	r3, #1
 8012dea:	e7f0      	b.n	8012dce <_svfiprintf_r+0x192>
 8012dec:	ab03      	add	r3, sp, #12
 8012dee:	9300      	str	r3, [sp, #0]
 8012df0:	462a      	mov	r2, r5
 8012df2:	4b0e      	ldr	r3, [pc, #56]	@ (8012e2c <_svfiprintf_r+0x1f0>)
 8012df4:	a904      	add	r1, sp, #16
 8012df6:	4638      	mov	r0, r7
 8012df8:	f7fc fbde 	bl	800f5b8 <_printf_float>
 8012dfc:	1c42      	adds	r2, r0, #1
 8012dfe:	4606      	mov	r6, r0
 8012e00:	d1d6      	bne.n	8012db0 <_svfiprintf_r+0x174>
 8012e02:	89ab      	ldrh	r3, [r5, #12]
 8012e04:	065b      	lsls	r3, r3, #25
 8012e06:	f53f af2d 	bmi.w	8012c64 <_svfiprintf_r+0x28>
 8012e0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012e0c:	e72c      	b.n	8012c68 <_svfiprintf_r+0x2c>
 8012e0e:	ab03      	add	r3, sp, #12
 8012e10:	9300      	str	r3, [sp, #0]
 8012e12:	462a      	mov	r2, r5
 8012e14:	4b05      	ldr	r3, [pc, #20]	@ (8012e2c <_svfiprintf_r+0x1f0>)
 8012e16:	a904      	add	r1, sp, #16
 8012e18:	4638      	mov	r0, r7
 8012e1a:	f7fc fe65 	bl	800fae8 <_printf_i>
 8012e1e:	e7ed      	b.n	8012dfc <_svfiprintf_r+0x1c0>
 8012e20:	08015c51 	.word	0x08015c51
 8012e24:	08015c5b 	.word	0x08015c5b
 8012e28:	0800f5b9 	.word	0x0800f5b9
 8012e2c:	08012b85 	.word	0x08012b85
 8012e30:	08015c57 	.word	0x08015c57

08012e34 <_sungetc_r>:
 8012e34:	b538      	push	{r3, r4, r5, lr}
 8012e36:	1c4b      	adds	r3, r1, #1
 8012e38:	4614      	mov	r4, r2
 8012e3a:	d103      	bne.n	8012e44 <_sungetc_r+0x10>
 8012e3c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8012e40:	4628      	mov	r0, r5
 8012e42:	bd38      	pop	{r3, r4, r5, pc}
 8012e44:	8993      	ldrh	r3, [r2, #12]
 8012e46:	f023 0320 	bic.w	r3, r3, #32
 8012e4a:	8193      	strh	r3, [r2, #12]
 8012e4c:	6853      	ldr	r3, [r2, #4]
 8012e4e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8012e50:	b2cd      	uxtb	r5, r1
 8012e52:	b18a      	cbz	r2, 8012e78 <_sungetc_r+0x44>
 8012e54:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8012e56:	429a      	cmp	r2, r3
 8012e58:	dd08      	ble.n	8012e6c <_sungetc_r+0x38>
 8012e5a:	6823      	ldr	r3, [r4, #0]
 8012e5c:	1e5a      	subs	r2, r3, #1
 8012e5e:	6022      	str	r2, [r4, #0]
 8012e60:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012e64:	6863      	ldr	r3, [r4, #4]
 8012e66:	3301      	adds	r3, #1
 8012e68:	6063      	str	r3, [r4, #4]
 8012e6a:	e7e9      	b.n	8012e40 <_sungetc_r+0xc>
 8012e6c:	4621      	mov	r1, r4
 8012e6e:	f000 fd84 	bl	801397a <__submore>
 8012e72:	2800      	cmp	r0, #0
 8012e74:	d0f1      	beq.n	8012e5a <_sungetc_r+0x26>
 8012e76:	e7e1      	b.n	8012e3c <_sungetc_r+0x8>
 8012e78:	6921      	ldr	r1, [r4, #16]
 8012e7a:	6822      	ldr	r2, [r4, #0]
 8012e7c:	b141      	cbz	r1, 8012e90 <_sungetc_r+0x5c>
 8012e7e:	4291      	cmp	r1, r2
 8012e80:	d206      	bcs.n	8012e90 <_sungetc_r+0x5c>
 8012e82:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8012e86:	42a9      	cmp	r1, r5
 8012e88:	d102      	bne.n	8012e90 <_sungetc_r+0x5c>
 8012e8a:	3a01      	subs	r2, #1
 8012e8c:	6022      	str	r2, [r4, #0]
 8012e8e:	e7ea      	b.n	8012e66 <_sungetc_r+0x32>
 8012e90:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8012e94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e98:	6363      	str	r3, [r4, #52]	@ 0x34
 8012e9a:	2303      	movs	r3, #3
 8012e9c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012e9e:	4623      	mov	r3, r4
 8012ea0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012ea4:	6023      	str	r3, [r4, #0]
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	e7de      	b.n	8012e68 <_sungetc_r+0x34>

08012eaa <__ssrefill_r>:
 8012eaa:	b510      	push	{r4, lr}
 8012eac:	460c      	mov	r4, r1
 8012eae:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012eb0:	b169      	cbz	r1, 8012ece <__ssrefill_r+0x24>
 8012eb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012eb6:	4299      	cmp	r1, r3
 8012eb8:	d001      	beq.n	8012ebe <__ssrefill_r+0x14>
 8012eba:	f7fe fae1 	bl	8011480 <_free_r>
 8012ebe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012ec0:	6063      	str	r3, [r4, #4]
 8012ec2:	2000      	movs	r0, #0
 8012ec4:	6360      	str	r0, [r4, #52]	@ 0x34
 8012ec6:	b113      	cbz	r3, 8012ece <__ssrefill_r+0x24>
 8012ec8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012eca:	6023      	str	r3, [r4, #0]
 8012ecc:	bd10      	pop	{r4, pc}
 8012ece:	6923      	ldr	r3, [r4, #16]
 8012ed0:	6023      	str	r3, [r4, #0]
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	6063      	str	r3, [r4, #4]
 8012ed6:	89a3      	ldrh	r3, [r4, #12]
 8012ed8:	f043 0320 	orr.w	r3, r3, #32
 8012edc:	81a3      	strh	r3, [r4, #12]
 8012ede:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012ee2:	e7f3      	b.n	8012ecc <__ssrefill_r+0x22>

08012ee4 <__ssvfiscanf_r>:
 8012ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ee8:	460c      	mov	r4, r1
 8012eea:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012eee:	2100      	movs	r1, #0
 8012ef0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012ef4:	49a5      	ldr	r1, [pc, #660]	@ (801318c <__ssvfiscanf_r+0x2a8>)
 8012ef6:	91a0      	str	r1, [sp, #640]	@ 0x280
 8012ef8:	f10d 0804 	add.w	r8, sp, #4
 8012efc:	49a4      	ldr	r1, [pc, #656]	@ (8013190 <__ssvfiscanf_r+0x2ac>)
 8012efe:	4fa5      	ldr	r7, [pc, #660]	@ (8013194 <__ssvfiscanf_r+0x2b0>)
 8012f00:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8012f04:	4606      	mov	r6, r0
 8012f06:	91a1      	str	r1, [sp, #644]	@ 0x284
 8012f08:	9300      	str	r3, [sp, #0]
 8012f0a:	7813      	ldrb	r3, [r2, #0]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	f000 8158 	beq.w	80131c2 <__ssvfiscanf_r+0x2de>
 8012f12:	5cf9      	ldrb	r1, [r7, r3]
 8012f14:	f011 0108 	ands.w	r1, r1, #8
 8012f18:	f102 0501 	add.w	r5, r2, #1
 8012f1c:	d019      	beq.n	8012f52 <__ssvfiscanf_r+0x6e>
 8012f1e:	6863      	ldr	r3, [r4, #4]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	dd0f      	ble.n	8012f44 <__ssvfiscanf_r+0x60>
 8012f24:	6823      	ldr	r3, [r4, #0]
 8012f26:	781a      	ldrb	r2, [r3, #0]
 8012f28:	5cba      	ldrb	r2, [r7, r2]
 8012f2a:	0712      	lsls	r2, r2, #28
 8012f2c:	d401      	bmi.n	8012f32 <__ssvfiscanf_r+0x4e>
 8012f2e:	462a      	mov	r2, r5
 8012f30:	e7eb      	b.n	8012f0a <__ssvfiscanf_r+0x26>
 8012f32:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012f34:	3201      	adds	r2, #1
 8012f36:	9245      	str	r2, [sp, #276]	@ 0x114
 8012f38:	6862      	ldr	r2, [r4, #4]
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	3a01      	subs	r2, #1
 8012f3e:	6062      	str	r2, [r4, #4]
 8012f40:	6023      	str	r3, [r4, #0]
 8012f42:	e7ec      	b.n	8012f1e <__ssvfiscanf_r+0x3a>
 8012f44:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012f46:	4621      	mov	r1, r4
 8012f48:	4630      	mov	r0, r6
 8012f4a:	4798      	blx	r3
 8012f4c:	2800      	cmp	r0, #0
 8012f4e:	d0e9      	beq.n	8012f24 <__ssvfiscanf_r+0x40>
 8012f50:	e7ed      	b.n	8012f2e <__ssvfiscanf_r+0x4a>
 8012f52:	2b25      	cmp	r3, #37	@ 0x25
 8012f54:	d012      	beq.n	8012f7c <__ssvfiscanf_r+0x98>
 8012f56:	4699      	mov	r9, r3
 8012f58:	6863      	ldr	r3, [r4, #4]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	f340 8093 	ble.w	8013086 <__ssvfiscanf_r+0x1a2>
 8012f60:	6822      	ldr	r2, [r4, #0]
 8012f62:	7813      	ldrb	r3, [r2, #0]
 8012f64:	454b      	cmp	r3, r9
 8012f66:	f040 812c 	bne.w	80131c2 <__ssvfiscanf_r+0x2de>
 8012f6a:	6863      	ldr	r3, [r4, #4]
 8012f6c:	3b01      	subs	r3, #1
 8012f6e:	6063      	str	r3, [r4, #4]
 8012f70:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8012f72:	3201      	adds	r2, #1
 8012f74:	3301      	adds	r3, #1
 8012f76:	6022      	str	r2, [r4, #0]
 8012f78:	9345      	str	r3, [sp, #276]	@ 0x114
 8012f7a:	e7d8      	b.n	8012f2e <__ssvfiscanf_r+0x4a>
 8012f7c:	9141      	str	r1, [sp, #260]	@ 0x104
 8012f7e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012f80:	7853      	ldrb	r3, [r2, #1]
 8012f82:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f84:	bf02      	ittt	eq
 8012f86:	2310      	moveq	r3, #16
 8012f88:	1c95      	addeq	r5, r2, #2
 8012f8a:	9341      	streq	r3, [sp, #260]	@ 0x104
 8012f8c:	220a      	movs	r2, #10
 8012f8e:	46a9      	mov	r9, r5
 8012f90:	f819 1b01 	ldrb.w	r1, [r9], #1
 8012f94:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8012f98:	2b09      	cmp	r3, #9
 8012f9a:	d91e      	bls.n	8012fda <__ssvfiscanf_r+0xf6>
 8012f9c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8013198 <__ssvfiscanf_r+0x2b4>
 8012fa0:	2203      	movs	r2, #3
 8012fa2:	4650      	mov	r0, sl
 8012fa4:	f7ed f94c 	bl	8000240 <memchr>
 8012fa8:	b138      	cbz	r0, 8012fba <__ssvfiscanf_r+0xd6>
 8012faa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012fac:	eba0 000a 	sub.w	r0, r0, sl
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	4083      	lsls	r3, r0
 8012fb4:	4313      	orrs	r3, r2
 8012fb6:	9341      	str	r3, [sp, #260]	@ 0x104
 8012fb8:	464d      	mov	r5, r9
 8012fba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012fbe:	2b78      	cmp	r3, #120	@ 0x78
 8012fc0:	d806      	bhi.n	8012fd0 <__ssvfiscanf_r+0xec>
 8012fc2:	2b57      	cmp	r3, #87	@ 0x57
 8012fc4:	d810      	bhi.n	8012fe8 <__ssvfiscanf_r+0x104>
 8012fc6:	2b25      	cmp	r3, #37	@ 0x25
 8012fc8:	d0c5      	beq.n	8012f56 <__ssvfiscanf_r+0x72>
 8012fca:	d857      	bhi.n	801307c <__ssvfiscanf_r+0x198>
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d065      	beq.n	801309c <__ssvfiscanf_r+0x1b8>
 8012fd0:	2303      	movs	r3, #3
 8012fd2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012fd4:	230a      	movs	r3, #10
 8012fd6:	9342      	str	r3, [sp, #264]	@ 0x108
 8012fd8:	e078      	b.n	80130cc <__ssvfiscanf_r+0x1e8>
 8012fda:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012fdc:	fb02 1103 	mla	r1, r2, r3, r1
 8012fe0:	3930      	subs	r1, #48	@ 0x30
 8012fe2:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012fe4:	464d      	mov	r5, r9
 8012fe6:	e7d2      	b.n	8012f8e <__ssvfiscanf_r+0xaa>
 8012fe8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012fec:	2a20      	cmp	r2, #32
 8012fee:	d8ef      	bhi.n	8012fd0 <__ssvfiscanf_r+0xec>
 8012ff0:	a101      	add	r1, pc, #4	@ (adr r1, 8012ff8 <__ssvfiscanf_r+0x114>)
 8012ff2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012ff6:	bf00      	nop
 8012ff8:	080130ab 	.word	0x080130ab
 8012ffc:	08012fd1 	.word	0x08012fd1
 8013000:	08012fd1 	.word	0x08012fd1
 8013004:	08013105 	.word	0x08013105
 8013008:	08012fd1 	.word	0x08012fd1
 801300c:	08012fd1 	.word	0x08012fd1
 8013010:	08012fd1 	.word	0x08012fd1
 8013014:	08012fd1 	.word	0x08012fd1
 8013018:	08012fd1 	.word	0x08012fd1
 801301c:	08012fd1 	.word	0x08012fd1
 8013020:	08012fd1 	.word	0x08012fd1
 8013024:	0801311b 	.word	0x0801311b
 8013028:	08013101 	.word	0x08013101
 801302c:	08013083 	.word	0x08013083
 8013030:	08013083 	.word	0x08013083
 8013034:	08013083 	.word	0x08013083
 8013038:	08012fd1 	.word	0x08012fd1
 801303c:	080130bd 	.word	0x080130bd
 8013040:	08012fd1 	.word	0x08012fd1
 8013044:	08012fd1 	.word	0x08012fd1
 8013048:	08012fd1 	.word	0x08012fd1
 801304c:	08012fd1 	.word	0x08012fd1
 8013050:	0801312b 	.word	0x0801312b
 8013054:	080130c5 	.word	0x080130c5
 8013058:	080130a3 	.word	0x080130a3
 801305c:	08012fd1 	.word	0x08012fd1
 8013060:	08012fd1 	.word	0x08012fd1
 8013064:	08013127 	.word	0x08013127
 8013068:	08012fd1 	.word	0x08012fd1
 801306c:	08013101 	.word	0x08013101
 8013070:	08012fd1 	.word	0x08012fd1
 8013074:	08012fd1 	.word	0x08012fd1
 8013078:	080130ab 	.word	0x080130ab
 801307c:	3b45      	subs	r3, #69	@ 0x45
 801307e:	2b02      	cmp	r3, #2
 8013080:	d8a6      	bhi.n	8012fd0 <__ssvfiscanf_r+0xec>
 8013082:	2305      	movs	r3, #5
 8013084:	e021      	b.n	80130ca <__ssvfiscanf_r+0x1e6>
 8013086:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013088:	4621      	mov	r1, r4
 801308a:	4630      	mov	r0, r6
 801308c:	4798      	blx	r3
 801308e:	2800      	cmp	r0, #0
 8013090:	f43f af66 	beq.w	8012f60 <__ssvfiscanf_r+0x7c>
 8013094:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8013096:	2800      	cmp	r0, #0
 8013098:	f040 808b 	bne.w	80131b2 <__ssvfiscanf_r+0x2ce>
 801309c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80130a0:	e08b      	b.n	80131ba <__ssvfiscanf_r+0x2d6>
 80130a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80130a4:	f042 0220 	orr.w	r2, r2, #32
 80130a8:	9241      	str	r2, [sp, #260]	@ 0x104
 80130aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80130ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80130b0:	9241      	str	r2, [sp, #260]	@ 0x104
 80130b2:	2210      	movs	r2, #16
 80130b4:	2b6e      	cmp	r3, #110	@ 0x6e
 80130b6:	9242      	str	r2, [sp, #264]	@ 0x108
 80130b8:	d902      	bls.n	80130c0 <__ssvfiscanf_r+0x1dc>
 80130ba:	e005      	b.n	80130c8 <__ssvfiscanf_r+0x1e4>
 80130bc:	2300      	movs	r3, #0
 80130be:	9342      	str	r3, [sp, #264]	@ 0x108
 80130c0:	2303      	movs	r3, #3
 80130c2:	e002      	b.n	80130ca <__ssvfiscanf_r+0x1e6>
 80130c4:	2308      	movs	r3, #8
 80130c6:	9342      	str	r3, [sp, #264]	@ 0x108
 80130c8:	2304      	movs	r3, #4
 80130ca:	9347      	str	r3, [sp, #284]	@ 0x11c
 80130cc:	6863      	ldr	r3, [r4, #4]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	dd39      	ble.n	8013146 <__ssvfiscanf_r+0x262>
 80130d2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80130d4:	0659      	lsls	r1, r3, #25
 80130d6:	d404      	bmi.n	80130e2 <__ssvfiscanf_r+0x1fe>
 80130d8:	6823      	ldr	r3, [r4, #0]
 80130da:	781a      	ldrb	r2, [r3, #0]
 80130dc:	5cba      	ldrb	r2, [r7, r2]
 80130de:	0712      	lsls	r2, r2, #28
 80130e0:	d438      	bmi.n	8013154 <__ssvfiscanf_r+0x270>
 80130e2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80130e4:	2b02      	cmp	r3, #2
 80130e6:	dc47      	bgt.n	8013178 <__ssvfiscanf_r+0x294>
 80130e8:	466b      	mov	r3, sp
 80130ea:	4622      	mov	r2, r4
 80130ec:	a941      	add	r1, sp, #260	@ 0x104
 80130ee:	4630      	mov	r0, r6
 80130f0:	f000 f9ae 	bl	8013450 <_scanf_chars>
 80130f4:	2801      	cmp	r0, #1
 80130f6:	d064      	beq.n	80131c2 <__ssvfiscanf_r+0x2de>
 80130f8:	2802      	cmp	r0, #2
 80130fa:	f47f af18 	bne.w	8012f2e <__ssvfiscanf_r+0x4a>
 80130fe:	e7c9      	b.n	8013094 <__ssvfiscanf_r+0x1b0>
 8013100:	220a      	movs	r2, #10
 8013102:	e7d7      	b.n	80130b4 <__ssvfiscanf_r+0x1d0>
 8013104:	4629      	mov	r1, r5
 8013106:	4640      	mov	r0, r8
 8013108:	f000 fbfe 	bl	8013908 <__sccl>
 801310c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801310e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013112:	9341      	str	r3, [sp, #260]	@ 0x104
 8013114:	4605      	mov	r5, r0
 8013116:	2301      	movs	r3, #1
 8013118:	e7d7      	b.n	80130ca <__ssvfiscanf_r+0x1e6>
 801311a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801311c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013120:	9341      	str	r3, [sp, #260]	@ 0x104
 8013122:	2300      	movs	r3, #0
 8013124:	e7d1      	b.n	80130ca <__ssvfiscanf_r+0x1e6>
 8013126:	2302      	movs	r3, #2
 8013128:	e7cf      	b.n	80130ca <__ssvfiscanf_r+0x1e6>
 801312a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801312c:	06c3      	lsls	r3, r0, #27
 801312e:	f53f aefe 	bmi.w	8012f2e <__ssvfiscanf_r+0x4a>
 8013132:	9b00      	ldr	r3, [sp, #0]
 8013134:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013136:	1d19      	adds	r1, r3, #4
 8013138:	9100      	str	r1, [sp, #0]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	07c0      	lsls	r0, r0, #31
 801313e:	bf4c      	ite	mi
 8013140:	801a      	strhmi	r2, [r3, #0]
 8013142:	601a      	strpl	r2, [r3, #0]
 8013144:	e6f3      	b.n	8012f2e <__ssvfiscanf_r+0x4a>
 8013146:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013148:	4621      	mov	r1, r4
 801314a:	4630      	mov	r0, r6
 801314c:	4798      	blx	r3
 801314e:	2800      	cmp	r0, #0
 8013150:	d0bf      	beq.n	80130d2 <__ssvfiscanf_r+0x1ee>
 8013152:	e79f      	b.n	8013094 <__ssvfiscanf_r+0x1b0>
 8013154:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013156:	3201      	adds	r2, #1
 8013158:	9245      	str	r2, [sp, #276]	@ 0x114
 801315a:	6862      	ldr	r2, [r4, #4]
 801315c:	3a01      	subs	r2, #1
 801315e:	2a00      	cmp	r2, #0
 8013160:	6062      	str	r2, [r4, #4]
 8013162:	dd02      	ble.n	801316a <__ssvfiscanf_r+0x286>
 8013164:	3301      	adds	r3, #1
 8013166:	6023      	str	r3, [r4, #0]
 8013168:	e7b6      	b.n	80130d8 <__ssvfiscanf_r+0x1f4>
 801316a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801316c:	4621      	mov	r1, r4
 801316e:	4630      	mov	r0, r6
 8013170:	4798      	blx	r3
 8013172:	2800      	cmp	r0, #0
 8013174:	d0b0      	beq.n	80130d8 <__ssvfiscanf_r+0x1f4>
 8013176:	e78d      	b.n	8013094 <__ssvfiscanf_r+0x1b0>
 8013178:	2b04      	cmp	r3, #4
 801317a:	dc0f      	bgt.n	801319c <__ssvfiscanf_r+0x2b8>
 801317c:	466b      	mov	r3, sp
 801317e:	4622      	mov	r2, r4
 8013180:	a941      	add	r1, sp, #260	@ 0x104
 8013182:	4630      	mov	r0, r6
 8013184:	f000 f9be 	bl	8013504 <_scanf_i>
 8013188:	e7b4      	b.n	80130f4 <__ssvfiscanf_r+0x210>
 801318a:	bf00      	nop
 801318c:	08012e35 	.word	0x08012e35
 8013190:	08012eab 	.word	0x08012eab
 8013194:	08015b51 	.word	0x08015b51
 8013198:	08015c57 	.word	0x08015c57
 801319c:	4b0a      	ldr	r3, [pc, #40]	@ (80131c8 <__ssvfiscanf_r+0x2e4>)
 801319e:	2b00      	cmp	r3, #0
 80131a0:	f43f aec5 	beq.w	8012f2e <__ssvfiscanf_r+0x4a>
 80131a4:	466b      	mov	r3, sp
 80131a6:	4622      	mov	r2, r4
 80131a8:	a941      	add	r1, sp, #260	@ 0x104
 80131aa:	4630      	mov	r0, r6
 80131ac:	f7fc fdbc 	bl	800fd28 <_scanf_float>
 80131b0:	e7a0      	b.n	80130f4 <__ssvfiscanf_r+0x210>
 80131b2:	89a3      	ldrh	r3, [r4, #12]
 80131b4:	065b      	lsls	r3, r3, #25
 80131b6:	f53f af71 	bmi.w	801309c <__ssvfiscanf_r+0x1b8>
 80131ba:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80131be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131c2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80131c4:	e7f9      	b.n	80131ba <__ssvfiscanf_r+0x2d6>
 80131c6:	bf00      	nop
 80131c8:	0800fd29 	.word	0x0800fd29

080131cc <__sfputc_r>:
 80131cc:	6893      	ldr	r3, [r2, #8]
 80131ce:	3b01      	subs	r3, #1
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	b410      	push	{r4}
 80131d4:	6093      	str	r3, [r2, #8]
 80131d6:	da08      	bge.n	80131ea <__sfputc_r+0x1e>
 80131d8:	6994      	ldr	r4, [r2, #24]
 80131da:	42a3      	cmp	r3, r4
 80131dc:	db01      	blt.n	80131e2 <__sfputc_r+0x16>
 80131de:	290a      	cmp	r1, #10
 80131e0:	d103      	bne.n	80131ea <__sfputc_r+0x1e>
 80131e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131e6:	f7fd b9a8 	b.w	801053a <__swbuf_r>
 80131ea:	6813      	ldr	r3, [r2, #0]
 80131ec:	1c58      	adds	r0, r3, #1
 80131ee:	6010      	str	r0, [r2, #0]
 80131f0:	7019      	strb	r1, [r3, #0]
 80131f2:	4608      	mov	r0, r1
 80131f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131f8:	4770      	bx	lr

080131fa <__sfputs_r>:
 80131fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131fc:	4606      	mov	r6, r0
 80131fe:	460f      	mov	r7, r1
 8013200:	4614      	mov	r4, r2
 8013202:	18d5      	adds	r5, r2, r3
 8013204:	42ac      	cmp	r4, r5
 8013206:	d101      	bne.n	801320c <__sfputs_r+0x12>
 8013208:	2000      	movs	r0, #0
 801320a:	e007      	b.n	801321c <__sfputs_r+0x22>
 801320c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013210:	463a      	mov	r2, r7
 8013212:	4630      	mov	r0, r6
 8013214:	f7ff ffda 	bl	80131cc <__sfputc_r>
 8013218:	1c43      	adds	r3, r0, #1
 801321a:	d1f3      	bne.n	8013204 <__sfputs_r+0xa>
 801321c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013220 <_vfiprintf_r>:
 8013220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013224:	460d      	mov	r5, r1
 8013226:	b09d      	sub	sp, #116	@ 0x74
 8013228:	4614      	mov	r4, r2
 801322a:	4698      	mov	r8, r3
 801322c:	4606      	mov	r6, r0
 801322e:	b118      	cbz	r0, 8013238 <_vfiprintf_r+0x18>
 8013230:	6a03      	ldr	r3, [r0, #32]
 8013232:	b90b      	cbnz	r3, 8013238 <_vfiprintf_r+0x18>
 8013234:	f7fd f818 	bl	8010268 <__sinit>
 8013238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801323a:	07d9      	lsls	r1, r3, #31
 801323c:	d405      	bmi.n	801324a <_vfiprintf_r+0x2a>
 801323e:	89ab      	ldrh	r3, [r5, #12]
 8013240:	059a      	lsls	r2, r3, #22
 8013242:	d402      	bmi.n	801324a <_vfiprintf_r+0x2a>
 8013244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013246:	f7fd faac 	bl	80107a2 <__retarget_lock_acquire_recursive>
 801324a:	89ab      	ldrh	r3, [r5, #12]
 801324c:	071b      	lsls	r3, r3, #28
 801324e:	d501      	bpl.n	8013254 <_vfiprintf_r+0x34>
 8013250:	692b      	ldr	r3, [r5, #16]
 8013252:	b99b      	cbnz	r3, 801327c <_vfiprintf_r+0x5c>
 8013254:	4629      	mov	r1, r5
 8013256:	4630      	mov	r0, r6
 8013258:	f7fd f9ae 	bl	80105b8 <__swsetup_r>
 801325c:	b170      	cbz	r0, 801327c <_vfiprintf_r+0x5c>
 801325e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013260:	07dc      	lsls	r4, r3, #31
 8013262:	d504      	bpl.n	801326e <_vfiprintf_r+0x4e>
 8013264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013268:	b01d      	add	sp, #116	@ 0x74
 801326a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801326e:	89ab      	ldrh	r3, [r5, #12]
 8013270:	0598      	lsls	r0, r3, #22
 8013272:	d4f7      	bmi.n	8013264 <_vfiprintf_r+0x44>
 8013274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013276:	f7fd fa95 	bl	80107a4 <__retarget_lock_release_recursive>
 801327a:	e7f3      	b.n	8013264 <_vfiprintf_r+0x44>
 801327c:	2300      	movs	r3, #0
 801327e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013280:	2320      	movs	r3, #32
 8013282:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013286:	f8cd 800c 	str.w	r8, [sp, #12]
 801328a:	2330      	movs	r3, #48	@ 0x30
 801328c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801343c <_vfiprintf_r+0x21c>
 8013290:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013294:	f04f 0901 	mov.w	r9, #1
 8013298:	4623      	mov	r3, r4
 801329a:	469a      	mov	sl, r3
 801329c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132a0:	b10a      	cbz	r2, 80132a6 <_vfiprintf_r+0x86>
 80132a2:	2a25      	cmp	r2, #37	@ 0x25
 80132a4:	d1f9      	bne.n	801329a <_vfiprintf_r+0x7a>
 80132a6:	ebba 0b04 	subs.w	fp, sl, r4
 80132aa:	d00b      	beq.n	80132c4 <_vfiprintf_r+0xa4>
 80132ac:	465b      	mov	r3, fp
 80132ae:	4622      	mov	r2, r4
 80132b0:	4629      	mov	r1, r5
 80132b2:	4630      	mov	r0, r6
 80132b4:	f7ff ffa1 	bl	80131fa <__sfputs_r>
 80132b8:	3001      	adds	r0, #1
 80132ba:	f000 80a7 	beq.w	801340c <_vfiprintf_r+0x1ec>
 80132be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80132c0:	445a      	add	r2, fp
 80132c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80132c4:	f89a 3000 	ldrb.w	r3, [sl]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	f000 809f 	beq.w	801340c <_vfiprintf_r+0x1ec>
 80132ce:	2300      	movs	r3, #0
 80132d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80132d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80132d8:	f10a 0a01 	add.w	sl, sl, #1
 80132dc:	9304      	str	r3, [sp, #16]
 80132de:	9307      	str	r3, [sp, #28]
 80132e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80132e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80132e6:	4654      	mov	r4, sl
 80132e8:	2205      	movs	r2, #5
 80132ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132ee:	4853      	ldr	r0, [pc, #332]	@ (801343c <_vfiprintf_r+0x21c>)
 80132f0:	f7ec ffa6 	bl	8000240 <memchr>
 80132f4:	9a04      	ldr	r2, [sp, #16]
 80132f6:	b9d8      	cbnz	r0, 8013330 <_vfiprintf_r+0x110>
 80132f8:	06d1      	lsls	r1, r2, #27
 80132fa:	bf44      	itt	mi
 80132fc:	2320      	movmi	r3, #32
 80132fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013302:	0713      	lsls	r3, r2, #28
 8013304:	bf44      	itt	mi
 8013306:	232b      	movmi	r3, #43	@ 0x2b
 8013308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801330c:	f89a 3000 	ldrb.w	r3, [sl]
 8013310:	2b2a      	cmp	r3, #42	@ 0x2a
 8013312:	d015      	beq.n	8013340 <_vfiprintf_r+0x120>
 8013314:	9a07      	ldr	r2, [sp, #28]
 8013316:	4654      	mov	r4, sl
 8013318:	2000      	movs	r0, #0
 801331a:	f04f 0c0a 	mov.w	ip, #10
 801331e:	4621      	mov	r1, r4
 8013320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013324:	3b30      	subs	r3, #48	@ 0x30
 8013326:	2b09      	cmp	r3, #9
 8013328:	d94b      	bls.n	80133c2 <_vfiprintf_r+0x1a2>
 801332a:	b1b0      	cbz	r0, 801335a <_vfiprintf_r+0x13a>
 801332c:	9207      	str	r2, [sp, #28]
 801332e:	e014      	b.n	801335a <_vfiprintf_r+0x13a>
 8013330:	eba0 0308 	sub.w	r3, r0, r8
 8013334:	fa09 f303 	lsl.w	r3, r9, r3
 8013338:	4313      	orrs	r3, r2
 801333a:	9304      	str	r3, [sp, #16]
 801333c:	46a2      	mov	sl, r4
 801333e:	e7d2      	b.n	80132e6 <_vfiprintf_r+0xc6>
 8013340:	9b03      	ldr	r3, [sp, #12]
 8013342:	1d19      	adds	r1, r3, #4
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	9103      	str	r1, [sp, #12]
 8013348:	2b00      	cmp	r3, #0
 801334a:	bfbb      	ittet	lt
 801334c:	425b      	neglt	r3, r3
 801334e:	f042 0202 	orrlt.w	r2, r2, #2
 8013352:	9307      	strge	r3, [sp, #28]
 8013354:	9307      	strlt	r3, [sp, #28]
 8013356:	bfb8      	it	lt
 8013358:	9204      	strlt	r2, [sp, #16]
 801335a:	7823      	ldrb	r3, [r4, #0]
 801335c:	2b2e      	cmp	r3, #46	@ 0x2e
 801335e:	d10a      	bne.n	8013376 <_vfiprintf_r+0x156>
 8013360:	7863      	ldrb	r3, [r4, #1]
 8013362:	2b2a      	cmp	r3, #42	@ 0x2a
 8013364:	d132      	bne.n	80133cc <_vfiprintf_r+0x1ac>
 8013366:	9b03      	ldr	r3, [sp, #12]
 8013368:	1d1a      	adds	r2, r3, #4
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	9203      	str	r2, [sp, #12]
 801336e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013372:	3402      	adds	r4, #2
 8013374:	9305      	str	r3, [sp, #20]
 8013376:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801344c <_vfiprintf_r+0x22c>
 801337a:	7821      	ldrb	r1, [r4, #0]
 801337c:	2203      	movs	r2, #3
 801337e:	4650      	mov	r0, sl
 8013380:	f7ec ff5e 	bl	8000240 <memchr>
 8013384:	b138      	cbz	r0, 8013396 <_vfiprintf_r+0x176>
 8013386:	9b04      	ldr	r3, [sp, #16]
 8013388:	eba0 000a 	sub.w	r0, r0, sl
 801338c:	2240      	movs	r2, #64	@ 0x40
 801338e:	4082      	lsls	r2, r0
 8013390:	4313      	orrs	r3, r2
 8013392:	3401      	adds	r4, #1
 8013394:	9304      	str	r3, [sp, #16]
 8013396:	f814 1b01 	ldrb.w	r1, [r4], #1
 801339a:	4829      	ldr	r0, [pc, #164]	@ (8013440 <_vfiprintf_r+0x220>)
 801339c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80133a0:	2206      	movs	r2, #6
 80133a2:	f7ec ff4d 	bl	8000240 <memchr>
 80133a6:	2800      	cmp	r0, #0
 80133a8:	d03f      	beq.n	801342a <_vfiprintf_r+0x20a>
 80133aa:	4b26      	ldr	r3, [pc, #152]	@ (8013444 <_vfiprintf_r+0x224>)
 80133ac:	bb1b      	cbnz	r3, 80133f6 <_vfiprintf_r+0x1d6>
 80133ae:	9b03      	ldr	r3, [sp, #12]
 80133b0:	3307      	adds	r3, #7
 80133b2:	f023 0307 	bic.w	r3, r3, #7
 80133b6:	3308      	adds	r3, #8
 80133b8:	9303      	str	r3, [sp, #12]
 80133ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133bc:	443b      	add	r3, r7
 80133be:	9309      	str	r3, [sp, #36]	@ 0x24
 80133c0:	e76a      	b.n	8013298 <_vfiprintf_r+0x78>
 80133c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80133c6:	460c      	mov	r4, r1
 80133c8:	2001      	movs	r0, #1
 80133ca:	e7a8      	b.n	801331e <_vfiprintf_r+0xfe>
 80133cc:	2300      	movs	r3, #0
 80133ce:	3401      	adds	r4, #1
 80133d0:	9305      	str	r3, [sp, #20]
 80133d2:	4619      	mov	r1, r3
 80133d4:	f04f 0c0a 	mov.w	ip, #10
 80133d8:	4620      	mov	r0, r4
 80133da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80133de:	3a30      	subs	r2, #48	@ 0x30
 80133e0:	2a09      	cmp	r2, #9
 80133e2:	d903      	bls.n	80133ec <_vfiprintf_r+0x1cc>
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d0c6      	beq.n	8013376 <_vfiprintf_r+0x156>
 80133e8:	9105      	str	r1, [sp, #20]
 80133ea:	e7c4      	b.n	8013376 <_vfiprintf_r+0x156>
 80133ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80133f0:	4604      	mov	r4, r0
 80133f2:	2301      	movs	r3, #1
 80133f4:	e7f0      	b.n	80133d8 <_vfiprintf_r+0x1b8>
 80133f6:	ab03      	add	r3, sp, #12
 80133f8:	9300      	str	r3, [sp, #0]
 80133fa:	462a      	mov	r2, r5
 80133fc:	4b12      	ldr	r3, [pc, #72]	@ (8013448 <_vfiprintf_r+0x228>)
 80133fe:	a904      	add	r1, sp, #16
 8013400:	4630      	mov	r0, r6
 8013402:	f7fc f8d9 	bl	800f5b8 <_printf_float>
 8013406:	4607      	mov	r7, r0
 8013408:	1c78      	adds	r0, r7, #1
 801340a:	d1d6      	bne.n	80133ba <_vfiprintf_r+0x19a>
 801340c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801340e:	07d9      	lsls	r1, r3, #31
 8013410:	d405      	bmi.n	801341e <_vfiprintf_r+0x1fe>
 8013412:	89ab      	ldrh	r3, [r5, #12]
 8013414:	059a      	lsls	r2, r3, #22
 8013416:	d402      	bmi.n	801341e <_vfiprintf_r+0x1fe>
 8013418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801341a:	f7fd f9c3 	bl	80107a4 <__retarget_lock_release_recursive>
 801341e:	89ab      	ldrh	r3, [r5, #12]
 8013420:	065b      	lsls	r3, r3, #25
 8013422:	f53f af1f 	bmi.w	8013264 <_vfiprintf_r+0x44>
 8013426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013428:	e71e      	b.n	8013268 <_vfiprintf_r+0x48>
 801342a:	ab03      	add	r3, sp, #12
 801342c:	9300      	str	r3, [sp, #0]
 801342e:	462a      	mov	r2, r5
 8013430:	4b05      	ldr	r3, [pc, #20]	@ (8013448 <_vfiprintf_r+0x228>)
 8013432:	a904      	add	r1, sp, #16
 8013434:	4630      	mov	r0, r6
 8013436:	f7fc fb57 	bl	800fae8 <_printf_i>
 801343a:	e7e4      	b.n	8013406 <_vfiprintf_r+0x1e6>
 801343c:	08015c51 	.word	0x08015c51
 8013440:	08015c5b 	.word	0x08015c5b
 8013444:	0800f5b9 	.word	0x0800f5b9
 8013448:	080131fb 	.word	0x080131fb
 801344c:	08015c57 	.word	0x08015c57

08013450 <_scanf_chars>:
 8013450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013454:	4615      	mov	r5, r2
 8013456:	688a      	ldr	r2, [r1, #8]
 8013458:	4680      	mov	r8, r0
 801345a:	460c      	mov	r4, r1
 801345c:	b932      	cbnz	r2, 801346c <_scanf_chars+0x1c>
 801345e:	698a      	ldr	r2, [r1, #24]
 8013460:	2a00      	cmp	r2, #0
 8013462:	bf14      	ite	ne
 8013464:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8013468:	2201      	moveq	r2, #1
 801346a:	608a      	str	r2, [r1, #8]
 801346c:	6822      	ldr	r2, [r4, #0]
 801346e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8013500 <_scanf_chars+0xb0>
 8013472:	06d1      	lsls	r1, r2, #27
 8013474:	bf5f      	itttt	pl
 8013476:	681a      	ldrpl	r2, [r3, #0]
 8013478:	1d11      	addpl	r1, r2, #4
 801347a:	6019      	strpl	r1, [r3, #0]
 801347c:	6816      	ldrpl	r6, [r2, #0]
 801347e:	2700      	movs	r7, #0
 8013480:	69a0      	ldr	r0, [r4, #24]
 8013482:	b188      	cbz	r0, 80134a8 <_scanf_chars+0x58>
 8013484:	2801      	cmp	r0, #1
 8013486:	d107      	bne.n	8013498 <_scanf_chars+0x48>
 8013488:	682b      	ldr	r3, [r5, #0]
 801348a:	781a      	ldrb	r2, [r3, #0]
 801348c:	6963      	ldr	r3, [r4, #20]
 801348e:	5c9b      	ldrb	r3, [r3, r2]
 8013490:	b953      	cbnz	r3, 80134a8 <_scanf_chars+0x58>
 8013492:	2f00      	cmp	r7, #0
 8013494:	d031      	beq.n	80134fa <_scanf_chars+0xaa>
 8013496:	e022      	b.n	80134de <_scanf_chars+0x8e>
 8013498:	2802      	cmp	r0, #2
 801349a:	d120      	bne.n	80134de <_scanf_chars+0x8e>
 801349c:	682b      	ldr	r3, [r5, #0]
 801349e:	781b      	ldrb	r3, [r3, #0]
 80134a0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80134a4:	071b      	lsls	r3, r3, #28
 80134a6:	d41a      	bmi.n	80134de <_scanf_chars+0x8e>
 80134a8:	6823      	ldr	r3, [r4, #0]
 80134aa:	06da      	lsls	r2, r3, #27
 80134ac:	bf5e      	ittt	pl
 80134ae:	682b      	ldrpl	r3, [r5, #0]
 80134b0:	781b      	ldrbpl	r3, [r3, #0]
 80134b2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80134b6:	682a      	ldr	r2, [r5, #0]
 80134b8:	686b      	ldr	r3, [r5, #4]
 80134ba:	3201      	adds	r2, #1
 80134bc:	602a      	str	r2, [r5, #0]
 80134be:	68a2      	ldr	r2, [r4, #8]
 80134c0:	3b01      	subs	r3, #1
 80134c2:	3a01      	subs	r2, #1
 80134c4:	606b      	str	r3, [r5, #4]
 80134c6:	3701      	adds	r7, #1
 80134c8:	60a2      	str	r2, [r4, #8]
 80134ca:	b142      	cbz	r2, 80134de <_scanf_chars+0x8e>
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	dcd7      	bgt.n	8013480 <_scanf_chars+0x30>
 80134d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80134d4:	4629      	mov	r1, r5
 80134d6:	4640      	mov	r0, r8
 80134d8:	4798      	blx	r3
 80134da:	2800      	cmp	r0, #0
 80134dc:	d0d0      	beq.n	8013480 <_scanf_chars+0x30>
 80134de:	6823      	ldr	r3, [r4, #0]
 80134e0:	f013 0310 	ands.w	r3, r3, #16
 80134e4:	d105      	bne.n	80134f2 <_scanf_chars+0xa2>
 80134e6:	68e2      	ldr	r2, [r4, #12]
 80134e8:	3201      	adds	r2, #1
 80134ea:	60e2      	str	r2, [r4, #12]
 80134ec:	69a2      	ldr	r2, [r4, #24]
 80134ee:	b102      	cbz	r2, 80134f2 <_scanf_chars+0xa2>
 80134f0:	7033      	strb	r3, [r6, #0]
 80134f2:	6923      	ldr	r3, [r4, #16]
 80134f4:	443b      	add	r3, r7
 80134f6:	6123      	str	r3, [r4, #16]
 80134f8:	2000      	movs	r0, #0
 80134fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134fe:	bf00      	nop
 8013500:	08015b51 	.word	0x08015b51

08013504 <_scanf_i>:
 8013504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013508:	4698      	mov	r8, r3
 801350a:	4b74      	ldr	r3, [pc, #464]	@ (80136dc <_scanf_i+0x1d8>)
 801350c:	460c      	mov	r4, r1
 801350e:	4682      	mov	sl, r0
 8013510:	4616      	mov	r6, r2
 8013512:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013516:	b087      	sub	sp, #28
 8013518:	ab03      	add	r3, sp, #12
 801351a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801351e:	4b70      	ldr	r3, [pc, #448]	@ (80136e0 <_scanf_i+0x1dc>)
 8013520:	69a1      	ldr	r1, [r4, #24]
 8013522:	4a70      	ldr	r2, [pc, #448]	@ (80136e4 <_scanf_i+0x1e0>)
 8013524:	2903      	cmp	r1, #3
 8013526:	bf08      	it	eq
 8013528:	461a      	moveq	r2, r3
 801352a:	68a3      	ldr	r3, [r4, #8]
 801352c:	9201      	str	r2, [sp, #4]
 801352e:	1e5a      	subs	r2, r3, #1
 8013530:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013534:	bf88      	it	hi
 8013536:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801353a:	4627      	mov	r7, r4
 801353c:	bf82      	ittt	hi
 801353e:	eb03 0905 	addhi.w	r9, r3, r5
 8013542:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013546:	60a3      	strhi	r3, [r4, #8]
 8013548:	f857 3b1c 	ldr.w	r3, [r7], #28
 801354c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8013550:	bf98      	it	ls
 8013552:	f04f 0900 	movls.w	r9, #0
 8013556:	6023      	str	r3, [r4, #0]
 8013558:	463d      	mov	r5, r7
 801355a:	f04f 0b00 	mov.w	fp, #0
 801355e:	6831      	ldr	r1, [r6, #0]
 8013560:	ab03      	add	r3, sp, #12
 8013562:	7809      	ldrb	r1, [r1, #0]
 8013564:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013568:	2202      	movs	r2, #2
 801356a:	f7ec fe69 	bl	8000240 <memchr>
 801356e:	b328      	cbz	r0, 80135bc <_scanf_i+0xb8>
 8013570:	f1bb 0f01 	cmp.w	fp, #1
 8013574:	d159      	bne.n	801362a <_scanf_i+0x126>
 8013576:	6862      	ldr	r2, [r4, #4]
 8013578:	b92a      	cbnz	r2, 8013586 <_scanf_i+0x82>
 801357a:	6822      	ldr	r2, [r4, #0]
 801357c:	2108      	movs	r1, #8
 801357e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013582:	6061      	str	r1, [r4, #4]
 8013584:	6022      	str	r2, [r4, #0]
 8013586:	6822      	ldr	r2, [r4, #0]
 8013588:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801358c:	6022      	str	r2, [r4, #0]
 801358e:	68a2      	ldr	r2, [r4, #8]
 8013590:	1e51      	subs	r1, r2, #1
 8013592:	60a1      	str	r1, [r4, #8]
 8013594:	b192      	cbz	r2, 80135bc <_scanf_i+0xb8>
 8013596:	6832      	ldr	r2, [r6, #0]
 8013598:	1c51      	adds	r1, r2, #1
 801359a:	6031      	str	r1, [r6, #0]
 801359c:	7812      	ldrb	r2, [r2, #0]
 801359e:	f805 2b01 	strb.w	r2, [r5], #1
 80135a2:	6872      	ldr	r2, [r6, #4]
 80135a4:	3a01      	subs	r2, #1
 80135a6:	2a00      	cmp	r2, #0
 80135a8:	6072      	str	r2, [r6, #4]
 80135aa:	dc07      	bgt.n	80135bc <_scanf_i+0xb8>
 80135ac:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80135b0:	4631      	mov	r1, r6
 80135b2:	4650      	mov	r0, sl
 80135b4:	4790      	blx	r2
 80135b6:	2800      	cmp	r0, #0
 80135b8:	f040 8085 	bne.w	80136c6 <_scanf_i+0x1c2>
 80135bc:	f10b 0b01 	add.w	fp, fp, #1
 80135c0:	f1bb 0f03 	cmp.w	fp, #3
 80135c4:	d1cb      	bne.n	801355e <_scanf_i+0x5a>
 80135c6:	6863      	ldr	r3, [r4, #4]
 80135c8:	b90b      	cbnz	r3, 80135ce <_scanf_i+0xca>
 80135ca:	230a      	movs	r3, #10
 80135cc:	6063      	str	r3, [r4, #4]
 80135ce:	6863      	ldr	r3, [r4, #4]
 80135d0:	4945      	ldr	r1, [pc, #276]	@ (80136e8 <_scanf_i+0x1e4>)
 80135d2:	6960      	ldr	r0, [r4, #20]
 80135d4:	1ac9      	subs	r1, r1, r3
 80135d6:	f000 f997 	bl	8013908 <__sccl>
 80135da:	f04f 0b00 	mov.w	fp, #0
 80135de:	68a3      	ldr	r3, [r4, #8]
 80135e0:	6822      	ldr	r2, [r4, #0]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d03d      	beq.n	8013662 <_scanf_i+0x15e>
 80135e6:	6831      	ldr	r1, [r6, #0]
 80135e8:	6960      	ldr	r0, [r4, #20]
 80135ea:	f891 c000 	ldrb.w	ip, [r1]
 80135ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 80135f2:	2800      	cmp	r0, #0
 80135f4:	d035      	beq.n	8013662 <_scanf_i+0x15e>
 80135f6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80135fa:	d124      	bne.n	8013646 <_scanf_i+0x142>
 80135fc:	0510      	lsls	r0, r2, #20
 80135fe:	d522      	bpl.n	8013646 <_scanf_i+0x142>
 8013600:	f10b 0b01 	add.w	fp, fp, #1
 8013604:	f1b9 0f00 	cmp.w	r9, #0
 8013608:	d003      	beq.n	8013612 <_scanf_i+0x10e>
 801360a:	3301      	adds	r3, #1
 801360c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8013610:	60a3      	str	r3, [r4, #8]
 8013612:	6873      	ldr	r3, [r6, #4]
 8013614:	3b01      	subs	r3, #1
 8013616:	2b00      	cmp	r3, #0
 8013618:	6073      	str	r3, [r6, #4]
 801361a:	dd1b      	ble.n	8013654 <_scanf_i+0x150>
 801361c:	6833      	ldr	r3, [r6, #0]
 801361e:	3301      	adds	r3, #1
 8013620:	6033      	str	r3, [r6, #0]
 8013622:	68a3      	ldr	r3, [r4, #8]
 8013624:	3b01      	subs	r3, #1
 8013626:	60a3      	str	r3, [r4, #8]
 8013628:	e7d9      	b.n	80135de <_scanf_i+0xda>
 801362a:	f1bb 0f02 	cmp.w	fp, #2
 801362e:	d1ae      	bne.n	801358e <_scanf_i+0x8a>
 8013630:	6822      	ldr	r2, [r4, #0]
 8013632:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8013636:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801363a:	d1bf      	bne.n	80135bc <_scanf_i+0xb8>
 801363c:	2110      	movs	r1, #16
 801363e:	6061      	str	r1, [r4, #4]
 8013640:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013644:	e7a2      	b.n	801358c <_scanf_i+0x88>
 8013646:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801364a:	6022      	str	r2, [r4, #0]
 801364c:	780b      	ldrb	r3, [r1, #0]
 801364e:	f805 3b01 	strb.w	r3, [r5], #1
 8013652:	e7de      	b.n	8013612 <_scanf_i+0x10e>
 8013654:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013658:	4631      	mov	r1, r6
 801365a:	4650      	mov	r0, sl
 801365c:	4798      	blx	r3
 801365e:	2800      	cmp	r0, #0
 8013660:	d0df      	beq.n	8013622 <_scanf_i+0x11e>
 8013662:	6823      	ldr	r3, [r4, #0]
 8013664:	05d9      	lsls	r1, r3, #23
 8013666:	d50d      	bpl.n	8013684 <_scanf_i+0x180>
 8013668:	42bd      	cmp	r5, r7
 801366a:	d909      	bls.n	8013680 <_scanf_i+0x17c>
 801366c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013670:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013674:	4632      	mov	r2, r6
 8013676:	4650      	mov	r0, sl
 8013678:	4798      	blx	r3
 801367a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 801367e:	464d      	mov	r5, r9
 8013680:	42bd      	cmp	r5, r7
 8013682:	d028      	beq.n	80136d6 <_scanf_i+0x1d2>
 8013684:	6822      	ldr	r2, [r4, #0]
 8013686:	f012 0210 	ands.w	r2, r2, #16
 801368a:	d113      	bne.n	80136b4 <_scanf_i+0x1b0>
 801368c:	702a      	strb	r2, [r5, #0]
 801368e:	6863      	ldr	r3, [r4, #4]
 8013690:	9e01      	ldr	r6, [sp, #4]
 8013692:	4639      	mov	r1, r7
 8013694:	4650      	mov	r0, sl
 8013696:	47b0      	blx	r6
 8013698:	f8d8 3000 	ldr.w	r3, [r8]
 801369c:	6821      	ldr	r1, [r4, #0]
 801369e:	1d1a      	adds	r2, r3, #4
 80136a0:	f8c8 2000 	str.w	r2, [r8]
 80136a4:	f011 0f20 	tst.w	r1, #32
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	d00f      	beq.n	80136cc <_scanf_i+0x1c8>
 80136ac:	6018      	str	r0, [r3, #0]
 80136ae:	68e3      	ldr	r3, [r4, #12]
 80136b0:	3301      	adds	r3, #1
 80136b2:	60e3      	str	r3, [r4, #12]
 80136b4:	6923      	ldr	r3, [r4, #16]
 80136b6:	1bed      	subs	r5, r5, r7
 80136b8:	445d      	add	r5, fp
 80136ba:	442b      	add	r3, r5
 80136bc:	6123      	str	r3, [r4, #16]
 80136be:	2000      	movs	r0, #0
 80136c0:	b007      	add	sp, #28
 80136c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136c6:	f04f 0b00 	mov.w	fp, #0
 80136ca:	e7ca      	b.n	8013662 <_scanf_i+0x15e>
 80136cc:	07ca      	lsls	r2, r1, #31
 80136ce:	bf4c      	ite	mi
 80136d0:	8018      	strhmi	r0, [r3, #0]
 80136d2:	6018      	strpl	r0, [r3, #0]
 80136d4:	e7eb      	b.n	80136ae <_scanf_i+0x1aa>
 80136d6:	2001      	movs	r0, #1
 80136d8:	e7f2      	b.n	80136c0 <_scanf_i+0x1bc>
 80136da:	bf00      	nop
 80136dc:	080158b0 	.word	0x080158b0
 80136e0:	08012b81 	.word	0x08012b81
 80136e4:	080142ad 	.word	0x080142ad
 80136e8:	08015c72 	.word	0x08015c72

080136ec <__sflush_r>:
 80136ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80136f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136f4:	0716      	lsls	r6, r2, #28
 80136f6:	4605      	mov	r5, r0
 80136f8:	460c      	mov	r4, r1
 80136fa:	d454      	bmi.n	80137a6 <__sflush_r+0xba>
 80136fc:	684b      	ldr	r3, [r1, #4]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	dc02      	bgt.n	8013708 <__sflush_r+0x1c>
 8013702:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013704:	2b00      	cmp	r3, #0
 8013706:	dd48      	ble.n	801379a <__sflush_r+0xae>
 8013708:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801370a:	2e00      	cmp	r6, #0
 801370c:	d045      	beq.n	801379a <__sflush_r+0xae>
 801370e:	2300      	movs	r3, #0
 8013710:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013714:	682f      	ldr	r7, [r5, #0]
 8013716:	6a21      	ldr	r1, [r4, #32]
 8013718:	602b      	str	r3, [r5, #0]
 801371a:	d030      	beq.n	801377e <__sflush_r+0x92>
 801371c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801371e:	89a3      	ldrh	r3, [r4, #12]
 8013720:	0759      	lsls	r1, r3, #29
 8013722:	d505      	bpl.n	8013730 <__sflush_r+0x44>
 8013724:	6863      	ldr	r3, [r4, #4]
 8013726:	1ad2      	subs	r2, r2, r3
 8013728:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801372a:	b10b      	cbz	r3, 8013730 <__sflush_r+0x44>
 801372c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801372e:	1ad2      	subs	r2, r2, r3
 8013730:	2300      	movs	r3, #0
 8013732:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013734:	6a21      	ldr	r1, [r4, #32]
 8013736:	4628      	mov	r0, r5
 8013738:	47b0      	blx	r6
 801373a:	1c43      	adds	r3, r0, #1
 801373c:	89a3      	ldrh	r3, [r4, #12]
 801373e:	d106      	bne.n	801374e <__sflush_r+0x62>
 8013740:	6829      	ldr	r1, [r5, #0]
 8013742:	291d      	cmp	r1, #29
 8013744:	d82b      	bhi.n	801379e <__sflush_r+0xb2>
 8013746:	4a2a      	ldr	r2, [pc, #168]	@ (80137f0 <__sflush_r+0x104>)
 8013748:	410a      	asrs	r2, r1
 801374a:	07d6      	lsls	r6, r2, #31
 801374c:	d427      	bmi.n	801379e <__sflush_r+0xb2>
 801374e:	2200      	movs	r2, #0
 8013750:	6062      	str	r2, [r4, #4]
 8013752:	04d9      	lsls	r1, r3, #19
 8013754:	6922      	ldr	r2, [r4, #16]
 8013756:	6022      	str	r2, [r4, #0]
 8013758:	d504      	bpl.n	8013764 <__sflush_r+0x78>
 801375a:	1c42      	adds	r2, r0, #1
 801375c:	d101      	bne.n	8013762 <__sflush_r+0x76>
 801375e:	682b      	ldr	r3, [r5, #0]
 8013760:	b903      	cbnz	r3, 8013764 <__sflush_r+0x78>
 8013762:	6560      	str	r0, [r4, #84]	@ 0x54
 8013764:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013766:	602f      	str	r7, [r5, #0]
 8013768:	b1b9      	cbz	r1, 801379a <__sflush_r+0xae>
 801376a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801376e:	4299      	cmp	r1, r3
 8013770:	d002      	beq.n	8013778 <__sflush_r+0x8c>
 8013772:	4628      	mov	r0, r5
 8013774:	f7fd fe84 	bl	8011480 <_free_r>
 8013778:	2300      	movs	r3, #0
 801377a:	6363      	str	r3, [r4, #52]	@ 0x34
 801377c:	e00d      	b.n	801379a <__sflush_r+0xae>
 801377e:	2301      	movs	r3, #1
 8013780:	4628      	mov	r0, r5
 8013782:	47b0      	blx	r6
 8013784:	4602      	mov	r2, r0
 8013786:	1c50      	adds	r0, r2, #1
 8013788:	d1c9      	bne.n	801371e <__sflush_r+0x32>
 801378a:	682b      	ldr	r3, [r5, #0]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d0c6      	beq.n	801371e <__sflush_r+0x32>
 8013790:	2b1d      	cmp	r3, #29
 8013792:	d001      	beq.n	8013798 <__sflush_r+0xac>
 8013794:	2b16      	cmp	r3, #22
 8013796:	d11e      	bne.n	80137d6 <__sflush_r+0xea>
 8013798:	602f      	str	r7, [r5, #0]
 801379a:	2000      	movs	r0, #0
 801379c:	e022      	b.n	80137e4 <__sflush_r+0xf8>
 801379e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137a2:	b21b      	sxth	r3, r3
 80137a4:	e01b      	b.n	80137de <__sflush_r+0xf2>
 80137a6:	690f      	ldr	r7, [r1, #16]
 80137a8:	2f00      	cmp	r7, #0
 80137aa:	d0f6      	beq.n	801379a <__sflush_r+0xae>
 80137ac:	0793      	lsls	r3, r2, #30
 80137ae:	680e      	ldr	r6, [r1, #0]
 80137b0:	bf08      	it	eq
 80137b2:	694b      	ldreq	r3, [r1, #20]
 80137b4:	600f      	str	r7, [r1, #0]
 80137b6:	bf18      	it	ne
 80137b8:	2300      	movne	r3, #0
 80137ba:	eba6 0807 	sub.w	r8, r6, r7
 80137be:	608b      	str	r3, [r1, #8]
 80137c0:	f1b8 0f00 	cmp.w	r8, #0
 80137c4:	dde9      	ble.n	801379a <__sflush_r+0xae>
 80137c6:	6a21      	ldr	r1, [r4, #32]
 80137c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80137ca:	4643      	mov	r3, r8
 80137cc:	463a      	mov	r2, r7
 80137ce:	4628      	mov	r0, r5
 80137d0:	47b0      	blx	r6
 80137d2:	2800      	cmp	r0, #0
 80137d4:	dc08      	bgt.n	80137e8 <__sflush_r+0xfc>
 80137d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137de:	81a3      	strh	r3, [r4, #12]
 80137e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80137e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137e8:	4407      	add	r7, r0
 80137ea:	eba8 0800 	sub.w	r8, r8, r0
 80137ee:	e7e7      	b.n	80137c0 <__sflush_r+0xd4>
 80137f0:	dfbffffe 	.word	0xdfbffffe

080137f4 <_fflush_r>:
 80137f4:	b538      	push	{r3, r4, r5, lr}
 80137f6:	690b      	ldr	r3, [r1, #16]
 80137f8:	4605      	mov	r5, r0
 80137fa:	460c      	mov	r4, r1
 80137fc:	b913      	cbnz	r3, 8013804 <_fflush_r+0x10>
 80137fe:	2500      	movs	r5, #0
 8013800:	4628      	mov	r0, r5
 8013802:	bd38      	pop	{r3, r4, r5, pc}
 8013804:	b118      	cbz	r0, 801380e <_fflush_r+0x1a>
 8013806:	6a03      	ldr	r3, [r0, #32]
 8013808:	b90b      	cbnz	r3, 801380e <_fflush_r+0x1a>
 801380a:	f7fc fd2d 	bl	8010268 <__sinit>
 801380e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d0f3      	beq.n	80137fe <_fflush_r+0xa>
 8013816:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013818:	07d0      	lsls	r0, r2, #31
 801381a:	d404      	bmi.n	8013826 <_fflush_r+0x32>
 801381c:	0599      	lsls	r1, r3, #22
 801381e:	d402      	bmi.n	8013826 <_fflush_r+0x32>
 8013820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013822:	f7fc ffbe 	bl	80107a2 <__retarget_lock_acquire_recursive>
 8013826:	4628      	mov	r0, r5
 8013828:	4621      	mov	r1, r4
 801382a:	f7ff ff5f 	bl	80136ec <__sflush_r>
 801382e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013830:	07da      	lsls	r2, r3, #31
 8013832:	4605      	mov	r5, r0
 8013834:	d4e4      	bmi.n	8013800 <_fflush_r+0xc>
 8013836:	89a3      	ldrh	r3, [r4, #12]
 8013838:	059b      	lsls	r3, r3, #22
 801383a:	d4e1      	bmi.n	8013800 <_fflush_r+0xc>
 801383c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801383e:	f7fc ffb1 	bl	80107a4 <__retarget_lock_release_recursive>
 8013842:	e7dd      	b.n	8013800 <_fflush_r+0xc>

08013844 <__swhatbuf_r>:
 8013844:	b570      	push	{r4, r5, r6, lr}
 8013846:	460c      	mov	r4, r1
 8013848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801384c:	2900      	cmp	r1, #0
 801384e:	b096      	sub	sp, #88	@ 0x58
 8013850:	4615      	mov	r5, r2
 8013852:	461e      	mov	r6, r3
 8013854:	da0d      	bge.n	8013872 <__swhatbuf_r+0x2e>
 8013856:	89a3      	ldrh	r3, [r4, #12]
 8013858:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801385c:	f04f 0100 	mov.w	r1, #0
 8013860:	bf14      	ite	ne
 8013862:	2340      	movne	r3, #64	@ 0x40
 8013864:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013868:	2000      	movs	r0, #0
 801386a:	6031      	str	r1, [r6, #0]
 801386c:	602b      	str	r3, [r5, #0]
 801386e:	b016      	add	sp, #88	@ 0x58
 8013870:	bd70      	pop	{r4, r5, r6, pc}
 8013872:	466a      	mov	r2, sp
 8013874:	f000 f8d6 	bl	8013a24 <_fstat_r>
 8013878:	2800      	cmp	r0, #0
 801387a:	dbec      	blt.n	8013856 <__swhatbuf_r+0x12>
 801387c:	9901      	ldr	r1, [sp, #4]
 801387e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013882:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013886:	4259      	negs	r1, r3
 8013888:	4159      	adcs	r1, r3
 801388a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801388e:	e7eb      	b.n	8013868 <__swhatbuf_r+0x24>

08013890 <__smakebuf_r>:
 8013890:	898b      	ldrh	r3, [r1, #12]
 8013892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013894:	079d      	lsls	r5, r3, #30
 8013896:	4606      	mov	r6, r0
 8013898:	460c      	mov	r4, r1
 801389a:	d507      	bpl.n	80138ac <__smakebuf_r+0x1c>
 801389c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80138a0:	6023      	str	r3, [r4, #0]
 80138a2:	6123      	str	r3, [r4, #16]
 80138a4:	2301      	movs	r3, #1
 80138a6:	6163      	str	r3, [r4, #20]
 80138a8:	b003      	add	sp, #12
 80138aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138ac:	ab01      	add	r3, sp, #4
 80138ae:	466a      	mov	r2, sp
 80138b0:	f7ff ffc8 	bl	8013844 <__swhatbuf_r>
 80138b4:	9f00      	ldr	r7, [sp, #0]
 80138b6:	4605      	mov	r5, r0
 80138b8:	4639      	mov	r1, r7
 80138ba:	4630      	mov	r0, r6
 80138bc:	f7fb fd50 	bl	800f360 <_malloc_r>
 80138c0:	b948      	cbnz	r0, 80138d6 <__smakebuf_r+0x46>
 80138c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138c6:	059a      	lsls	r2, r3, #22
 80138c8:	d4ee      	bmi.n	80138a8 <__smakebuf_r+0x18>
 80138ca:	f023 0303 	bic.w	r3, r3, #3
 80138ce:	f043 0302 	orr.w	r3, r3, #2
 80138d2:	81a3      	strh	r3, [r4, #12]
 80138d4:	e7e2      	b.n	801389c <__smakebuf_r+0xc>
 80138d6:	89a3      	ldrh	r3, [r4, #12]
 80138d8:	6020      	str	r0, [r4, #0]
 80138da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80138de:	81a3      	strh	r3, [r4, #12]
 80138e0:	9b01      	ldr	r3, [sp, #4]
 80138e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80138e6:	b15b      	cbz	r3, 8013900 <__smakebuf_r+0x70>
 80138e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80138ec:	4630      	mov	r0, r6
 80138ee:	f000 f8ab 	bl	8013a48 <_isatty_r>
 80138f2:	b128      	cbz	r0, 8013900 <__smakebuf_r+0x70>
 80138f4:	89a3      	ldrh	r3, [r4, #12]
 80138f6:	f023 0303 	bic.w	r3, r3, #3
 80138fa:	f043 0301 	orr.w	r3, r3, #1
 80138fe:	81a3      	strh	r3, [r4, #12]
 8013900:	89a3      	ldrh	r3, [r4, #12]
 8013902:	431d      	orrs	r5, r3
 8013904:	81a5      	strh	r5, [r4, #12]
 8013906:	e7cf      	b.n	80138a8 <__smakebuf_r+0x18>

08013908 <__sccl>:
 8013908:	b570      	push	{r4, r5, r6, lr}
 801390a:	780b      	ldrb	r3, [r1, #0]
 801390c:	4604      	mov	r4, r0
 801390e:	2b5e      	cmp	r3, #94	@ 0x5e
 8013910:	bf0b      	itete	eq
 8013912:	784b      	ldrbeq	r3, [r1, #1]
 8013914:	1c4a      	addne	r2, r1, #1
 8013916:	1c8a      	addeq	r2, r1, #2
 8013918:	2100      	movne	r1, #0
 801391a:	bf08      	it	eq
 801391c:	2101      	moveq	r1, #1
 801391e:	3801      	subs	r0, #1
 8013920:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8013924:	f800 1f01 	strb.w	r1, [r0, #1]!
 8013928:	42a8      	cmp	r0, r5
 801392a:	d1fb      	bne.n	8013924 <__sccl+0x1c>
 801392c:	b90b      	cbnz	r3, 8013932 <__sccl+0x2a>
 801392e:	1e50      	subs	r0, r2, #1
 8013930:	bd70      	pop	{r4, r5, r6, pc}
 8013932:	f081 0101 	eor.w	r1, r1, #1
 8013936:	54e1      	strb	r1, [r4, r3]
 8013938:	4610      	mov	r0, r2
 801393a:	4602      	mov	r2, r0
 801393c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013940:	2d2d      	cmp	r5, #45	@ 0x2d
 8013942:	d005      	beq.n	8013950 <__sccl+0x48>
 8013944:	2d5d      	cmp	r5, #93	@ 0x5d
 8013946:	d016      	beq.n	8013976 <__sccl+0x6e>
 8013948:	2d00      	cmp	r5, #0
 801394a:	d0f1      	beq.n	8013930 <__sccl+0x28>
 801394c:	462b      	mov	r3, r5
 801394e:	e7f2      	b.n	8013936 <__sccl+0x2e>
 8013950:	7846      	ldrb	r6, [r0, #1]
 8013952:	2e5d      	cmp	r6, #93	@ 0x5d
 8013954:	d0fa      	beq.n	801394c <__sccl+0x44>
 8013956:	42b3      	cmp	r3, r6
 8013958:	dcf8      	bgt.n	801394c <__sccl+0x44>
 801395a:	3002      	adds	r0, #2
 801395c:	461a      	mov	r2, r3
 801395e:	3201      	adds	r2, #1
 8013960:	4296      	cmp	r6, r2
 8013962:	54a1      	strb	r1, [r4, r2]
 8013964:	dcfb      	bgt.n	801395e <__sccl+0x56>
 8013966:	1af2      	subs	r2, r6, r3
 8013968:	3a01      	subs	r2, #1
 801396a:	1c5d      	adds	r5, r3, #1
 801396c:	42b3      	cmp	r3, r6
 801396e:	bfa8      	it	ge
 8013970:	2200      	movge	r2, #0
 8013972:	18ab      	adds	r3, r5, r2
 8013974:	e7e1      	b.n	801393a <__sccl+0x32>
 8013976:	4610      	mov	r0, r2
 8013978:	e7da      	b.n	8013930 <__sccl+0x28>

0801397a <__submore>:
 801397a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801397e:	460c      	mov	r4, r1
 8013980:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013982:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013986:	4299      	cmp	r1, r3
 8013988:	d11d      	bne.n	80139c6 <__submore+0x4c>
 801398a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801398e:	f7fb fce7 	bl	800f360 <_malloc_r>
 8013992:	b918      	cbnz	r0, 801399c <__submore+0x22>
 8013994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801399c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80139a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80139a2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80139a6:	6360      	str	r0, [r4, #52]	@ 0x34
 80139a8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80139ac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80139b0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80139b4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80139b8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80139bc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80139c0:	6020      	str	r0, [r4, #0]
 80139c2:	2000      	movs	r0, #0
 80139c4:	e7e8      	b.n	8013998 <__submore+0x1e>
 80139c6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80139c8:	0077      	lsls	r7, r6, #1
 80139ca:	463a      	mov	r2, r7
 80139cc:	f000 fbd1 	bl	8014172 <_realloc_r>
 80139d0:	4605      	mov	r5, r0
 80139d2:	2800      	cmp	r0, #0
 80139d4:	d0de      	beq.n	8013994 <__submore+0x1a>
 80139d6:	eb00 0806 	add.w	r8, r0, r6
 80139da:	4601      	mov	r1, r0
 80139dc:	4632      	mov	r2, r6
 80139de:	4640      	mov	r0, r8
 80139e0:	f7fc fee1 	bl	80107a6 <memcpy>
 80139e4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80139e8:	f8c4 8000 	str.w	r8, [r4]
 80139ec:	e7e9      	b.n	80139c2 <__submore+0x48>

080139ee <memmove>:
 80139ee:	4288      	cmp	r0, r1
 80139f0:	b510      	push	{r4, lr}
 80139f2:	eb01 0402 	add.w	r4, r1, r2
 80139f6:	d902      	bls.n	80139fe <memmove+0x10>
 80139f8:	4284      	cmp	r4, r0
 80139fa:	4623      	mov	r3, r4
 80139fc:	d807      	bhi.n	8013a0e <memmove+0x20>
 80139fe:	1e43      	subs	r3, r0, #1
 8013a00:	42a1      	cmp	r1, r4
 8013a02:	d008      	beq.n	8013a16 <memmove+0x28>
 8013a04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013a0c:	e7f8      	b.n	8013a00 <memmove+0x12>
 8013a0e:	4402      	add	r2, r0
 8013a10:	4601      	mov	r1, r0
 8013a12:	428a      	cmp	r2, r1
 8013a14:	d100      	bne.n	8013a18 <memmove+0x2a>
 8013a16:	bd10      	pop	{r4, pc}
 8013a18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013a1c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013a20:	e7f7      	b.n	8013a12 <memmove+0x24>
	...

08013a24 <_fstat_r>:
 8013a24:	b538      	push	{r3, r4, r5, lr}
 8013a26:	4d07      	ldr	r5, [pc, #28]	@ (8013a44 <_fstat_r+0x20>)
 8013a28:	2300      	movs	r3, #0
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	4608      	mov	r0, r1
 8013a2e:	4611      	mov	r1, r2
 8013a30:	602b      	str	r3, [r5, #0]
 8013a32:	f7f0 fbb7 	bl	80041a4 <_fstat>
 8013a36:	1c43      	adds	r3, r0, #1
 8013a38:	d102      	bne.n	8013a40 <_fstat_r+0x1c>
 8013a3a:	682b      	ldr	r3, [r5, #0]
 8013a3c:	b103      	cbz	r3, 8013a40 <_fstat_r+0x1c>
 8013a3e:	6023      	str	r3, [r4, #0]
 8013a40:	bd38      	pop	{r3, r4, r5, pc}
 8013a42:	bf00      	nop
 8013a44:	20002280 	.word	0x20002280

08013a48 <_isatty_r>:
 8013a48:	b538      	push	{r3, r4, r5, lr}
 8013a4a:	4d06      	ldr	r5, [pc, #24]	@ (8013a64 <_isatty_r+0x1c>)
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	4604      	mov	r4, r0
 8013a50:	4608      	mov	r0, r1
 8013a52:	602b      	str	r3, [r5, #0]
 8013a54:	f7f0 fbb6 	bl	80041c4 <_isatty>
 8013a58:	1c43      	adds	r3, r0, #1
 8013a5a:	d102      	bne.n	8013a62 <_isatty_r+0x1a>
 8013a5c:	682b      	ldr	r3, [r5, #0]
 8013a5e:	b103      	cbz	r3, 8013a62 <_isatty_r+0x1a>
 8013a60:	6023      	str	r3, [r4, #0]
 8013a62:	bd38      	pop	{r3, r4, r5, pc}
 8013a64:	20002280 	.word	0x20002280

08013a68 <nan>:
 8013a68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013a70 <nan+0x8>
 8013a6c:	4770      	bx	lr
 8013a6e:	bf00      	nop
 8013a70:	00000000 	.word	0x00000000
 8013a74:	7ff80000 	.word	0x7ff80000

08013a78 <__assert_func>:
 8013a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013a7a:	4614      	mov	r4, r2
 8013a7c:	461a      	mov	r2, r3
 8013a7e:	4b09      	ldr	r3, [pc, #36]	@ (8013aa4 <__assert_func+0x2c>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	4605      	mov	r5, r0
 8013a84:	68d8      	ldr	r0, [r3, #12]
 8013a86:	b954      	cbnz	r4, 8013a9e <__assert_func+0x26>
 8013a88:	4b07      	ldr	r3, [pc, #28]	@ (8013aa8 <__assert_func+0x30>)
 8013a8a:	461c      	mov	r4, r3
 8013a8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013a90:	9100      	str	r1, [sp, #0]
 8013a92:	462b      	mov	r3, r5
 8013a94:	4905      	ldr	r1, [pc, #20]	@ (8013aac <__assert_func+0x34>)
 8013a96:	f000 fc19 	bl	80142cc <fiprintf>
 8013a9a:	f000 fc29 	bl	80142f0 <abort>
 8013a9e:	4b04      	ldr	r3, [pc, #16]	@ (8013ab0 <__assert_func+0x38>)
 8013aa0:	e7f4      	b.n	8013a8c <__assert_func+0x14>
 8013aa2:	bf00      	nop
 8013aa4:	2000017c 	.word	0x2000017c
 8013aa8:	08015cc0 	.word	0x08015cc0
 8013aac:	08015c92 	.word	0x08015c92
 8013ab0:	08015c85 	.word	0x08015c85

08013ab4 <_calloc_r>:
 8013ab4:	b570      	push	{r4, r5, r6, lr}
 8013ab6:	fba1 5402 	umull	r5, r4, r1, r2
 8013aba:	b93c      	cbnz	r4, 8013acc <_calloc_r+0x18>
 8013abc:	4629      	mov	r1, r5
 8013abe:	f7fb fc4f 	bl	800f360 <_malloc_r>
 8013ac2:	4606      	mov	r6, r0
 8013ac4:	b928      	cbnz	r0, 8013ad2 <_calloc_r+0x1e>
 8013ac6:	2600      	movs	r6, #0
 8013ac8:	4630      	mov	r0, r6
 8013aca:	bd70      	pop	{r4, r5, r6, pc}
 8013acc:	220c      	movs	r2, #12
 8013ace:	6002      	str	r2, [r0, #0]
 8013ad0:	e7f9      	b.n	8013ac6 <_calloc_r+0x12>
 8013ad2:	462a      	mov	r2, r5
 8013ad4:	4621      	mov	r1, r4
 8013ad6:	f7fc fdc5 	bl	8010664 <memset>
 8013ada:	e7f5      	b.n	8013ac8 <_calloc_r+0x14>

08013adc <rshift>:
 8013adc:	6903      	ldr	r3, [r0, #16]
 8013ade:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013ae2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ae6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013aea:	f100 0414 	add.w	r4, r0, #20
 8013aee:	dd45      	ble.n	8013b7c <rshift+0xa0>
 8013af0:	f011 011f 	ands.w	r1, r1, #31
 8013af4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013af8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013afc:	d10c      	bne.n	8013b18 <rshift+0x3c>
 8013afe:	f100 0710 	add.w	r7, r0, #16
 8013b02:	4629      	mov	r1, r5
 8013b04:	42b1      	cmp	r1, r6
 8013b06:	d334      	bcc.n	8013b72 <rshift+0x96>
 8013b08:	1a9b      	subs	r3, r3, r2
 8013b0a:	009b      	lsls	r3, r3, #2
 8013b0c:	1eea      	subs	r2, r5, #3
 8013b0e:	4296      	cmp	r6, r2
 8013b10:	bf38      	it	cc
 8013b12:	2300      	movcc	r3, #0
 8013b14:	4423      	add	r3, r4
 8013b16:	e015      	b.n	8013b44 <rshift+0x68>
 8013b18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013b1c:	f1c1 0820 	rsb	r8, r1, #32
 8013b20:	40cf      	lsrs	r7, r1
 8013b22:	f105 0e04 	add.w	lr, r5, #4
 8013b26:	46a1      	mov	r9, r4
 8013b28:	4576      	cmp	r6, lr
 8013b2a:	46f4      	mov	ip, lr
 8013b2c:	d815      	bhi.n	8013b5a <rshift+0x7e>
 8013b2e:	1a9a      	subs	r2, r3, r2
 8013b30:	0092      	lsls	r2, r2, #2
 8013b32:	3a04      	subs	r2, #4
 8013b34:	3501      	adds	r5, #1
 8013b36:	42ae      	cmp	r6, r5
 8013b38:	bf38      	it	cc
 8013b3a:	2200      	movcc	r2, #0
 8013b3c:	18a3      	adds	r3, r4, r2
 8013b3e:	50a7      	str	r7, [r4, r2]
 8013b40:	b107      	cbz	r7, 8013b44 <rshift+0x68>
 8013b42:	3304      	adds	r3, #4
 8013b44:	1b1a      	subs	r2, r3, r4
 8013b46:	42a3      	cmp	r3, r4
 8013b48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013b4c:	bf08      	it	eq
 8013b4e:	2300      	moveq	r3, #0
 8013b50:	6102      	str	r2, [r0, #16]
 8013b52:	bf08      	it	eq
 8013b54:	6143      	streq	r3, [r0, #20]
 8013b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b5a:	f8dc c000 	ldr.w	ip, [ip]
 8013b5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8013b62:	ea4c 0707 	orr.w	r7, ip, r7
 8013b66:	f849 7b04 	str.w	r7, [r9], #4
 8013b6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013b6e:	40cf      	lsrs	r7, r1
 8013b70:	e7da      	b.n	8013b28 <rshift+0x4c>
 8013b72:	f851 cb04 	ldr.w	ip, [r1], #4
 8013b76:	f847 cf04 	str.w	ip, [r7, #4]!
 8013b7a:	e7c3      	b.n	8013b04 <rshift+0x28>
 8013b7c:	4623      	mov	r3, r4
 8013b7e:	e7e1      	b.n	8013b44 <rshift+0x68>

08013b80 <__hexdig_fun>:
 8013b80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8013b84:	2b09      	cmp	r3, #9
 8013b86:	d802      	bhi.n	8013b8e <__hexdig_fun+0xe>
 8013b88:	3820      	subs	r0, #32
 8013b8a:	b2c0      	uxtb	r0, r0
 8013b8c:	4770      	bx	lr
 8013b8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8013b92:	2b05      	cmp	r3, #5
 8013b94:	d801      	bhi.n	8013b9a <__hexdig_fun+0x1a>
 8013b96:	3847      	subs	r0, #71	@ 0x47
 8013b98:	e7f7      	b.n	8013b8a <__hexdig_fun+0xa>
 8013b9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013b9e:	2b05      	cmp	r3, #5
 8013ba0:	d801      	bhi.n	8013ba6 <__hexdig_fun+0x26>
 8013ba2:	3827      	subs	r0, #39	@ 0x27
 8013ba4:	e7f1      	b.n	8013b8a <__hexdig_fun+0xa>
 8013ba6:	2000      	movs	r0, #0
 8013ba8:	4770      	bx	lr
	...

08013bac <__gethex>:
 8013bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb0:	b085      	sub	sp, #20
 8013bb2:	468a      	mov	sl, r1
 8013bb4:	9302      	str	r3, [sp, #8]
 8013bb6:	680b      	ldr	r3, [r1, #0]
 8013bb8:	9001      	str	r0, [sp, #4]
 8013bba:	4690      	mov	r8, r2
 8013bbc:	1c9c      	adds	r4, r3, #2
 8013bbe:	46a1      	mov	r9, r4
 8013bc0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013bc4:	2830      	cmp	r0, #48	@ 0x30
 8013bc6:	d0fa      	beq.n	8013bbe <__gethex+0x12>
 8013bc8:	eba9 0303 	sub.w	r3, r9, r3
 8013bcc:	f1a3 0b02 	sub.w	fp, r3, #2
 8013bd0:	f7ff ffd6 	bl	8013b80 <__hexdig_fun>
 8013bd4:	4605      	mov	r5, r0
 8013bd6:	2800      	cmp	r0, #0
 8013bd8:	d168      	bne.n	8013cac <__gethex+0x100>
 8013bda:	49a0      	ldr	r1, [pc, #640]	@ (8013e5c <__gethex+0x2b0>)
 8013bdc:	2201      	movs	r2, #1
 8013bde:	4648      	mov	r0, r9
 8013be0:	f7fc fd48 	bl	8010674 <strncmp>
 8013be4:	4607      	mov	r7, r0
 8013be6:	2800      	cmp	r0, #0
 8013be8:	d167      	bne.n	8013cba <__gethex+0x10e>
 8013bea:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013bee:	4626      	mov	r6, r4
 8013bf0:	f7ff ffc6 	bl	8013b80 <__hexdig_fun>
 8013bf4:	2800      	cmp	r0, #0
 8013bf6:	d062      	beq.n	8013cbe <__gethex+0x112>
 8013bf8:	4623      	mov	r3, r4
 8013bfa:	7818      	ldrb	r0, [r3, #0]
 8013bfc:	2830      	cmp	r0, #48	@ 0x30
 8013bfe:	4699      	mov	r9, r3
 8013c00:	f103 0301 	add.w	r3, r3, #1
 8013c04:	d0f9      	beq.n	8013bfa <__gethex+0x4e>
 8013c06:	f7ff ffbb 	bl	8013b80 <__hexdig_fun>
 8013c0a:	fab0 f580 	clz	r5, r0
 8013c0e:	096d      	lsrs	r5, r5, #5
 8013c10:	f04f 0b01 	mov.w	fp, #1
 8013c14:	464a      	mov	r2, r9
 8013c16:	4616      	mov	r6, r2
 8013c18:	3201      	adds	r2, #1
 8013c1a:	7830      	ldrb	r0, [r6, #0]
 8013c1c:	f7ff ffb0 	bl	8013b80 <__hexdig_fun>
 8013c20:	2800      	cmp	r0, #0
 8013c22:	d1f8      	bne.n	8013c16 <__gethex+0x6a>
 8013c24:	498d      	ldr	r1, [pc, #564]	@ (8013e5c <__gethex+0x2b0>)
 8013c26:	2201      	movs	r2, #1
 8013c28:	4630      	mov	r0, r6
 8013c2a:	f7fc fd23 	bl	8010674 <strncmp>
 8013c2e:	2800      	cmp	r0, #0
 8013c30:	d13f      	bne.n	8013cb2 <__gethex+0x106>
 8013c32:	b944      	cbnz	r4, 8013c46 <__gethex+0x9a>
 8013c34:	1c74      	adds	r4, r6, #1
 8013c36:	4622      	mov	r2, r4
 8013c38:	4616      	mov	r6, r2
 8013c3a:	3201      	adds	r2, #1
 8013c3c:	7830      	ldrb	r0, [r6, #0]
 8013c3e:	f7ff ff9f 	bl	8013b80 <__hexdig_fun>
 8013c42:	2800      	cmp	r0, #0
 8013c44:	d1f8      	bne.n	8013c38 <__gethex+0x8c>
 8013c46:	1ba4      	subs	r4, r4, r6
 8013c48:	00a7      	lsls	r7, r4, #2
 8013c4a:	7833      	ldrb	r3, [r6, #0]
 8013c4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013c50:	2b50      	cmp	r3, #80	@ 0x50
 8013c52:	d13e      	bne.n	8013cd2 <__gethex+0x126>
 8013c54:	7873      	ldrb	r3, [r6, #1]
 8013c56:	2b2b      	cmp	r3, #43	@ 0x2b
 8013c58:	d033      	beq.n	8013cc2 <__gethex+0x116>
 8013c5a:	2b2d      	cmp	r3, #45	@ 0x2d
 8013c5c:	d034      	beq.n	8013cc8 <__gethex+0x11c>
 8013c5e:	1c71      	adds	r1, r6, #1
 8013c60:	2400      	movs	r4, #0
 8013c62:	7808      	ldrb	r0, [r1, #0]
 8013c64:	f7ff ff8c 	bl	8013b80 <__hexdig_fun>
 8013c68:	1e43      	subs	r3, r0, #1
 8013c6a:	b2db      	uxtb	r3, r3
 8013c6c:	2b18      	cmp	r3, #24
 8013c6e:	d830      	bhi.n	8013cd2 <__gethex+0x126>
 8013c70:	f1a0 0210 	sub.w	r2, r0, #16
 8013c74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013c78:	f7ff ff82 	bl	8013b80 <__hexdig_fun>
 8013c7c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8013c80:	fa5f fc8c 	uxtb.w	ip, ip
 8013c84:	f1bc 0f18 	cmp.w	ip, #24
 8013c88:	f04f 030a 	mov.w	r3, #10
 8013c8c:	d91e      	bls.n	8013ccc <__gethex+0x120>
 8013c8e:	b104      	cbz	r4, 8013c92 <__gethex+0xe6>
 8013c90:	4252      	negs	r2, r2
 8013c92:	4417      	add	r7, r2
 8013c94:	f8ca 1000 	str.w	r1, [sl]
 8013c98:	b1ed      	cbz	r5, 8013cd6 <__gethex+0x12a>
 8013c9a:	f1bb 0f00 	cmp.w	fp, #0
 8013c9e:	bf0c      	ite	eq
 8013ca0:	2506      	moveq	r5, #6
 8013ca2:	2500      	movne	r5, #0
 8013ca4:	4628      	mov	r0, r5
 8013ca6:	b005      	add	sp, #20
 8013ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cac:	2500      	movs	r5, #0
 8013cae:	462c      	mov	r4, r5
 8013cb0:	e7b0      	b.n	8013c14 <__gethex+0x68>
 8013cb2:	2c00      	cmp	r4, #0
 8013cb4:	d1c7      	bne.n	8013c46 <__gethex+0x9a>
 8013cb6:	4627      	mov	r7, r4
 8013cb8:	e7c7      	b.n	8013c4a <__gethex+0x9e>
 8013cba:	464e      	mov	r6, r9
 8013cbc:	462f      	mov	r7, r5
 8013cbe:	2501      	movs	r5, #1
 8013cc0:	e7c3      	b.n	8013c4a <__gethex+0x9e>
 8013cc2:	2400      	movs	r4, #0
 8013cc4:	1cb1      	adds	r1, r6, #2
 8013cc6:	e7cc      	b.n	8013c62 <__gethex+0xb6>
 8013cc8:	2401      	movs	r4, #1
 8013cca:	e7fb      	b.n	8013cc4 <__gethex+0x118>
 8013ccc:	fb03 0002 	mla	r0, r3, r2, r0
 8013cd0:	e7ce      	b.n	8013c70 <__gethex+0xc4>
 8013cd2:	4631      	mov	r1, r6
 8013cd4:	e7de      	b.n	8013c94 <__gethex+0xe8>
 8013cd6:	eba6 0309 	sub.w	r3, r6, r9
 8013cda:	3b01      	subs	r3, #1
 8013cdc:	4629      	mov	r1, r5
 8013cde:	2b07      	cmp	r3, #7
 8013ce0:	dc0a      	bgt.n	8013cf8 <__gethex+0x14c>
 8013ce2:	9801      	ldr	r0, [sp, #4]
 8013ce4:	f7fd fc16 	bl	8011514 <_Balloc>
 8013ce8:	4604      	mov	r4, r0
 8013cea:	b940      	cbnz	r0, 8013cfe <__gethex+0x152>
 8013cec:	4b5c      	ldr	r3, [pc, #368]	@ (8013e60 <__gethex+0x2b4>)
 8013cee:	4602      	mov	r2, r0
 8013cf0:	21e4      	movs	r1, #228	@ 0xe4
 8013cf2:	485c      	ldr	r0, [pc, #368]	@ (8013e64 <__gethex+0x2b8>)
 8013cf4:	f7ff fec0 	bl	8013a78 <__assert_func>
 8013cf8:	3101      	adds	r1, #1
 8013cfa:	105b      	asrs	r3, r3, #1
 8013cfc:	e7ef      	b.n	8013cde <__gethex+0x132>
 8013cfe:	f100 0a14 	add.w	sl, r0, #20
 8013d02:	2300      	movs	r3, #0
 8013d04:	4655      	mov	r5, sl
 8013d06:	469b      	mov	fp, r3
 8013d08:	45b1      	cmp	r9, r6
 8013d0a:	d337      	bcc.n	8013d7c <__gethex+0x1d0>
 8013d0c:	f845 bb04 	str.w	fp, [r5], #4
 8013d10:	eba5 050a 	sub.w	r5, r5, sl
 8013d14:	10ad      	asrs	r5, r5, #2
 8013d16:	6125      	str	r5, [r4, #16]
 8013d18:	4658      	mov	r0, fp
 8013d1a:	f7fd fced 	bl	80116f8 <__hi0bits>
 8013d1e:	016d      	lsls	r5, r5, #5
 8013d20:	f8d8 6000 	ldr.w	r6, [r8]
 8013d24:	1a2d      	subs	r5, r5, r0
 8013d26:	42b5      	cmp	r5, r6
 8013d28:	dd54      	ble.n	8013dd4 <__gethex+0x228>
 8013d2a:	1bad      	subs	r5, r5, r6
 8013d2c:	4629      	mov	r1, r5
 8013d2e:	4620      	mov	r0, r4
 8013d30:	f7fe f881 	bl	8011e36 <__any_on>
 8013d34:	4681      	mov	r9, r0
 8013d36:	b178      	cbz	r0, 8013d58 <__gethex+0x1ac>
 8013d38:	1e6b      	subs	r3, r5, #1
 8013d3a:	1159      	asrs	r1, r3, #5
 8013d3c:	f003 021f 	and.w	r2, r3, #31
 8013d40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013d44:	f04f 0901 	mov.w	r9, #1
 8013d48:	fa09 f202 	lsl.w	r2, r9, r2
 8013d4c:	420a      	tst	r2, r1
 8013d4e:	d003      	beq.n	8013d58 <__gethex+0x1ac>
 8013d50:	454b      	cmp	r3, r9
 8013d52:	dc36      	bgt.n	8013dc2 <__gethex+0x216>
 8013d54:	f04f 0902 	mov.w	r9, #2
 8013d58:	4629      	mov	r1, r5
 8013d5a:	4620      	mov	r0, r4
 8013d5c:	f7ff febe 	bl	8013adc <rshift>
 8013d60:	442f      	add	r7, r5
 8013d62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013d66:	42bb      	cmp	r3, r7
 8013d68:	da42      	bge.n	8013df0 <__gethex+0x244>
 8013d6a:	9801      	ldr	r0, [sp, #4]
 8013d6c:	4621      	mov	r1, r4
 8013d6e:	f7fd fc11 	bl	8011594 <_Bfree>
 8013d72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013d74:	2300      	movs	r3, #0
 8013d76:	6013      	str	r3, [r2, #0]
 8013d78:	25a3      	movs	r5, #163	@ 0xa3
 8013d7a:	e793      	b.n	8013ca4 <__gethex+0xf8>
 8013d7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013d80:	2a2e      	cmp	r2, #46	@ 0x2e
 8013d82:	d012      	beq.n	8013daa <__gethex+0x1fe>
 8013d84:	2b20      	cmp	r3, #32
 8013d86:	d104      	bne.n	8013d92 <__gethex+0x1e6>
 8013d88:	f845 bb04 	str.w	fp, [r5], #4
 8013d8c:	f04f 0b00 	mov.w	fp, #0
 8013d90:	465b      	mov	r3, fp
 8013d92:	7830      	ldrb	r0, [r6, #0]
 8013d94:	9303      	str	r3, [sp, #12]
 8013d96:	f7ff fef3 	bl	8013b80 <__hexdig_fun>
 8013d9a:	9b03      	ldr	r3, [sp, #12]
 8013d9c:	f000 000f 	and.w	r0, r0, #15
 8013da0:	4098      	lsls	r0, r3
 8013da2:	ea4b 0b00 	orr.w	fp, fp, r0
 8013da6:	3304      	adds	r3, #4
 8013da8:	e7ae      	b.n	8013d08 <__gethex+0x15c>
 8013daa:	45b1      	cmp	r9, r6
 8013dac:	d8ea      	bhi.n	8013d84 <__gethex+0x1d8>
 8013dae:	492b      	ldr	r1, [pc, #172]	@ (8013e5c <__gethex+0x2b0>)
 8013db0:	9303      	str	r3, [sp, #12]
 8013db2:	2201      	movs	r2, #1
 8013db4:	4630      	mov	r0, r6
 8013db6:	f7fc fc5d 	bl	8010674 <strncmp>
 8013dba:	9b03      	ldr	r3, [sp, #12]
 8013dbc:	2800      	cmp	r0, #0
 8013dbe:	d1e1      	bne.n	8013d84 <__gethex+0x1d8>
 8013dc0:	e7a2      	b.n	8013d08 <__gethex+0x15c>
 8013dc2:	1ea9      	subs	r1, r5, #2
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	f7fe f836 	bl	8011e36 <__any_on>
 8013dca:	2800      	cmp	r0, #0
 8013dcc:	d0c2      	beq.n	8013d54 <__gethex+0x1a8>
 8013dce:	f04f 0903 	mov.w	r9, #3
 8013dd2:	e7c1      	b.n	8013d58 <__gethex+0x1ac>
 8013dd4:	da09      	bge.n	8013dea <__gethex+0x23e>
 8013dd6:	1b75      	subs	r5, r6, r5
 8013dd8:	4621      	mov	r1, r4
 8013dda:	9801      	ldr	r0, [sp, #4]
 8013ddc:	462a      	mov	r2, r5
 8013dde:	f7fd fdf1 	bl	80119c4 <__lshift>
 8013de2:	1b7f      	subs	r7, r7, r5
 8013de4:	4604      	mov	r4, r0
 8013de6:	f100 0a14 	add.w	sl, r0, #20
 8013dea:	f04f 0900 	mov.w	r9, #0
 8013dee:	e7b8      	b.n	8013d62 <__gethex+0x1b6>
 8013df0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013df4:	42bd      	cmp	r5, r7
 8013df6:	dd6f      	ble.n	8013ed8 <__gethex+0x32c>
 8013df8:	1bed      	subs	r5, r5, r7
 8013dfa:	42ae      	cmp	r6, r5
 8013dfc:	dc34      	bgt.n	8013e68 <__gethex+0x2bc>
 8013dfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013e02:	2b02      	cmp	r3, #2
 8013e04:	d022      	beq.n	8013e4c <__gethex+0x2a0>
 8013e06:	2b03      	cmp	r3, #3
 8013e08:	d024      	beq.n	8013e54 <__gethex+0x2a8>
 8013e0a:	2b01      	cmp	r3, #1
 8013e0c:	d115      	bne.n	8013e3a <__gethex+0x28e>
 8013e0e:	42ae      	cmp	r6, r5
 8013e10:	d113      	bne.n	8013e3a <__gethex+0x28e>
 8013e12:	2e01      	cmp	r6, #1
 8013e14:	d10b      	bne.n	8013e2e <__gethex+0x282>
 8013e16:	9a02      	ldr	r2, [sp, #8]
 8013e18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013e1c:	6013      	str	r3, [r2, #0]
 8013e1e:	2301      	movs	r3, #1
 8013e20:	6123      	str	r3, [r4, #16]
 8013e22:	f8ca 3000 	str.w	r3, [sl]
 8013e26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e28:	2562      	movs	r5, #98	@ 0x62
 8013e2a:	601c      	str	r4, [r3, #0]
 8013e2c:	e73a      	b.n	8013ca4 <__gethex+0xf8>
 8013e2e:	1e71      	subs	r1, r6, #1
 8013e30:	4620      	mov	r0, r4
 8013e32:	f7fe f800 	bl	8011e36 <__any_on>
 8013e36:	2800      	cmp	r0, #0
 8013e38:	d1ed      	bne.n	8013e16 <__gethex+0x26a>
 8013e3a:	9801      	ldr	r0, [sp, #4]
 8013e3c:	4621      	mov	r1, r4
 8013e3e:	f7fd fba9 	bl	8011594 <_Bfree>
 8013e42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013e44:	2300      	movs	r3, #0
 8013e46:	6013      	str	r3, [r2, #0]
 8013e48:	2550      	movs	r5, #80	@ 0x50
 8013e4a:	e72b      	b.n	8013ca4 <__gethex+0xf8>
 8013e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d1f3      	bne.n	8013e3a <__gethex+0x28e>
 8013e52:	e7e0      	b.n	8013e16 <__gethex+0x26a>
 8013e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d1dd      	bne.n	8013e16 <__gethex+0x26a>
 8013e5a:	e7ee      	b.n	8013e3a <__gethex+0x28e>
 8013e5c:	08015af8 	.word	0x08015af8
 8013e60:	0801598f 	.word	0x0801598f
 8013e64:	08015cc1 	.word	0x08015cc1
 8013e68:	1e6f      	subs	r7, r5, #1
 8013e6a:	f1b9 0f00 	cmp.w	r9, #0
 8013e6e:	d130      	bne.n	8013ed2 <__gethex+0x326>
 8013e70:	b127      	cbz	r7, 8013e7c <__gethex+0x2d0>
 8013e72:	4639      	mov	r1, r7
 8013e74:	4620      	mov	r0, r4
 8013e76:	f7fd ffde 	bl	8011e36 <__any_on>
 8013e7a:	4681      	mov	r9, r0
 8013e7c:	117a      	asrs	r2, r7, #5
 8013e7e:	2301      	movs	r3, #1
 8013e80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013e84:	f007 071f 	and.w	r7, r7, #31
 8013e88:	40bb      	lsls	r3, r7
 8013e8a:	4213      	tst	r3, r2
 8013e8c:	4629      	mov	r1, r5
 8013e8e:	4620      	mov	r0, r4
 8013e90:	bf18      	it	ne
 8013e92:	f049 0902 	orrne.w	r9, r9, #2
 8013e96:	f7ff fe21 	bl	8013adc <rshift>
 8013e9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013e9e:	1b76      	subs	r6, r6, r5
 8013ea0:	2502      	movs	r5, #2
 8013ea2:	f1b9 0f00 	cmp.w	r9, #0
 8013ea6:	d047      	beq.n	8013f38 <__gethex+0x38c>
 8013ea8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013eac:	2b02      	cmp	r3, #2
 8013eae:	d015      	beq.n	8013edc <__gethex+0x330>
 8013eb0:	2b03      	cmp	r3, #3
 8013eb2:	d017      	beq.n	8013ee4 <__gethex+0x338>
 8013eb4:	2b01      	cmp	r3, #1
 8013eb6:	d109      	bne.n	8013ecc <__gethex+0x320>
 8013eb8:	f019 0f02 	tst.w	r9, #2
 8013ebc:	d006      	beq.n	8013ecc <__gethex+0x320>
 8013ebe:	f8da 3000 	ldr.w	r3, [sl]
 8013ec2:	ea49 0903 	orr.w	r9, r9, r3
 8013ec6:	f019 0f01 	tst.w	r9, #1
 8013eca:	d10e      	bne.n	8013eea <__gethex+0x33e>
 8013ecc:	f045 0510 	orr.w	r5, r5, #16
 8013ed0:	e032      	b.n	8013f38 <__gethex+0x38c>
 8013ed2:	f04f 0901 	mov.w	r9, #1
 8013ed6:	e7d1      	b.n	8013e7c <__gethex+0x2d0>
 8013ed8:	2501      	movs	r5, #1
 8013eda:	e7e2      	b.n	8013ea2 <__gethex+0x2f6>
 8013edc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ede:	f1c3 0301 	rsb	r3, r3, #1
 8013ee2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013ee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d0f0      	beq.n	8013ecc <__gethex+0x320>
 8013eea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013eee:	f104 0314 	add.w	r3, r4, #20
 8013ef2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013ef6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013efa:	f04f 0c00 	mov.w	ip, #0
 8013efe:	4618      	mov	r0, r3
 8013f00:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f04:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8013f08:	d01b      	beq.n	8013f42 <__gethex+0x396>
 8013f0a:	3201      	adds	r2, #1
 8013f0c:	6002      	str	r2, [r0, #0]
 8013f0e:	2d02      	cmp	r5, #2
 8013f10:	f104 0314 	add.w	r3, r4, #20
 8013f14:	d13c      	bne.n	8013f90 <__gethex+0x3e4>
 8013f16:	f8d8 2000 	ldr.w	r2, [r8]
 8013f1a:	3a01      	subs	r2, #1
 8013f1c:	42b2      	cmp	r2, r6
 8013f1e:	d109      	bne.n	8013f34 <__gethex+0x388>
 8013f20:	1171      	asrs	r1, r6, #5
 8013f22:	2201      	movs	r2, #1
 8013f24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013f28:	f006 061f 	and.w	r6, r6, #31
 8013f2c:	fa02 f606 	lsl.w	r6, r2, r6
 8013f30:	421e      	tst	r6, r3
 8013f32:	d13a      	bne.n	8013faa <__gethex+0x3fe>
 8013f34:	f045 0520 	orr.w	r5, r5, #32
 8013f38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013f3a:	601c      	str	r4, [r3, #0]
 8013f3c:	9b02      	ldr	r3, [sp, #8]
 8013f3e:	601f      	str	r7, [r3, #0]
 8013f40:	e6b0      	b.n	8013ca4 <__gethex+0xf8>
 8013f42:	4299      	cmp	r1, r3
 8013f44:	f843 cc04 	str.w	ip, [r3, #-4]
 8013f48:	d8d9      	bhi.n	8013efe <__gethex+0x352>
 8013f4a:	68a3      	ldr	r3, [r4, #8]
 8013f4c:	459b      	cmp	fp, r3
 8013f4e:	db17      	blt.n	8013f80 <__gethex+0x3d4>
 8013f50:	6861      	ldr	r1, [r4, #4]
 8013f52:	9801      	ldr	r0, [sp, #4]
 8013f54:	3101      	adds	r1, #1
 8013f56:	f7fd fadd 	bl	8011514 <_Balloc>
 8013f5a:	4681      	mov	r9, r0
 8013f5c:	b918      	cbnz	r0, 8013f66 <__gethex+0x3ba>
 8013f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8013fc8 <__gethex+0x41c>)
 8013f60:	4602      	mov	r2, r0
 8013f62:	2184      	movs	r1, #132	@ 0x84
 8013f64:	e6c5      	b.n	8013cf2 <__gethex+0x146>
 8013f66:	6922      	ldr	r2, [r4, #16]
 8013f68:	3202      	adds	r2, #2
 8013f6a:	f104 010c 	add.w	r1, r4, #12
 8013f6e:	0092      	lsls	r2, r2, #2
 8013f70:	300c      	adds	r0, #12
 8013f72:	f7fc fc18 	bl	80107a6 <memcpy>
 8013f76:	4621      	mov	r1, r4
 8013f78:	9801      	ldr	r0, [sp, #4]
 8013f7a:	f7fd fb0b 	bl	8011594 <_Bfree>
 8013f7e:	464c      	mov	r4, r9
 8013f80:	6923      	ldr	r3, [r4, #16]
 8013f82:	1c5a      	adds	r2, r3, #1
 8013f84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013f88:	6122      	str	r2, [r4, #16]
 8013f8a:	2201      	movs	r2, #1
 8013f8c:	615a      	str	r2, [r3, #20]
 8013f8e:	e7be      	b.n	8013f0e <__gethex+0x362>
 8013f90:	6922      	ldr	r2, [r4, #16]
 8013f92:	455a      	cmp	r2, fp
 8013f94:	dd0b      	ble.n	8013fae <__gethex+0x402>
 8013f96:	2101      	movs	r1, #1
 8013f98:	4620      	mov	r0, r4
 8013f9a:	f7ff fd9f 	bl	8013adc <rshift>
 8013f9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013fa2:	3701      	adds	r7, #1
 8013fa4:	42bb      	cmp	r3, r7
 8013fa6:	f6ff aee0 	blt.w	8013d6a <__gethex+0x1be>
 8013faa:	2501      	movs	r5, #1
 8013fac:	e7c2      	b.n	8013f34 <__gethex+0x388>
 8013fae:	f016 061f 	ands.w	r6, r6, #31
 8013fb2:	d0fa      	beq.n	8013faa <__gethex+0x3fe>
 8013fb4:	4453      	add	r3, sl
 8013fb6:	f1c6 0620 	rsb	r6, r6, #32
 8013fba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013fbe:	f7fd fb9b 	bl	80116f8 <__hi0bits>
 8013fc2:	42b0      	cmp	r0, r6
 8013fc4:	dbe7      	blt.n	8013f96 <__gethex+0x3ea>
 8013fc6:	e7f0      	b.n	8013faa <__gethex+0x3fe>
 8013fc8:	0801598f 	.word	0x0801598f

08013fcc <L_shift>:
 8013fcc:	f1c2 0208 	rsb	r2, r2, #8
 8013fd0:	0092      	lsls	r2, r2, #2
 8013fd2:	b570      	push	{r4, r5, r6, lr}
 8013fd4:	f1c2 0620 	rsb	r6, r2, #32
 8013fd8:	6843      	ldr	r3, [r0, #4]
 8013fda:	6804      	ldr	r4, [r0, #0]
 8013fdc:	fa03 f506 	lsl.w	r5, r3, r6
 8013fe0:	432c      	orrs	r4, r5
 8013fe2:	40d3      	lsrs	r3, r2
 8013fe4:	6004      	str	r4, [r0, #0]
 8013fe6:	f840 3f04 	str.w	r3, [r0, #4]!
 8013fea:	4288      	cmp	r0, r1
 8013fec:	d3f4      	bcc.n	8013fd8 <L_shift+0xc>
 8013fee:	bd70      	pop	{r4, r5, r6, pc}

08013ff0 <__match>:
 8013ff0:	b530      	push	{r4, r5, lr}
 8013ff2:	6803      	ldr	r3, [r0, #0]
 8013ff4:	3301      	adds	r3, #1
 8013ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ffa:	b914      	cbnz	r4, 8014002 <__match+0x12>
 8013ffc:	6003      	str	r3, [r0, #0]
 8013ffe:	2001      	movs	r0, #1
 8014000:	bd30      	pop	{r4, r5, pc}
 8014002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014006:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801400a:	2d19      	cmp	r5, #25
 801400c:	bf98      	it	ls
 801400e:	3220      	addls	r2, #32
 8014010:	42a2      	cmp	r2, r4
 8014012:	d0f0      	beq.n	8013ff6 <__match+0x6>
 8014014:	2000      	movs	r0, #0
 8014016:	e7f3      	b.n	8014000 <__match+0x10>

08014018 <__hexnan>:
 8014018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801401c:	680b      	ldr	r3, [r1, #0]
 801401e:	6801      	ldr	r1, [r0, #0]
 8014020:	115e      	asrs	r6, r3, #5
 8014022:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014026:	f013 031f 	ands.w	r3, r3, #31
 801402a:	b087      	sub	sp, #28
 801402c:	bf18      	it	ne
 801402e:	3604      	addne	r6, #4
 8014030:	2500      	movs	r5, #0
 8014032:	1f37      	subs	r7, r6, #4
 8014034:	4682      	mov	sl, r0
 8014036:	4690      	mov	r8, r2
 8014038:	9301      	str	r3, [sp, #4]
 801403a:	f846 5c04 	str.w	r5, [r6, #-4]
 801403e:	46b9      	mov	r9, r7
 8014040:	463c      	mov	r4, r7
 8014042:	9502      	str	r5, [sp, #8]
 8014044:	46ab      	mov	fp, r5
 8014046:	784a      	ldrb	r2, [r1, #1]
 8014048:	1c4b      	adds	r3, r1, #1
 801404a:	9303      	str	r3, [sp, #12]
 801404c:	b342      	cbz	r2, 80140a0 <__hexnan+0x88>
 801404e:	4610      	mov	r0, r2
 8014050:	9105      	str	r1, [sp, #20]
 8014052:	9204      	str	r2, [sp, #16]
 8014054:	f7ff fd94 	bl	8013b80 <__hexdig_fun>
 8014058:	2800      	cmp	r0, #0
 801405a:	d151      	bne.n	8014100 <__hexnan+0xe8>
 801405c:	9a04      	ldr	r2, [sp, #16]
 801405e:	9905      	ldr	r1, [sp, #20]
 8014060:	2a20      	cmp	r2, #32
 8014062:	d818      	bhi.n	8014096 <__hexnan+0x7e>
 8014064:	9b02      	ldr	r3, [sp, #8]
 8014066:	459b      	cmp	fp, r3
 8014068:	dd13      	ble.n	8014092 <__hexnan+0x7a>
 801406a:	454c      	cmp	r4, r9
 801406c:	d206      	bcs.n	801407c <__hexnan+0x64>
 801406e:	2d07      	cmp	r5, #7
 8014070:	dc04      	bgt.n	801407c <__hexnan+0x64>
 8014072:	462a      	mov	r2, r5
 8014074:	4649      	mov	r1, r9
 8014076:	4620      	mov	r0, r4
 8014078:	f7ff ffa8 	bl	8013fcc <L_shift>
 801407c:	4544      	cmp	r4, r8
 801407e:	d952      	bls.n	8014126 <__hexnan+0x10e>
 8014080:	2300      	movs	r3, #0
 8014082:	f1a4 0904 	sub.w	r9, r4, #4
 8014086:	f844 3c04 	str.w	r3, [r4, #-4]
 801408a:	f8cd b008 	str.w	fp, [sp, #8]
 801408e:	464c      	mov	r4, r9
 8014090:	461d      	mov	r5, r3
 8014092:	9903      	ldr	r1, [sp, #12]
 8014094:	e7d7      	b.n	8014046 <__hexnan+0x2e>
 8014096:	2a29      	cmp	r2, #41	@ 0x29
 8014098:	d157      	bne.n	801414a <__hexnan+0x132>
 801409a:	3102      	adds	r1, #2
 801409c:	f8ca 1000 	str.w	r1, [sl]
 80140a0:	f1bb 0f00 	cmp.w	fp, #0
 80140a4:	d051      	beq.n	801414a <__hexnan+0x132>
 80140a6:	454c      	cmp	r4, r9
 80140a8:	d206      	bcs.n	80140b8 <__hexnan+0xa0>
 80140aa:	2d07      	cmp	r5, #7
 80140ac:	dc04      	bgt.n	80140b8 <__hexnan+0xa0>
 80140ae:	462a      	mov	r2, r5
 80140b0:	4649      	mov	r1, r9
 80140b2:	4620      	mov	r0, r4
 80140b4:	f7ff ff8a 	bl	8013fcc <L_shift>
 80140b8:	4544      	cmp	r4, r8
 80140ba:	d936      	bls.n	801412a <__hexnan+0x112>
 80140bc:	f1a8 0204 	sub.w	r2, r8, #4
 80140c0:	4623      	mov	r3, r4
 80140c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80140c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80140ca:	429f      	cmp	r7, r3
 80140cc:	d2f9      	bcs.n	80140c2 <__hexnan+0xaa>
 80140ce:	1b3b      	subs	r3, r7, r4
 80140d0:	f023 0303 	bic.w	r3, r3, #3
 80140d4:	3304      	adds	r3, #4
 80140d6:	3401      	adds	r4, #1
 80140d8:	3e03      	subs	r6, #3
 80140da:	42b4      	cmp	r4, r6
 80140dc:	bf88      	it	hi
 80140de:	2304      	movhi	r3, #4
 80140e0:	4443      	add	r3, r8
 80140e2:	2200      	movs	r2, #0
 80140e4:	f843 2b04 	str.w	r2, [r3], #4
 80140e8:	429f      	cmp	r7, r3
 80140ea:	d2fb      	bcs.n	80140e4 <__hexnan+0xcc>
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	b91b      	cbnz	r3, 80140f8 <__hexnan+0xe0>
 80140f0:	4547      	cmp	r7, r8
 80140f2:	d128      	bne.n	8014146 <__hexnan+0x12e>
 80140f4:	2301      	movs	r3, #1
 80140f6:	603b      	str	r3, [r7, #0]
 80140f8:	2005      	movs	r0, #5
 80140fa:	b007      	add	sp, #28
 80140fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014100:	3501      	adds	r5, #1
 8014102:	2d08      	cmp	r5, #8
 8014104:	f10b 0b01 	add.w	fp, fp, #1
 8014108:	dd06      	ble.n	8014118 <__hexnan+0x100>
 801410a:	4544      	cmp	r4, r8
 801410c:	d9c1      	bls.n	8014092 <__hexnan+0x7a>
 801410e:	2300      	movs	r3, #0
 8014110:	f844 3c04 	str.w	r3, [r4, #-4]
 8014114:	2501      	movs	r5, #1
 8014116:	3c04      	subs	r4, #4
 8014118:	6822      	ldr	r2, [r4, #0]
 801411a:	f000 000f 	and.w	r0, r0, #15
 801411e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014122:	6020      	str	r0, [r4, #0]
 8014124:	e7b5      	b.n	8014092 <__hexnan+0x7a>
 8014126:	2508      	movs	r5, #8
 8014128:	e7b3      	b.n	8014092 <__hexnan+0x7a>
 801412a:	9b01      	ldr	r3, [sp, #4]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d0dd      	beq.n	80140ec <__hexnan+0xd4>
 8014130:	f1c3 0320 	rsb	r3, r3, #32
 8014134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014138:	40da      	lsrs	r2, r3
 801413a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801413e:	4013      	ands	r3, r2
 8014140:	f846 3c04 	str.w	r3, [r6, #-4]
 8014144:	e7d2      	b.n	80140ec <__hexnan+0xd4>
 8014146:	3f04      	subs	r7, #4
 8014148:	e7d0      	b.n	80140ec <__hexnan+0xd4>
 801414a:	2004      	movs	r0, #4
 801414c:	e7d5      	b.n	80140fa <__hexnan+0xe2>

0801414e <__ascii_mbtowc>:
 801414e:	b082      	sub	sp, #8
 8014150:	b901      	cbnz	r1, 8014154 <__ascii_mbtowc+0x6>
 8014152:	a901      	add	r1, sp, #4
 8014154:	b142      	cbz	r2, 8014168 <__ascii_mbtowc+0x1a>
 8014156:	b14b      	cbz	r3, 801416c <__ascii_mbtowc+0x1e>
 8014158:	7813      	ldrb	r3, [r2, #0]
 801415a:	600b      	str	r3, [r1, #0]
 801415c:	7812      	ldrb	r2, [r2, #0]
 801415e:	1e10      	subs	r0, r2, #0
 8014160:	bf18      	it	ne
 8014162:	2001      	movne	r0, #1
 8014164:	b002      	add	sp, #8
 8014166:	4770      	bx	lr
 8014168:	4610      	mov	r0, r2
 801416a:	e7fb      	b.n	8014164 <__ascii_mbtowc+0x16>
 801416c:	f06f 0001 	mvn.w	r0, #1
 8014170:	e7f8      	b.n	8014164 <__ascii_mbtowc+0x16>

08014172 <_realloc_r>:
 8014172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014176:	4680      	mov	r8, r0
 8014178:	4615      	mov	r5, r2
 801417a:	460c      	mov	r4, r1
 801417c:	b921      	cbnz	r1, 8014188 <_realloc_r+0x16>
 801417e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014182:	4611      	mov	r1, r2
 8014184:	f7fb b8ec 	b.w	800f360 <_malloc_r>
 8014188:	b92a      	cbnz	r2, 8014196 <_realloc_r+0x24>
 801418a:	f7fd f979 	bl	8011480 <_free_r>
 801418e:	2400      	movs	r4, #0
 8014190:	4620      	mov	r0, r4
 8014192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014196:	f000 f8b2 	bl	80142fe <_malloc_usable_size_r>
 801419a:	4285      	cmp	r5, r0
 801419c:	4606      	mov	r6, r0
 801419e:	d802      	bhi.n	80141a6 <_realloc_r+0x34>
 80141a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80141a4:	d8f4      	bhi.n	8014190 <_realloc_r+0x1e>
 80141a6:	4629      	mov	r1, r5
 80141a8:	4640      	mov	r0, r8
 80141aa:	f7fb f8d9 	bl	800f360 <_malloc_r>
 80141ae:	4607      	mov	r7, r0
 80141b0:	2800      	cmp	r0, #0
 80141b2:	d0ec      	beq.n	801418e <_realloc_r+0x1c>
 80141b4:	42b5      	cmp	r5, r6
 80141b6:	462a      	mov	r2, r5
 80141b8:	4621      	mov	r1, r4
 80141ba:	bf28      	it	cs
 80141bc:	4632      	movcs	r2, r6
 80141be:	f7fc faf2 	bl	80107a6 <memcpy>
 80141c2:	4621      	mov	r1, r4
 80141c4:	4640      	mov	r0, r8
 80141c6:	f7fd f95b 	bl	8011480 <_free_r>
 80141ca:	463c      	mov	r4, r7
 80141cc:	e7e0      	b.n	8014190 <_realloc_r+0x1e>
	...

080141d0 <_strtoul_l.constprop.0>:
 80141d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141d4:	4e34      	ldr	r6, [pc, #208]	@ (80142a8 <_strtoul_l.constprop.0+0xd8>)
 80141d6:	4686      	mov	lr, r0
 80141d8:	460d      	mov	r5, r1
 80141da:	4628      	mov	r0, r5
 80141dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141e0:	5d37      	ldrb	r7, [r6, r4]
 80141e2:	f017 0708 	ands.w	r7, r7, #8
 80141e6:	d1f8      	bne.n	80141da <_strtoul_l.constprop.0+0xa>
 80141e8:	2c2d      	cmp	r4, #45	@ 0x2d
 80141ea:	d12f      	bne.n	801424c <_strtoul_l.constprop.0+0x7c>
 80141ec:	782c      	ldrb	r4, [r5, #0]
 80141ee:	2701      	movs	r7, #1
 80141f0:	1c85      	adds	r5, r0, #2
 80141f2:	f033 0010 	bics.w	r0, r3, #16
 80141f6:	d109      	bne.n	801420c <_strtoul_l.constprop.0+0x3c>
 80141f8:	2c30      	cmp	r4, #48	@ 0x30
 80141fa:	d12c      	bne.n	8014256 <_strtoul_l.constprop.0+0x86>
 80141fc:	7828      	ldrb	r0, [r5, #0]
 80141fe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8014202:	2858      	cmp	r0, #88	@ 0x58
 8014204:	d127      	bne.n	8014256 <_strtoul_l.constprop.0+0x86>
 8014206:	786c      	ldrb	r4, [r5, #1]
 8014208:	2310      	movs	r3, #16
 801420a:	3502      	adds	r5, #2
 801420c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014210:	2600      	movs	r6, #0
 8014212:	fbb8 f8f3 	udiv	r8, r8, r3
 8014216:	fb03 f908 	mul.w	r9, r3, r8
 801421a:	ea6f 0909 	mvn.w	r9, r9
 801421e:	4630      	mov	r0, r6
 8014220:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8014224:	f1bc 0f09 	cmp.w	ip, #9
 8014228:	d81c      	bhi.n	8014264 <_strtoul_l.constprop.0+0x94>
 801422a:	4664      	mov	r4, ip
 801422c:	42a3      	cmp	r3, r4
 801422e:	dd2a      	ble.n	8014286 <_strtoul_l.constprop.0+0xb6>
 8014230:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8014234:	d007      	beq.n	8014246 <_strtoul_l.constprop.0+0x76>
 8014236:	4580      	cmp	r8, r0
 8014238:	d322      	bcc.n	8014280 <_strtoul_l.constprop.0+0xb0>
 801423a:	d101      	bne.n	8014240 <_strtoul_l.constprop.0+0x70>
 801423c:	45a1      	cmp	r9, r4
 801423e:	db1f      	blt.n	8014280 <_strtoul_l.constprop.0+0xb0>
 8014240:	fb00 4003 	mla	r0, r0, r3, r4
 8014244:	2601      	movs	r6, #1
 8014246:	f815 4b01 	ldrb.w	r4, [r5], #1
 801424a:	e7e9      	b.n	8014220 <_strtoul_l.constprop.0+0x50>
 801424c:	2c2b      	cmp	r4, #43	@ 0x2b
 801424e:	bf04      	itt	eq
 8014250:	782c      	ldrbeq	r4, [r5, #0]
 8014252:	1c85      	addeq	r5, r0, #2
 8014254:	e7cd      	b.n	80141f2 <_strtoul_l.constprop.0+0x22>
 8014256:	2b00      	cmp	r3, #0
 8014258:	d1d8      	bne.n	801420c <_strtoul_l.constprop.0+0x3c>
 801425a:	2c30      	cmp	r4, #48	@ 0x30
 801425c:	bf0c      	ite	eq
 801425e:	2308      	moveq	r3, #8
 8014260:	230a      	movne	r3, #10
 8014262:	e7d3      	b.n	801420c <_strtoul_l.constprop.0+0x3c>
 8014264:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8014268:	f1bc 0f19 	cmp.w	ip, #25
 801426c:	d801      	bhi.n	8014272 <_strtoul_l.constprop.0+0xa2>
 801426e:	3c37      	subs	r4, #55	@ 0x37
 8014270:	e7dc      	b.n	801422c <_strtoul_l.constprop.0+0x5c>
 8014272:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8014276:	f1bc 0f19 	cmp.w	ip, #25
 801427a:	d804      	bhi.n	8014286 <_strtoul_l.constprop.0+0xb6>
 801427c:	3c57      	subs	r4, #87	@ 0x57
 801427e:	e7d5      	b.n	801422c <_strtoul_l.constprop.0+0x5c>
 8014280:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8014284:	e7df      	b.n	8014246 <_strtoul_l.constprop.0+0x76>
 8014286:	1c73      	adds	r3, r6, #1
 8014288:	d106      	bne.n	8014298 <_strtoul_l.constprop.0+0xc8>
 801428a:	2322      	movs	r3, #34	@ 0x22
 801428c:	f8ce 3000 	str.w	r3, [lr]
 8014290:	4630      	mov	r0, r6
 8014292:	b932      	cbnz	r2, 80142a2 <_strtoul_l.constprop.0+0xd2>
 8014294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014298:	b107      	cbz	r7, 801429c <_strtoul_l.constprop.0+0xcc>
 801429a:	4240      	negs	r0, r0
 801429c:	2a00      	cmp	r2, #0
 801429e:	d0f9      	beq.n	8014294 <_strtoul_l.constprop.0+0xc4>
 80142a0:	b106      	cbz	r6, 80142a4 <_strtoul_l.constprop.0+0xd4>
 80142a2:	1e69      	subs	r1, r5, #1
 80142a4:	6011      	str	r1, [r2, #0]
 80142a6:	e7f5      	b.n	8014294 <_strtoul_l.constprop.0+0xc4>
 80142a8:	08015b51 	.word	0x08015b51

080142ac <_strtoul_r>:
 80142ac:	f7ff bf90 	b.w	80141d0 <_strtoul_l.constprop.0>

080142b0 <__ascii_wctomb>:
 80142b0:	4603      	mov	r3, r0
 80142b2:	4608      	mov	r0, r1
 80142b4:	b141      	cbz	r1, 80142c8 <__ascii_wctomb+0x18>
 80142b6:	2aff      	cmp	r2, #255	@ 0xff
 80142b8:	d904      	bls.n	80142c4 <__ascii_wctomb+0x14>
 80142ba:	228a      	movs	r2, #138	@ 0x8a
 80142bc:	601a      	str	r2, [r3, #0]
 80142be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80142c2:	4770      	bx	lr
 80142c4:	700a      	strb	r2, [r1, #0]
 80142c6:	2001      	movs	r0, #1
 80142c8:	4770      	bx	lr
	...

080142cc <fiprintf>:
 80142cc:	b40e      	push	{r1, r2, r3}
 80142ce:	b503      	push	{r0, r1, lr}
 80142d0:	4601      	mov	r1, r0
 80142d2:	ab03      	add	r3, sp, #12
 80142d4:	4805      	ldr	r0, [pc, #20]	@ (80142ec <fiprintf+0x20>)
 80142d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80142da:	6800      	ldr	r0, [r0, #0]
 80142dc:	9301      	str	r3, [sp, #4]
 80142de:	f7fe ff9f 	bl	8013220 <_vfiprintf_r>
 80142e2:	b002      	add	sp, #8
 80142e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80142e8:	b003      	add	sp, #12
 80142ea:	4770      	bx	lr
 80142ec:	2000017c 	.word	0x2000017c

080142f0 <abort>:
 80142f0:	b508      	push	{r3, lr}
 80142f2:	2006      	movs	r0, #6
 80142f4:	f000 f834 	bl	8014360 <raise>
 80142f8:	2001      	movs	r0, #1
 80142fa:	f7ef ff1f 	bl	800413c <_exit>

080142fe <_malloc_usable_size_r>:
 80142fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014302:	1f18      	subs	r0, r3, #4
 8014304:	2b00      	cmp	r3, #0
 8014306:	bfbc      	itt	lt
 8014308:	580b      	ldrlt	r3, [r1, r0]
 801430a:	18c0      	addlt	r0, r0, r3
 801430c:	4770      	bx	lr

0801430e <_raise_r>:
 801430e:	291f      	cmp	r1, #31
 8014310:	b538      	push	{r3, r4, r5, lr}
 8014312:	4605      	mov	r5, r0
 8014314:	460c      	mov	r4, r1
 8014316:	d904      	bls.n	8014322 <_raise_r+0x14>
 8014318:	2316      	movs	r3, #22
 801431a:	6003      	str	r3, [r0, #0]
 801431c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014320:	bd38      	pop	{r3, r4, r5, pc}
 8014322:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014324:	b112      	cbz	r2, 801432c <_raise_r+0x1e>
 8014326:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801432a:	b94b      	cbnz	r3, 8014340 <_raise_r+0x32>
 801432c:	4628      	mov	r0, r5
 801432e:	f000 f831 	bl	8014394 <_getpid_r>
 8014332:	4622      	mov	r2, r4
 8014334:	4601      	mov	r1, r0
 8014336:	4628      	mov	r0, r5
 8014338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801433c:	f000 b818 	b.w	8014370 <_kill_r>
 8014340:	2b01      	cmp	r3, #1
 8014342:	d00a      	beq.n	801435a <_raise_r+0x4c>
 8014344:	1c59      	adds	r1, r3, #1
 8014346:	d103      	bne.n	8014350 <_raise_r+0x42>
 8014348:	2316      	movs	r3, #22
 801434a:	6003      	str	r3, [r0, #0]
 801434c:	2001      	movs	r0, #1
 801434e:	e7e7      	b.n	8014320 <_raise_r+0x12>
 8014350:	2100      	movs	r1, #0
 8014352:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014356:	4620      	mov	r0, r4
 8014358:	4798      	blx	r3
 801435a:	2000      	movs	r0, #0
 801435c:	e7e0      	b.n	8014320 <_raise_r+0x12>
	...

08014360 <raise>:
 8014360:	4b02      	ldr	r3, [pc, #8]	@ (801436c <raise+0xc>)
 8014362:	4601      	mov	r1, r0
 8014364:	6818      	ldr	r0, [r3, #0]
 8014366:	f7ff bfd2 	b.w	801430e <_raise_r>
 801436a:	bf00      	nop
 801436c:	2000017c 	.word	0x2000017c

08014370 <_kill_r>:
 8014370:	b538      	push	{r3, r4, r5, lr}
 8014372:	4d07      	ldr	r5, [pc, #28]	@ (8014390 <_kill_r+0x20>)
 8014374:	2300      	movs	r3, #0
 8014376:	4604      	mov	r4, r0
 8014378:	4608      	mov	r0, r1
 801437a:	4611      	mov	r1, r2
 801437c:	602b      	str	r3, [r5, #0]
 801437e:	f7ef fecd 	bl	800411c <_kill>
 8014382:	1c43      	adds	r3, r0, #1
 8014384:	d102      	bne.n	801438c <_kill_r+0x1c>
 8014386:	682b      	ldr	r3, [r5, #0]
 8014388:	b103      	cbz	r3, 801438c <_kill_r+0x1c>
 801438a:	6023      	str	r3, [r4, #0]
 801438c:	bd38      	pop	{r3, r4, r5, pc}
 801438e:	bf00      	nop
 8014390:	20002280 	.word	0x20002280

08014394 <_getpid_r>:
 8014394:	f7ef beba 	b.w	800410c <_getpid>

08014398 <asinf>:
 8014398:	b508      	push	{r3, lr}
 801439a:	ed2d 8b02 	vpush	{d8}
 801439e:	eeb0 8a40 	vmov.f32	s16, s0
 80143a2:	f000 f98b 	bl	80146bc <__ieee754_asinf>
 80143a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80143aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ae:	eef0 8a40 	vmov.f32	s17, s0
 80143b2:	d615      	bvs.n	80143e0 <asinf+0x48>
 80143b4:	eeb0 0a48 	vmov.f32	s0, s16
 80143b8:	f000 f87e 	bl	80144b8 <fabsf>
 80143bc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80143c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80143c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143c8:	dd0a      	ble.n	80143e0 <asinf+0x48>
 80143ca:	f7fc f9bf 	bl	801074c <__errno>
 80143ce:	ecbd 8b02 	vpop	{d8}
 80143d2:	2321      	movs	r3, #33	@ 0x21
 80143d4:	6003      	str	r3, [r0, #0]
 80143d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80143da:	4804      	ldr	r0, [pc, #16]	@ (80143ec <asinf+0x54>)
 80143dc:	f7fc b9f2 	b.w	80107c4 <nanf>
 80143e0:	eeb0 0a68 	vmov.f32	s0, s17
 80143e4:	ecbd 8b02 	vpop	{d8}
 80143e8:	bd08      	pop	{r3, pc}
 80143ea:	bf00      	nop
 80143ec:	08015cc0 	.word	0x08015cc0

080143f0 <atan2f>:
 80143f0:	f000 ba4a 	b.w	8014888 <__ieee754_atan2f>

080143f4 <sqrtf>:
 80143f4:	b508      	push	{r3, lr}
 80143f6:	ed2d 8b02 	vpush	{d8}
 80143fa:	eeb0 8a40 	vmov.f32	s16, s0
 80143fe:	f000 f8b9 	bl	8014574 <__ieee754_sqrtf>
 8014402:	eeb4 8a48 	vcmp.f32	s16, s16
 8014406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801440a:	d60c      	bvs.n	8014426 <sqrtf+0x32>
 801440c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801442c <sqrtf+0x38>
 8014410:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014418:	d505      	bpl.n	8014426 <sqrtf+0x32>
 801441a:	f7fc f997 	bl	801074c <__errno>
 801441e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014422:	2321      	movs	r3, #33	@ 0x21
 8014424:	6003      	str	r3, [r0, #0]
 8014426:	ecbd 8b02 	vpop	{d8}
 801442a:	bd08      	pop	{r3, pc}
 801442c:	00000000 	.word	0x00000000

08014430 <cosf>:
 8014430:	ee10 3a10 	vmov	r3, s0
 8014434:	b507      	push	{r0, r1, r2, lr}
 8014436:	4a1e      	ldr	r2, [pc, #120]	@ (80144b0 <cosf+0x80>)
 8014438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801443c:	4293      	cmp	r3, r2
 801443e:	d806      	bhi.n	801444e <cosf+0x1e>
 8014440:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80144b4 <cosf+0x84>
 8014444:	b003      	add	sp, #12
 8014446:	f85d eb04 	ldr.w	lr, [sp], #4
 801444a:	f000 b897 	b.w	801457c <__kernel_cosf>
 801444e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8014452:	d304      	bcc.n	801445e <cosf+0x2e>
 8014454:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014458:	b003      	add	sp, #12
 801445a:	f85d fb04 	ldr.w	pc, [sp], #4
 801445e:	4668      	mov	r0, sp
 8014460:	f000 fab2 	bl	80149c8 <__ieee754_rem_pio2f>
 8014464:	f000 0003 	and.w	r0, r0, #3
 8014468:	2801      	cmp	r0, #1
 801446a:	d009      	beq.n	8014480 <cosf+0x50>
 801446c:	2802      	cmp	r0, #2
 801446e:	d010      	beq.n	8014492 <cosf+0x62>
 8014470:	b9b0      	cbnz	r0, 80144a0 <cosf+0x70>
 8014472:	eddd 0a01 	vldr	s1, [sp, #4]
 8014476:	ed9d 0a00 	vldr	s0, [sp]
 801447a:	f000 f87f 	bl	801457c <__kernel_cosf>
 801447e:	e7eb      	b.n	8014458 <cosf+0x28>
 8014480:	eddd 0a01 	vldr	s1, [sp, #4]
 8014484:	ed9d 0a00 	vldr	s0, [sp]
 8014488:	f000 f8d0 	bl	801462c <__kernel_sinf>
 801448c:	eeb1 0a40 	vneg.f32	s0, s0
 8014490:	e7e2      	b.n	8014458 <cosf+0x28>
 8014492:	eddd 0a01 	vldr	s1, [sp, #4]
 8014496:	ed9d 0a00 	vldr	s0, [sp]
 801449a:	f000 f86f 	bl	801457c <__kernel_cosf>
 801449e:	e7f5      	b.n	801448c <cosf+0x5c>
 80144a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80144a4:	ed9d 0a00 	vldr	s0, [sp]
 80144a8:	2001      	movs	r0, #1
 80144aa:	f000 f8bf 	bl	801462c <__kernel_sinf>
 80144ae:	e7d3      	b.n	8014458 <cosf+0x28>
 80144b0:	3f490fd8 	.word	0x3f490fd8
 80144b4:	00000000 	.word	0x00000000

080144b8 <fabsf>:
 80144b8:	ee10 3a10 	vmov	r3, s0
 80144bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80144c0:	ee00 3a10 	vmov	s0, r3
 80144c4:	4770      	bx	lr

080144c6 <fmaxf>:
 80144c6:	b508      	push	{r3, lr}
 80144c8:	ed2d 8b02 	vpush	{d8}
 80144cc:	eeb0 8a40 	vmov.f32	s16, s0
 80144d0:	eef0 8a60 	vmov.f32	s17, s1
 80144d4:	f000 f832 	bl	801453c <__fpclassifyf>
 80144d8:	b930      	cbnz	r0, 80144e8 <fmaxf+0x22>
 80144da:	eeb0 8a68 	vmov.f32	s16, s17
 80144de:	eeb0 0a48 	vmov.f32	s0, s16
 80144e2:	ecbd 8b02 	vpop	{d8}
 80144e6:	bd08      	pop	{r3, pc}
 80144e8:	eeb0 0a68 	vmov.f32	s0, s17
 80144ec:	f000 f826 	bl	801453c <__fpclassifyf>
 80144f0:	2800      	cmp	r0, #0
 80144f2:	d0f4      	beq.n	80144de <fmaxf+0x18>
 80144f4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80144f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144fc:	dded      	ble.n	80144da <fmaxf+0x14>
 80144fe:	e7ee      	b.n	80144de <fmaxf+0x18>

08014500 <fminf>:
 8014500:	b508      	push	{r3, lr}
 8014502:	ed2d 8b02 	vpush	{d8}
 8014506:	eeb0 8a40 	vmov.f32	s16, s0
 801450a:	eef0 8a60 	vmov.f32	s17, s1
 801450e:	f000 f815 	bl	801453c <__fpclassifyf>
 8014512:	b930      	cbnz	r0, 8014522 <fminf+0x22>
 8014514:	eeb0 8a68 	vmov.f32	s16, s17
 8014518:	eeb0 0a48 	vmov.f32	s0, s16
 801451c:	ecbd 8b02 	vpop	{d8}
 8014520:	bd08      	pop	{r3, pc}
 8014522:	eeb0 0a68 	vmov.f32	s0, s17
 8014526:	f000 f809 	bl	801453c <__fpclassifyf>
 801452a:	2800      	cmp	r0, #0
 801452c:	d0f4      	beq.n	8014518 <fminf+0x18>
 801452e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014536:	d5ed      	bpl.n	8014514 <fminf+0x14>
 8014538:	e7ee      	b.n	8014518 <fminf+0x18>
	...

0801453c <__fpclassifyf>:
 801453c:	ee10 3a10 	vmov	r3, s0
 8014540:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8014544:	d00d      	beq.n	8014562 <__fpclassifyf+0x26>
 8014546:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 801454a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801454e:	d30a      	bcc.n	8014566 <__fpclassifyf+0x2a>
 8014550:	4b07      	ldr	r3, [pc, #28]	@ (8014570 <__fpclassifyf+0x34>)
 8014552:	1e42      	subs	r2, r0, #1
 8014554:	429a      	cmp	r2, r3
 8014556:	d908      	bls.n	801456a <__fpclassifyf+0x2e>
 8014558:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 801455c:	4258      	negs	r0, r3
 801455e:	4158      	adcs	r0, r3
 8014560:	4770      	bx	lr
 8014562:	2002      	movs	r0, #2
 8014564:	4770      	bx	lr
 8014566:	2004      	movs	r0, #4
 8014568:	4770      	bx	lr
 801456a:	2003      	movs	r0, #3
 801456c:	4770      	bx	lr
 801456e:	bf00      	nop
 8014570:	007ffffe 	.word	0x007ffffe

08014574 <__ieee754_sqrtf>:
 8014574:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014578:	4770      	bx	lr
	...

0801457c <__kernel_cosf>:
 801457c:	ee10 3a10 	vmov	r3, s0
 8014580:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014584:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8014588:	eef0 6a40 	vmov.f32	s13, s0
 801458c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014590:	d204      	bcs.n	801459c <__kernel_cosf+0x20>
 8014592:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8014596:	ee17 2a90 	vmov	r2, s15
 801459a:	b342      	cbz	r2, 80145ee <__kernel_cosf+0x72>
 801459c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80145a0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801460c <__kernel_cosf+0x90>
 80145a4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8014610 <__kernel_cosf+0x94>
 80145a8:	4a1a      	ldr	r2, [pc, #104]	@ (8014614 <__kernel_cosf+0x98>)
 80145aa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80145ae:	4293      	cmp	r3, r2
 80145b0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014618 <__kernel_cosf+0x9c>
 80145b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80145b8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801461c <__kernel_cosf+0xa0>
 80145bc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80145c0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8014620 <__kernel_cosf+0xa4>
 80145c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80145c8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8014624 <__kernel_cosf+0xa8>
 80145cc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80145d0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80145d4:	ee26 6a07 	vmul.f32	s12, s12, s14
 80145d8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80145dc:	eee7 0a06 	vfma.f32	s1, s14, s12
 80145e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80145e4:	d804      	bhi.n	80145f0 <__kernel_cosf+0x74>
 80145e6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80145ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80145ee:	4770      	bx	lr
 80145f0:	4a0d      	ldr	r2, [pc, #52]	@ (8014628 <__kernel_cosf+0xac>)
 80145f2:	4293      	cmp	r3, r2
 80145f4:	bf9a      	itte	ls
 80145f6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80145fa:	ee07 3a10 	vmovls	s14, r3
 80145fe:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8014602:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801460a:	e7ec      	b.n	80145e6 <__kernel_cosf+0x6a>
 801460c:	ad47d74e 	.word	0xad47d74e
 8014610:	310f74f6 	.word	0x310f74f6
 8014614:	3e999999 	.word	0x3e999999
 8014618:	b493f27c 	.word	0xb493f27c
 801461c:	37d00d01 	.word	0x37d00d01
 8014620:	bab60b61 	.word	0xbab60b61
 8014624:	3d2aaaab 	.word	0x3d2aaaab
 8014628:	3f480000 	.word	0x3f480000

0801462c <__kernel_sinf>:
 801462c:	ee10 3a10 	vmov	r3, s0
 8014630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014634:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8014638:	d204      	bcs.n	8014644 <__kernel_sinf+0x18>
 801463a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801463e:	ee17 3a90 	vmov	r3, s15
 8014642:	b35b      	cbz	r3, 801469c <__kernel_sinf+0x70>
 8014644:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014648:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80146a0 <__kernel_sinf+0x74>
 801464c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80146a4 <__kernel_sinf+0x78>
 8014650:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014654:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80146a8 <__kernel_sinf+0x7c>
 8014658:	eee6 7a07 	vfma.f32	s15, s12, s14
 801465c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80146ac <__kernel_sinf+0x80>
 8014660:	eea7 6a87 	vfma.f32	s12, s15, s14
 8014664:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80146b0 <__kernel_sinf+0x84>
 8014668:	ee60 6a07 	vmul.f32	s13, s0, s14
 801466c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014670:	b930      	cbnz	r0, 8014680 <__kernel_sinf+0x54>
 8014672:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80146b4 <__kernel_sinf+0x88>
 8014676:	eea7 6a27 	vfma.f32	s12, s14, s15
 801467a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801467e:	4770      	bx	lr
 8014680:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8014684:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8014688:	eee0 7a86 	vfma.f32	s15, s1, s12
 801468c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8014690:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80146b8 <__kernel_sinf+0x8c>
 8014694:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8014698:	ee30 0a60 	vsub.f32	s0, s0, s1
 801469c:	4770      	bx	lr
 801469e:	bf00      	nop
 80146a0:	2f2ec9d3 	.word	0x2f2ec9d3
 80146a4:	b2d72f34 	.word	0xb2d72f34
 80146a8:	3638ef1b 	.word	0x3638ef1b
 80146ac:	b9500d01 	.word	0xb9500d01
 80146b0:	3c088889 	.word	0x3c088889
 80146b4:	be2aaaab 	.word	0xbe2aaaab
 80146b8:	3e2aaaab 	.word	0x3e2aaaab

080146bc <__ieee754_asinf>:
 80146bc:	b538      	push	{r3, r4, r5, lr}
 80146be:	ee10 5a10 	vmov	r5, s0
 80146c2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80146c6:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80146ca:	ed2d 8b04 	vpush	{d8-d9}
 80146ce:	d10c      	bne.n	80146ea <__ieee754_asinf+0x2e>
 80146d0:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8014848 <__ieee754_asinf+0x18c>
 80146d4:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 801484c <__ieee754_asinf+0x190>
 80146d8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80146dc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80146e0:	eeb0 0a67 	vmov.f32	s0, s15
 80146e4:	ecbd 8b04 	vpop	{d8-d9}
 80146e8:	bd38      	pop	{r3, r4, r5, pc}
 80146ea:	d904      	bls.n	80146f6 <__ieee754_asinf+0x3a>
 80146ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 80146f0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80146f4:	e7f6      	b.n	80146e4 <__ieee754_asinf+0x28>
 80146f6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80146fa:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80146fe:	d20b      	bcs.n	8014718 <__ieee754_asinf+0x5c>
 8014700:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8014704:	d252      	bcs.n	80147ac <__ieee754_asinf+0xf0>
 8014706:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8014850 <__ieee754_asinf+0x194>
 801470a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801470e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014716:	dce5      	bgt.n	80146e4 <__ieee754_asinf+0x28>
 8014718:	f7ff fece 	bl	80144b8 <fabsf>
 801471c:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8014720:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014724:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014728:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8014854 <__ieee754_asinf+0x198>
 801472c:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8014858 <__ieee754_asinf+0x19c>
 8014730:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 801485c <__ieee754_asinf+0x1a0>
 8014734:	eea8 7a27 	vfma.f32	s14, s16, s15
 8014738:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8014860 <__ieee754_asinf+0x1a4>
 801473c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014740:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8014864 <__ieee754_asinf+0x1a8>
 8014744:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014748:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8014868 <__ieee754_asinf+0x1ac>
 801474c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014750:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 801486c <__ieee754_asinf+0x1b0>
 8014754:	eea7 9a88 	vfma.f32	s18, s15, s16
 8014758:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8014870 <__ieee754_asinf+0x1b4>
 801475c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8014760:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8014874 <__ieee754_asinf+0x1b8>
 8014764:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014768:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8014878 <__ieee754_asinf+0x1bc>
 801476c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014770:	eeb0 0a48 	vmov.f32	s0, s16
 8014774:	eee7 8a88 	vfma.f32	s17, s15, s16
 8014778:	f7ff fefc 	bl	8014574 <__ieee754_sqrtf>
 801477c:	4b3f      	ldr	r3, [pc, #252]	@ (801487c <__ieee754_asinf+0x1c0>)
 801477e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8014782:	429c      	cmp	r4, r3
 8014784:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8014788:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801478c:	d93d      	bls.n	801480a <__ieee754_asinf+0x14e>
 801478e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8014792:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8014880 <__ieee754_asinf+0x1c4>
 8014796:	eee0 7a26 	vfma.f32	s15, s0, s13
 801479a:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 801484c <__ieee754_asinf+0x190>
 801479e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80147a2:	2d00      	cmp	r5, #0
 80147a4:	bfd8      	it	le
 80147a6:	eeb1 0a40 	vnegle.f32	s0, s0
 80147aa:	e79b      	b.n	80146e4 <__ieee754_asinf+0x28>
 80147ac:	ee60 7a00 	vmul.f32	s15, s0, s0
 80147b0:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8014858 <__ieee754_asinf+0x19c>
 80147b4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8014854 <__ieee754_asinf+0x198>
 80147b8:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 801486c <__ieee754_asinf+0x1b0>
 80147bc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80147c0:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8014860 <__ieee754_asinf+0x1a4>
 80147c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80147c8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8014864 <__ieee754_asinf+0x1a8>
 80147cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80147d0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8014868 <__ieee754_asinf+0x1ac>
 80147d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80147d8:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 801485c <__ieee754_asinf+0x1a0>
 80147dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80147e0:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8014870 <__ieee754_asinf+0x1b4>
 80147e4:	eee7 6a86 	vfma.f32	s13, s15, s12
 80147e8:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8014874 <__ieee754_asinf+0x1b8>
 80147ec:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80147f0:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8014878 <__ieee754_asinf+0x1bc>
 80147f4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80147f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80147fc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8014800:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8014804:	eea0 0a27 	vfma.f32	s0, s0, s15
 8014808:	e76c      	b.n	80146e4 <__ieee754_asinf+0x28>
 801480a:	ee10 3a10 	vmov	r3, s0
 801480e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8014812:	f023 030f 	bic.w	r3, r3, #15
 8014816:	ee07 3a10 	vmov	s14, r3
 801481a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801481e:	ee70 5a00 	vadd.f32	s11, s0, s0
 8014822:	ee30 0a07 	vadd.f32	s0, s0, s14
 8014826:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8014848 <__ieee754_asinf+0x18c>
 801482a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801482e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8014884 <__ieee754_asinf+0x1c8>
 8014832:	eee5 7a66 	vfms.f32	s15, s10, s13
 8014836:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801483a:	eeb0 6a40 	vmov.f32	s12, s0
 801483e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014842:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014846:	e7aa      	b.n	801479e <__ieee754_asinf+0xe2>
 8014848:	b33bbd2e 	.word	0xb33bbd2e
 801484c:	3fc90fdb 	.word	0x3fc90fdb
 8014850:	7149f2ca 	.word	0x7149f2ca
 8014854:	3a4f7f04 	.word	0x3a4f7f04
 8014858:	3811ef08 	.word	0x3811ef08
 801485c:	3e2aaaab 	.word	0x3e2aaaab
 8014860:	bd241146 	.word	0xbd241146
 8014864:	3e4e0aa8 	.word	0x3e4e0aa8
 8014868:	bea6b090 	.word	0xbea6b090
 801486c:	3d9dc62e 	.word	0x3d9dc62e
 8014870:	bf303361 	.word	0xbf303361
 8014874:	4001572d 	.word	0x4001572d
 8014878:	c019d139 	.word	0xc019d139
 801487c:	3f799999 	.word	0x3f799999
 8014880:	333bbd2e 	.word	0x333bbd2e
 8014884:	3f490fdb 	.word	0x3f490fdb

08014888 <__ieee754_atan2f>:
 8014888:	ee10 2a90 	vmov	r2, s1
 801488c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8014890:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8014894:	b510      	push	{r4, lr}
 8014896:	eef0 7a40 	vmov.f32	s15, s0
 801489a:	d806      	bhi.n	80148aa <__ieee754_atan2f+0x22>
 801489c:	ee10 0a10 	vmov	r0, s0
 80148a0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80148a4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80148a8:	d904      	bls.n	80148b4 <__ieee754_atan2f+0x2c>
 80148aa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80148ae:	eeb0 0a67 	vmov.f32	s0, s15
 80148b2:	bd10      	pop	{r4, pc}
 80148b4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80148b8:	d103      	bne.n	80148c2 <__ieee754_atan2f+0x3a>
 80148ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148be:	f000 b9b3 	b.w	8014c28 <atanf>
 80148c2:	1794      	asrs	r4, r2, #30
 80148c4:	f004 0402 	and.w	r4, r4, #2
 80148c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80148cc:	b943      	cbnz	r3, 80148e0 <__ieee754_atan2f+0x58>
 80148ce:	2c02      	cmp	r4, #2
 80148d0:	d05e      	beq.n	8014990 <__ieee754_atan2f+0x108>
 80148d2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80149a4 <__ieee754_atan2f+0x11c>
 80148d6:	2c03      	cmp	r4, #3
 80148d8:	bf08      	it	eq
 80148da:	eef0 7a47 	vmoveq.f32	s15, s14
 80148de:	e7e6      	b.n	80148ae <__ieee754_atan2f+0x26>
 80148e0:	b941      	cbnz	r1, 80148f4 <__ieee754_atan2f+0x6c>
 80148e2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80149a8 <__ieee754_atan2f+0x120>
 80148e6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80149ac <__ieee754_atan2f+0x124>
 80148ea:	2800      	cmp	r0, #0
 80148ec:	bfb8      	it	lt
 80148ee:	eef0 7a47 	vmovlt.f32	s15, s14
 80148f2:	e7dc      	b.n	80148ae <__ieee754_atan2f+0x26>
 80148f4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80148f8:	d110      	bne.n	801491c <__ieee754_atan2f+0x94>
 80148fa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80148fe:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8014902:	d107      	bne.n	8014914 <__ieee754_atan2f+0x8c>
 8014904:	2c02      	cmp	r4, #2
 8014906:	d846      	bhi.n	8014996 <__ieee754_atan2f+0x10e>
 8014908:	4b29      	ldr	r3, [pc, #164]	@ (80149b0 <__ieee754_atan2f+0x128>)
 801490a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801490e:	edd3 7a00 	vldr	s15, [r3]
 8014912:	e7cc      	b.n	80148ae <__ieee754_atan2f+0x26>
 8014914:	2c02      	cmp	r4, #2
 8014916:	d841      	bhi.n	801499c <__ieee754_atan2f+0x114>
 8014918:	4b26      	ldr	r3, [pc, #152]	@ (80149b4 <__ieee754_atan2f+0x12c>)
 801491a:	e7f6      	b.n	801490a <__ieee754_atan2f+0x82>
 801491c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8014920:	d0df      	beq.n	80148e2 <__ieee754_atan2f+0x5a>
 8014922:	1a5b      	subs	r3, r3, r1
 8014924:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8014928:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801492c:	da1a      	bge.n	8014964 <__ieee754_atan2f+0xdc>
 801492e:	2a00      	cmp	r2, #0
 8014930:	da01      	bge.n	8014936 <__ieee754_atan2f+0xae>
 8014932:	313c      	adds	r1, #60	@ 0x3c
 8014934:	db19      	blt.n	801496a <__ieee754_atan2f+0xe2>
 8014936:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801493a:	f7ff fdbd 	bl	80144b8 <fabsf>
 801493e:	f000 f973 	bl	8014c28 <atanf>
 8014942:	eef0 7a40 	vmov.f32	s15, s0
 8014946:	2c01      	cmp	r4, #1
 8014948:	d012      	beq.n	8014970 <__ieee754_atan2f+0xe8>
 801494a:	2c02      	cmp	r4, #2
 801494c:	d017      	beq.n	801497e <__ieee754_atan2f+0xf6>
 801494e:	2c00      	cmp	r4, #0
 8014950:	d0ad      	beq.n	80148ae <__ieee754_atan2f+0x26>
 8014952:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80149b8 <__ieee754_atan2f+0x130>
 8014956:	ee77 7a87 	vadd.f32	s15, s15, s14
 801495a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80149bc <__ieee754_atan2f+0x134>
 801495e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014962:	e7a4      	b.n	80148ae <__ieee754_atan2f+0x26>
 8014964:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80149a8 <__ieee754_atan2f+0x120>
 8014968:	e7ed      	b.n	8014946 <__ieee754_atan2f+0xbe>
 801496a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80149c0 <__ieee754_atan2f+0x138>
 801496e:	e7ea      	b.n	8014946 <__ieee754_atan2f+0xbe>
 8014970:	ee17 3a90 	vmov	r3, s15
 8014974:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8014978:	ee07 3a90 	vmov	s15, r3
 801497c:	e797      	b.n	80148ae <__ieee754_atan2f+0x26>
 801497e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80149b8 <__ieee754_atan2f+0x130>
 8014982:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014986:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80149bc <__ieee754_atan2f+0x134>
 801498a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801498e:	e78e      	b.n	80148ae <__ieee754_atan2f+0x26>
 8014990:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80149bc <__ieee754_atan2f+0x134>
 8014994:	e78b      	b.n	80148ae <__ieee754_atan2f+0x26>
 8014996:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80149c4 <__ieee754_atan2f+0x13c>
 801499a:	e788      	b.n	80148ae <__ieee754_atan2f+0x26>
 801499c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80149c0 <__ieee754_atan2f+0x138>
 80149a0:	e785      	b.n	80148ae <__ieee754_atan2f+0x26>
 80149a2:	bf00      	nop
 80149a4:	c0490fdb 	.word	0xc0490fdb
 80149a8:	3fc90fdb 	.word	0x3fc90fdb
 80149ac:	bfc90fdb 	.word	0xbfc90fdb
 80149b0:	08015d30 	.word	0x08015d30
 80149b4:	08015d24 	.word	0x08015d24
 80149b8:	33bbbd2e 	.word	0x33bbbd2e
 80149bc:	40490fdb 	.word	0x40490fdb
 80149c0:	00000000 	.word	0x00000000
 80149c4:	3f490fdb 	.word	0x3f490fdb

080149c8 <__ieee754_rem_pio2f>:
 80149c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149ca:	ee10 6a10 	vmov	r6, s0
 80149ce:	4b88      	ldr	r3, [pc, #544]	@ (8014bf0 <__ieee754_rem_pio2f+0x228>)
 80149d0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80149d4:	429d      	cmp	r5, r3
 80149d6:	b087      	sub	sp, #28
 80149d8:	4604      	mov	r4, r0
 80149da:	d805      	bhi.n	80149e8 <__ieee754_rem_pio2f+0x20>
 80149dc:	2300      	movs	r3, #0
 80149de:	ed80 0a00 	vstr	s0, [r0]
 80149e2:	6043      	str	r3, [r0, #4]
 80149e4:	2000      	movs	r0, #0
 80149e6:	e022      	b.n	8014a2e <__ieee754_rem_pio2f+0x66>
 80149e8:	4b82      	ldr	r3, [pc, #520]	@ (8014bf4 <__ieee754_rem_pio2f+0x22c>)
 80149ea:	429d      	cmp	r5, r3
 80149ec:	d83a      	bhi.n	8014a64 <__ieee754_rem_pio2f+0x9c>
 80149ee:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80149f2:	2e00      	cmp	r6, #0
 80149f4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8014bf8 <__ieee754_rem_pio2f+0x230>
 80149f8:	4a80      	ldr	r2, [pc, #512]	@ (8014bfc <__ieee754_rem_pio2f+0x234>)
 80149fa:	f023 030f 	bic.w	r3, r3, #15
 80149fe:	dd18      	ble.n	8014a32 <__ieee754_rem_pio2f+0x6a>
 8014a00:	4293      	cmp	r3, r2
 8014a02:	ee70 7a47 	vsub.f32	s15, s0, s14
 8014a06:	bf09      	itett	eq
 8014a08:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8014c00 <__ieee754_rem_pio2f+0x238>
 8014a0c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8014c04 <__ieee754_rem_pio2f+0x23c>
 8014a10:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8014c08 <__ieee754_rem_pio2f+0x240>
 8014a14:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8014a18:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8014a1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a20:	ed80 7a00 	vstr	s14, [r0]
 8014a24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014a28:	edc0 7a01 	vstr	s15, [r0, #4]
 8014a2c:	2001      	movs	r0, #1
 8014a2e:	b007      	add	sp, #28
 8014a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a32:	4293      	cmp	r3, r2
 8014a34:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014a38:	bf09      	itett	eq
 8014a3a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8014c00 <__ieee754_rem_pio2f+0x238>
 8014a3e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8014c04 <__ieee754_rem_pio2f+0x23c>
 8014a42:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8014c08 <__ieee754_rem_pio2f+0x240>
 8014a46:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8014a4a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014a4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a52:	ed80 7a00 	vstr	s14, [r0]
 8014a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014a5a:	edc0 7a01 	vstr	s15, [r0, #4]
 8014a5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014a62:	e7e4      	b.n	8014a2e <__ieee754_rem_pio2f+0x66>
 8014a64:	4b69      	ldr	r3, [pc, #420]	@ (8014c0c <__ieee754_rem_pio2f+0x244>)
 8014a66:	429d      	cmp	r5, r3
 8014a68:	d873      	bhi.n	8014b52 <__ieee754_rem_pio2f+0x18a>
 8014a6a:	f7ff fd25 	bl	80144b8 <fabsf>
 8014a6e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8014c10 <__ieee754_rem_pio2f+0x248>
 8014a72:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014a76:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014a82:	ee17 0a90 	vmov	r0, s15
 8014a86:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8014bf8 <__ieee754_rem_pio2f+0x230>
 8014a8a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8014a8e:	281f      	cmp	r0, #31
 8014a90:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8014c04 <__ieee754_rem_pio2f+0x23c>
 8014a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a98:	eeb1 6a47 	vneg.f32	s12, s14
 8014a9c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014aa0:	ee16 1a90 	vmov	r1, s13
 8014aa4:	dc09      	bgt.n	8014aba <__ieee754_rem_pio2f+0xf2>
 8014aa6:	4a5b      	ldr	r2, [pc, #364]	@ (8014c14 <__ieee754_rem_pio2f+0x24c>)
 8014aa8:	1e47      	subs	r7, r0, #1
 8014aaa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8014aae:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8014ab2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8014ab6:	4293      	cmp	r3, r2
 8014ab8:	d107      	bne.n	8014aca <__ieee754_rem_pio2f+0x102>
 8014aba:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8014abe:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8014ac2:	2a08      	cmp	r2, #8
 8014ac4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8014ac8:	dc14      	bgt.n	8014af4 <__ieee754_rem_pio2f+0x12c>
 8014aca:	6021      	str	r1, [r4, #0]
 8014acc:	ed94 7a00 	vldr	s14, [r4]
 8014ad0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014ad4:	2e00      	cmp	r6, #0
 8014ad6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014ada:	ed84 0a01 	vstr	s0, [r4, #4]
 8014ade:	daa6      	bge.n	8014a2e <__ieee754_rem_pio2f+0x66>
 8014ae0:	eeb1 7a47 	vneg.f32	s14, s14
 8014ae4:	eeb1 0a40 	vneg.f32	s0, s0
 8014ae8:	ed84 7a00 	vstr	s14, [r4]
 8014aec:	ed84 0a01 	vstr	s0, [r4, #4]
 8014af0:	4240      	negs	r0, r0
 8014af2:	e79c      	b.n	8014a2e <__ieee754_rem_pio2f+0x66>
 8014af4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8014c00 <__ieee754_rem_pio2f+0x238>
 8014af8:	eef0 6a40 	vmov.f32	s13, s0
 8014afc:	eee6 6a25 	vfma.f32	s13, s12, s11
 8014b00:	ee70 7a66 	vsub.f32	s15, s0, s13
 8014b04:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014b08:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8014c08 <__ieee754_rem_pio2f+0x240>
 8014b0c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8014b10:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8014b14:	ee15 2a90 	vmov	r2, s11
 8014b18:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8014b1c:	1a5b      	subs	r3, r3, r1
 8014b1e:	2b19      	cmp	r3, #25
 8014b20:	dc04      	bgt.n	8014b2c <__ieee754_rem_pio2f+0x164>
 8014b22:	edc4 5a00 	vstr	s11, [r4]
 8014b26:	eeb0 0a66 	vmov.f32	s0, s13
 8014b2a:	e7cf      	b.n	8014acc <__ieee754_rem_pio2f+0x104>
 8014b2c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8014c18 <__ieee754_rem_pio2f+0x250>
 8014b30:	eeb0 0a66 	vmov.f32	s0, s13
 8014b34:	eea6 0a25 	vfma.f32	s0, s12, s11
 8014b38:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8014b3c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8014c1c <__ieee754_rem_pio2f+0x254>
 8014b40:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014b44:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8014b48:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014b4c:	ed84 7a00 	vstr	s14, [r4]
 8014b50:	e7bc      	b.n	8014acc <__ieee754_rem_pio2f+0x104>
 8014b52:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8014b56:	d306      	bcc.n	8014b66 <__ieee754_rem_pio2f+0x19e>
 8014b58:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014b5c:	edc0 7a01 	vstr	s15, [r0, #4]
 8014b60:	edc0 7a00 	vstr	s15, [r0]
 8014b64:	e73e      	b.n	80149e4 <__ieee754_rem_pio2f+0x1c>
 8014b66:	15ea      	asrs	r2, r5, #23
 8014b68:	3a86      	subs	r2, #134	@ 0x86
 8014b6a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8014b6e:	ee07 3a90 	vmov	s15, r3
 8014b72:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014b76:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8014c20 <__ieee754_rem_pio2f+0x258>
 8014b7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014b7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b82:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014b86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014b8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014b8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014b92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b96:	ed8d 7a04 	vstr	s14, [sp, #16]
 8014b9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014b9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ba6:	edcd 7a05 	vstr	s15, [sp, #20]
 8014baa:	d11e      	bne.n	8014bea <__ieee754_rem_pio2f+0x222>
 8014bac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bb4:	bf0c      	ite	eq
 8014bb6:	2301      	moveq	r3, #1
 8014bb8:	2302      	movne	r3, #2
 8014bba:	491a      	ldr	r1, [pc, #104]	@ (8014c24 <__ieee754_rem_pio2f+0x25c>)
 8014bbc:	9101      	str	r1, [sp, #4]
 8014bbe:	2102      	movs	r1, #2
 8014bc0:	9100      	str	r1, [sp, #0]
 8014bc2:	a803      	add	r0, sp, #12
 8014bc4:	4621      	mov	r1, r4
 8014bc6:	f000 f903 	bl	8014dd0 <__kernel_rem_pio2f>
 8014bca:	2e00      	cmp	r6, #0
 8014bcc:	f6bf af2f 	bge.w	8014a2e <__ieee754_rem_pio2f+0x66>
 8014bd0:	edd4 7a00 	vldr	s15, [r4]
 8014bd4:	eef1 7a67 	vneg.f32	s15, s15
 8014bd8:	edc4 7a00 	vstr	s15, [r4]
 8014bdc:	edd4 7a01 	vldr	s15, [r4, #4]
 8014be0:	eef1 7a67 	vneg.f32	s15, s15
 8014be4:	edc4 7a01 	vstr	s15, [r4, #4]
 8014be8:	e782      	b.n	8014af0 <__ieee754_rem_pio2f+0x128>
 8014bea:	2303      	movs	r3, #3
 8014bec:	e7e5      	b.n	8014bba <__ieee754_rem_pio2f+0x1f2>
 8014bee:	bf00      	nop
 8014bf0:	3f490fd8 	.word	0x3f490fd8
 8014bf4:	4016cbe3 	.word	0x4016cbe3
 8014bf8:	3fc90f80 	.word	0x3fc90f80
 8014bfc:	3fc90fd0 	.word	0x3fc90fd0
 8014c00:	37354400 	.word	0x37354400
 8014c04:	37354443 	.word	0x37354443
 8014c08:	2e85a308 	.word	0x2e85a308
 8014c0c:	43490f80 	.word	0x43490f80
 8014c10:	3f22f984 	.word	0x3f22f984
 8014c14:	08015d3c 	.word	0x08015d3c
 8014c18:	2e85a300 	.word	0x2e85a300
 8014c1c:	248d3132 	.word	0x248d3132
 8014c20:	43800000 	.word	0x43800000
 8014c24:	08015dbc 	.word	0x08015dbc

08014c28 <atanf>:
 8014c28:	b538      	push	{r3, r4, r5, lr}
 8014c2a:	ee10 5a10 	vmov	r5, s0
 8014c2e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8014c32:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8014c36:	eef0 7a40 	vmov.f32	s15, s0
 8014c3a:	d310      	bcc.n	8014c5e <atanf+0x36>
 8014c3c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8014c40:	d904      	bls.n	8014c4c <atanf+0x24>
 8014c42:	ee70 7a00 	vadd.f32	s15, s0, s0
 8014c46:	eeb0 0a67 	vmov.f32	s0, s15
 8014c4a:	bd38      	pop	{r3, r4, r5, pc}
 8014c4c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8014d84 <atanf+0x15c>
 8014c50:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8014d88 <atanf+0x160>
 8014c54:	2d00      	cmp	r5, #0
 8014c56:	bfc8      	it	gt
 8014c58:	eef0 7a47 	vmovgt.f32	s15, s14
 8014c5c:	e7f3      	b.n	8014c46 <atanf+0x1e>
 8014c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8014d8c <atanf+0x164>)
 8014c60:	429c      	cmp	r4, r3
 8014c62:	d810      	bhi.n	8014c86 <atanf+0x5e>
 8014c64:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8014c68:	d20a      	bcs.n	8014c80 <atanf+0x58>
 8014c6a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8014d90 <atanf+0x168>
 8014c6e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014c76:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c7e:	dce2      	bgt.n	8014c46 <atanf+0x1e>
 8014c80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014c84:	e013      	b.n	8014cae <atanf+0x86>
 8014c86:	f7ff fc17 	bl	80144b8 <fabsf>
 8014c8a:	4b42      	ldr	r3, [pc, #264]	@ (8014d94 <atanf+0x16c>)
 8014c8c:	429c      	cmp	r4, r3
 8014c8e:	d84f      	bhi.n	8014d30 <atanf+0x108>
 8014c90:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8014c94:	429c      	cmp	r4, r3
 8014c96:	d841      	bhi.n	8014d1c <atanf+0xf4>
 8014c98:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8014c9c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8014ca0:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014caa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014cae:	1c5a      	adds	r2, r3, #1
 8014cb0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014cb4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8014d98 <atanf+0x170>
 8014cb8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8014d9c <atanf+0x174>
 8014cbc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8014da0 <atanf+0x178>
 8014cc0:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014cc4:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014cc8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8014da4 <atanf+0x17c>
 8014ccc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014cd0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8014da8 <atanf+0x180>
 8014cd4:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014cd8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8014dac <atanf+0x184>
 8014cdc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014ce0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8014db0 <atanf+0x188>
 8014ce4:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014ce8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8014db4 <atanf+0x18c>
 8014cec:	eea6 5a87 	vfma.f32	s10, s13, s14
 8014cf0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8014db8 <atanf+0x190>
 8014cf4:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014cf8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8014dbc <atanf+0x194>
 8014cfc:	eea7 5a26 	vfma.f32	s10, s14, s13
 8014d00:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8014dc0 <atanf+0x198>
 8014d04:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014d08:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014d0c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8014d10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014d14:	d121      	bne.n	8014d5a <atanf+0x132>
 8014d16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d1a:	e794      	b.n	8014c46 <atanf+0x1e>
 8014d1c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014d20:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014d24:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014d28:	2301      	movs	r3, #1
 8014d2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014d2e:	e7be      	b.n	8014cae <atanf+0x86>
 8014d30:	4b24      	ldr	r3, [pc, #144]	@ (8014dc4 <atanf+0x19c>)
 8014d32:	429c      	cmp	r4, r3
 8014d34:	d80b      	bhi.n	8014d4e <atanf+0x126>
 8014d36:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8014d3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014d3e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014d42:	2302      	movs	r3, #2
 8014d44:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014d4c:	e7af      	b.n	8014cae <atanf+0x86>
 8014d4e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8014d52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014d56:	2303      	movs	r3, #3
 8014d58:	e7a9      	b.n	8014cae <atanf+0x86>
 8014d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8014dc8 <atanf+0x1a0>)
 8014d5c:	491b      	ldr	r1, [pc, #108]	@ (8014dcc <atanf+0x1a4>)
 8014d5e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014d62:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014d66:	edd3 6a00 	vldr	s13, [r3]
 8014d6a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014d6e:	2d00      	cmp	r5, #0
 8014d70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014d74:	edd2 7a00 	vldr	s15, [r2]
 8014d78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d7c:	bfb8      	it	lt
 8014d7e:	eef1 7a67 	vneglt.f32	s15, s15
 8014d82:	e760      	b.n	8014c46 <atanf+0x1e>
 8014d84:	bfc90fdb 	.word	0xbfc90fdb
 8014d88:	3fc90fdb 	.word	0x3fc90fdb
 8014d8c:	3edfffff 	.word	0x3edfffff
 8014d90:	7149f2ca 	.word	0x7149f2ca
 8014d94:	3f97ffff 	.word	0x3f97ffff
 8014d98:	3c8569d7 	.word	0x3c8569d7
 8014d9c:	3d4bda59 	.word	0x3d4bda59
 8014da0:	bd6ef16b 	.word	0xbd6ef16b
 8014da4:	3d886b35 	.word	0x3d886b35
 8014da8:	3dba2e6e 	.word	0x3dba2e6e
 8014dac:	3e124925 	.word	0x3e124925
 8014db0:	3eaaaaab 	.word	0x3eaaaaab
 8014db4:	bd15a221 	.word	0xbd15a221
 8014db8:	bd9d8795 	.word	0xbd9d8795
 8014dbc:	bde38e38 	.word	0xbde38e38
 8014dc0:	be4ccccd 	.word	0xbe4ccccd
 8014dc4:	401bffff 	.word	0x401bffff
 8014dc8:	080160e4 	.word	0x080160e4
 8014dcc:	080160d4 	.word	0x080160d4

08014dd0 <__kernel_rem_pio2f>:
 8014dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dd4:	ed2d 8b04 	vpush	{d8-d9}
 8014dd8:	b0d9      	sub	sp, #356	@ 0x164
 8014dda:	4690      	mov	r8, r2
 8014ddc:	9001      	str	r0, [sp, #4]
 8014dde:	4ab9      	ldr	r2, [pc, #740]	@ (80150c4 <__kernel_rem_pio2f+0x2f4>)
 8014de0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8014de2:	f118 0f04 	cmn.w	r8, #4
 8014de6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8014dea:	460f      	mov	r7, r1
 8014dec:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8014df0:	db27      	blt.n	8014e42 <__kernel_rem_pio2f+0x72>
 8014df2:	f1b8 0203 	subs.w	r2, r8, #3
 8014df6:	bf48      	it	mi
 8014df8:	f108 0204 	addmi.w	r2, r8, #4
 8014dfc:	10d2      	asrs	r2, r2, #3
 8014dfe:	1c55      	adds	r5, r2, #1
 8014e00:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8014e02:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80150d4 <__kernel_rem_pio2f+0x304>
 8014e06:	00e8      	lsls	r0, r5, #3
 8014e08:	eba2 060b 	sub.w	r6, r2, fp
 8014e0c:	9002      	str	r0, [sp, #8]
 8014e0e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8014e12:	eb0a 0c0b 	add.w	ip, sl, fp
 8014e16:	ac1c      	add	r4, sp, #112	@ 0x70
 8014e18:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8014e1c:	2000      	movs	r0, #0
 8014e1e:	4560      	cmp	r0, ip
 8014e20:	dd11      	ble.n	8014e46 <__kernel_rem_pio2f+0x76>
 8014e22:	a91c      	add	r1, sp, #112	@ 0x70
 8014e24:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8014e28:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8014e2c:	f04f 0c00 	mov.w	ip, #0
 8014e30:	45d4      	cmp	ip, sl
 8014e32:	dc27      	bgt.n	8014e84 <__kernel_rem_pio2f+0xb4>
 8014e34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014e38:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80150d4 <__kernel_rem_pio2f+0x304>
 8014e3c:	4606      	mov	r6, r0
 8014e3e:	2400      	movs	r4, #0
 8014e40:	e016      	b.n	8014e70 <__kernel_rem_pio2f+0xa0>
 8014e42:	2200      	movs	r2, #0
 8014e44:	e7db      	b.n	8014dfe <__kernel_rem_pio2f+0x2e>
 8014e46:	42c6      	cmn	r6, r0
 8014e48:	bf5d      	ittte	pl
 8014e4a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8014e4e:	ee07 1a90 	vmovpl	s15, r1
 8014e52:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8014e56:	eef0 7a47 	vmovmi.f32	s15, s14
 8014e5a:	ece4 7a01 	vstmia	r4!, {s15}
 8014e5e:	3001      	adds	r0, #1
 8014e60:	e7dd      	b.n	8014e1e <__kernel_rem_pio2f+0x4e>
 8014e62:	ecfe 6a01 	vldmia	lr!, {s13}
 8014e66:	ed96 7a00 	vldr	s14, [r6]
 8014e6a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014e6e:	3401      	adds	r4, #1
 8014e70:	455c      	cmp	r4, fp
 8014e72:	f1a6 0604 	sub.w	r6, r6, #4
 8014e76:	ddf4      	ble.n	8014e62 <__kernel_rem_pio2f+0x92>
 8014e78:	ece9 7a01 	vstmia	r9!, {s15}
 8014e7c:	f10c 0c01 	add.w	ip, ip, #1
 8014e80:	3004      	adds	r0, #4
 8014e82:	e7d5      	b.n	8014e30 <__kernel_rem_pio2f+0x60>
 8014e84:	a908      	add	r1, sp, #32
 8014e86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014e8a:	9104      	str	r1, [sp, #16]
 8014e8c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8014e8e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80150d0 <__kernel_rem_pio2f+0x300>
 8014e92:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80150cc <__kernel_rem_pio2f+0x2fc>
 8014e96:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8014e9a:	9203      	str	r2, [sp, #12]
 8014e9c:	4654      	mov	r4, sl
 8014e9e:	00a2      	lsls	r2, r4, #2
 8014ea0:	9205      	str	r2, [sp, #20]
 8014ea2:	aa58      	add	r2, sp, #352	@ 0x160
 8014ea4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8014ea8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8014eac:	a944      	add	r1, sp, #272	@ 0x110
 8014eae:	aa08      	add	r2, sp, #32
 8014eb0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8014eb4:	4694      	mov	ip, r2
 8014eb6:	4626      	mov	r6, r4
 8014eb8:	2e00      	cmp	r6, #0
 8014eba:	f1a0 0004 	sub.w	r0, r0, #4
 8014ebe:	dc4c      	bgt.n	8014f5a <__kernel_rem_pio2f+0x18a>
 8014ec0:	4628      	mov	r0, r5
 8014ec2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014ec6:	f000 f9f5 	bl	80152b4 <scalbnf>
 8014eca:	eeb0 8a40 	vmov.f32	s16, s0
 8014ece:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8014ed2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014ed6:	f000 fa53 	bl	8015380 <floorf>
 8014eda:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8014ede:	eea0 8a67 	vfms.f32	s16, s0, s15
 8014ee2:	2d00      	cmp	r5, #0
 8014ee4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014ee8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8014eec:	ee17 9a90 	vmov	r9, s15
 8014ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ef4:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014ef8:	dd41      	ble.n	8014f7e <__kernel_rem_pio2f+0x1ae>
 8014efa:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8014efe:	a908      	add	r1, sp, #32
 8014f00:	f1c5 0e08 	rsb	lr, r5, #8
 8014f04:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8014f08:	fa46 f00e 	asr.w	r0, r6, lr
 8014f0c:	4481      	add	r9, r0
 8014f0e:	fa00 f00e 	lsl.w	r0, r0, lr
 8014f12:	1a36      	subs	r6, r6, r0
 8014f14:	f1c5 0007 	rsb	r0, r5, #7
 8014f18:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8014f1c:	4106      	asrs	r6, r0
 8014f1e:	2e00      	cmp	r6, #0
 8014f20:	dd3c      	ble.n	8014f9c <__kernel_rem_pio2f+0x1cc>
 8014f22:	f04f 0e00 	mov.w	lr, #0
 8014f26:	f109 0901 	add.w	r9, r9, #1
 8014f2a:	4670      	mov	r0, lr
 8014f2c:	4574      	cmp	r4, lr
 8014f2e:	dc68      	bgt.n	8015002 <__kernel_rem_pio2f+0x232>
 8014f30:	2d00      	cmp	r5, #0
 8014f32:	dd03      	ble.n	8014f3c <__kernel_rem_pio2f+0x16c>
 8014f34:	2d01      	cmp	r5, #1
 8014f36:	d074      	beq.n	8015022 <__kernel_rem_pio2f+0x252>
 8014f38:	2d02      	cmp	r5, #2
 8014f3a:	d07d      	beq.n	8015038 <__kernel_rem_pio2f+0x268>
 8014f3c:	2e02      	cmp	r6, #2
 8014f3e:	d12d      	bne.n	8014f9c <__kernel_rem_pio2f+0x1cc>
 8014f40:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014f44:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014f48:	b340      	cbz	r0, 8014f9c <__kernel_rem_pio2f+0x1cc>
 8014f4a:	4628      	mov	r0, r5
 8014f4c:	9306      	str	r3, [sp, #24]
 8014f4e:	f000 f9b1 	bl	80152b4 <scalbnf>
 8014f52:	9b06      	ldr	r3, [sp, #24]
 8014f54:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014f58:	e020      	b.n	8014f9c <__kernel_rem_pio2f+0x1cc>
 8014f5a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014f5e:	3e01      	subs	r6, #1
 8014f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f68:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014f6c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014f70:	ecac 0a01 	vstmia	ip!, {s0}
 8014f74:	ed90 0a00 	vldr	s0, [r0]
 8014f78:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014f7c:	e79c      	b.n	8014eb8 <__kernel_rem_pio2f+0xe8>
 8014f7e:	d105      	bne.n	8014f8c <__kernel_rem_pio2f+0x1bc>
 8014f80:	1e60      	subs	r0, r4, #1
 8014f82:	a908      	add	r1, sp, #32
 8014f84:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8014f88:	11f6      	asrs	r6, r6, #7
 8014f8a:	e7c8      	b.n	8014f1e <__kernel_rem_pio2f+0x14e>
 8014f8c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014f90:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f98:	da31      	bge.n	8014ffe <__kernel_rem_pio2f+0x22e>
 8014f9a:	2600      	movs	r6, #0
 8014f9c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fa4:	f040 8098 	bne.w	80150d8 <__kernel_rem_pio2f+0x308>
 8014fa8:	1e60      	subs	r0, r4, #1
 8014faa:	2200      	movs	r2, #0
 8014fac:	4550      	cmp	r0, sl
 8014fae:	da4b      	bge.n	8015048 <__kernel_rem_pio2f+0x278>
 8014fb0:	2a00      	cmp	r2, #0
 8014fb2:	d065      	beq.n	8015080 <__kernel_rem_pio2f+0x2b0>
 8014fb4:	3c01      	subs	r4, #1
 8014fb6:	ab08      	add	r3, sp, #32
 8014fb8:	3d08      	subs	r5, #8
 8014fba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d0f8      	beq.n	8014fb4 <__kernel_rem_pio2f+0x1e4>
 8014fc2:	4628      	mov	r0, r5
 8014fc4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014fc8:	f000 f974 	bl	80152b4 <scalbnf>
 8014fcc:	1c63      	adds	r3, r4, #1
 8014fce:	aa44      	add	r2, sp, #272	@ 0x110
 8014fd0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80150d0 <__kernel_rem_pio2f+0x300>
 8014fd4:	0099      	lsls	r1, r3, #2
 8014fd6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014fda:	4623      	mov	r3, r4
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	f280 80a9 	bge.w	8015134 <__kernel_rem_pio2f+0x364>
 8014fe2:	4623      	mov	r3, r4
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	f2c0 80c7 	blt.w	8015178 <__kernel_rem_pio2f+0x3a8>
 8014fea:	aa44      	add	r2, sp, #272	@ 0x110
 8014fec:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8014ff0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80150c8 <__kernel_rem_pio2f+0x2f8>
 8014ff4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80150d4 <__kernel_rem_pio2f+0x304>
 8014ff8:	2000      	movs	r0, #0
 8014ffa:	1ae2      	subs	r2, r4, r3
 8014ffc:	e0b1      	b.n	8015162 <__kernel_rem_pio2f+0x392>
 8014ffe:	2602      	movs	r6, #2
 8015000:	e78f      	b.n	8014f22 <__kernel_rem_pio2f+0x152>
 8015002:	f852 1b04 	ldr.w	r1, [r2], #4
 8015006:	b948      	cbnz	r0, 801501c <__kernel_rem_pio2f+0x24c>
 8015008:	b121      	cbz	r1, 8015014 <__kernel_rem_pio2f+0x244>
 801500a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801500e:	f842 1c04 	str.w	r1, [r2, #-4]
 8015012:	2101      	movs	r1, #1
 8015014:	f10e 0e01 	add.w	lr, lr, #1
 8015018:	4608      	mov	r0, r1
 801501a:	e787      	b.n	8014f2c <__kernel_rem_pio2f+0x15c>
 801501c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8015020:	e7f5      	b.n	801500e <__kernel_rem_pio2f+0x23e>
 8015022:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8015026:	aa08      	add	r2, sp, #32
 8015028:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801502c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8015030:	a908      	add	r1, sp, #32
 8015032:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8015036:	e781      	b.n	8014f3c <__kernel_rem_pio2f+0x16c>
 8015038:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801503c:	aa08      	add	r2, sp, #32
 801503e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8015042:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8015046:	e7f3      	b.n	8015030 <__kernel_rem_pio2f+0x260>
 8015048:	a908      	add	r1, sp, #32
 801504a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801504e:	3801      	subs	r0, #1
 8015050:	430a      	orrs	r2, r1
 8015052:	e7ab      	b.n	8014fac <__kernel_rem_pio2f+0x1dc>
 8015054:	3201      	adds	r2, #1
 8015056:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801505a:	2e00      	cmp	r6, #0
 801505c:	d0fa      	beq.n	8015054 <__kernel_rem_pio2f+0x284>
 801505e:	9905      	ldr	r1, [sp, #20]
 8015060:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8015064:	eb0d 0001 	add.w	r0, sp, r1
 8015068:	18e6      	adds	r6, r4, r3
 801506a:	a91c      	add	r1, sp, #112	@ 0x70
 801506c:	f104 0c01 	add.w	ip, r4, #1
 8015070:	384c      	subs	r0, #76	@ 0x4c
 8015072:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8015076:	4422      	add	r2, r4
 8015078:	4562      	cmp	r2, ip
 801507a:	da04      	bge.n	8015086 <__kernel_rem_pio2f+0x2b6>
 801507c:	4614      	mov	r4, r2
 801507e:	e70e      	b.n	8014e9e <__kernel_rem_pio2f+0xce>
 8015080:	9804      	ldr	r0, [sp, #16]
 8015082:	2201      	movs	r2, #1
 8015084:	e7e7      	b.n	8015056 <__kernel_rem_pio2f+0x286>
 8015086:	9903      	ldr	r1, [sp, #12]
 8015088:	f8dd e004 	ldr.w	lr, [sp, #4]
 801508c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8015090:	9105      	str	r1, [sp, #20]
 8015092:	ee07 1a90 	vmov	s15, r1
 8015096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801509a:	2400      	movs	r4, #0
 801509c:	ece6 7a01 	vstmia	r6!, {s15}
 80150a0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80150d4 <__kernel_rem_pio2f+0x304>
 80150a4:	46b1      	mov	r9, r6
 80150a6:	455c      	cmp	r4, fp
 80150a8:	dd04      	ble.n	80150b4 <__kernel_rem_pio2f+0x2e4>
 80150aa:	ece0 7a01 	vstmia	r0!, {s15}
 80150ae:	f10c 0c01 	add.w	ip, ip, #1
 80150b2:	e7e1      	b.n	8015078 <__kernel_rem_pio2f+0x2a8>
 80150b4:	ecfe 6a01 	vldmia	lr!, {s13}
 80150b8:	ed39 7a01 	vldmdb	r9!, {s14}
 80150bc:	3401      	adds	r4, #1
 80150be:	eee6 7a87 	vfma.f32	s15, s13, s14
 80150c2:	e7f0      	b.n	80150a6 <__kernel_rem_pio2f+0x2d6>
 80150c4:	08016120 	.word	0x08016120
 80150c8:	080160f4 	.word	0x080160f4
 80150cc:	43800000 	.word	0x43800000
 80150d0:	3b800000 	.word	0x3b800000
 80150d4:	00000000 	.word	0x00000000
 80150d8:	9b02      	ldr	r3, [sp, #8]
 80150da:	eeb0 0a48 	vmov.f32	s0, s16
 80150de:	eba3 0008 	sub.w	r0, r3, r8
 80150e2:	f000 f8e7 	bl	80152b4 <scalbnf>
 80150e6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80150cc <__kernel_rem_pio2f+0x2fc>
 80150ea:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80150ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150f2:	db19      	blt.n	8015128 <__kernel_rem_pio2f+0x358>
 80150f4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80150d0 <__kernel_rem_pio2f+0x300>
 80150f8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80150fc:	aa08      	add	r2, sp, #32
 80150fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015102:	3508      	adds	r5, #8
 8015104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015108:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801510c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015110:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015114:	ee10 3a10 	vmov	r3, s0
 8015118:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801511c:	ee17 3a90 	vmov	r3, s15
 8015120:	3401      	adds	r4, #1
 8015122:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8015126:	e74c      	b.n	8014fc2 <__kernel_rem_pio2f+0x1f2>
 8015128:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801512c:	aa08      	add	r2, sp, #32
 801512e:	ee10 3a10 	vmov	r3, s0
 8015132:	e7f6      	b.n	8015122 <__kernel_rem_pio2f+0x352>
 8015134:	a808      	add	r0, sp, #32
 8015136:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801513a:	9001      	str	r0, [sp, #4]
 801513c:	ee07 0a90 	vmov	s15, r0
 8015140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015144:	3b01      	subs	r3, #1
 8015146:	ee67 7a80 	vmul.f32	s15, s15, s0
 801514a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801514e:	ed62 7a01 	vstmdb	r2!, {s15}
 8015152:	e743      	b.n	8014fdc <__kernel_rem_pio2f+0x20c>
 8015154:	ecfc 6a01 	vldmia	ip!, {s13}
 8015158:	ecb5 7a01 	vldmia	r5!, {s14}
 801515c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015160:	3001      	adds	r0, #1
 8015162:	4550      	cmp	r0, sl
 8015164:	dc01      	bgt.n	801516a <__kernel_rem_pio2f+0x39a>
 8015166:	4282      	cmp	r2, r0
 8015168:	daf4      	bge.n	8015154 <__kernel_rem_pio2f+0x384>
 801516a:	a858      	add	r0, sp, #352	@ 0x160
 801516c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8015170:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8015174:	3b01      	subs	r3, #1
 8015176:	e735      	b.n	8014fe4 <__kernel_rem_pio2f+0x214>
 8015178:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801517a:	2b02      	cmp	r3, #2
 801517c:	dc09      	bgt.n	8015192 <__kernel_rem_pio2f+0x3c2>
 801517e:	2b00      	cmp	r3, #0
 8015180:	dc2b      	bgt.n	80151da <__kernel_rem_pio2f+0x40a>
 8015182:	d044      	beq.n	801520e <__kernel_rem_pio2f+0x43e>
 8015184:	f009 0007 	and.w	r0, r9, #7
 8015188:	b059      	add	sp, #356	@ 0x164
 801518a:	ecbd 8b04 	vpop	{d8-d9}
 801518e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015192:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8015194:	2b03      	cmp	r3, #3
 8015196:	d1f5      	bne.n	8015184 <__kernel_rem_pio2f+0x3b4>
 8015198:	aa30      	add	r2, sp, #192	@ 0xc0
 801519a:	1f0b      	subs	r3, r1, #4
 801519c:	4413      	add	r3, r2
 801519e:	461a      	mov	r2, r3
 80151a0:	4620      	mov	r0, r4
 80151a2:	2800      	cmp	r0, #0
 80151a4:	f1a2 0204 	sub.w	r2, r2, #4
 80151a8:	dc52      	bgt.n	8015250 <__kernel_rem_pio2f+0x480>
 80151aa:	4622      	mov	r2, r4
 80151ac:	2a01      	cmp	r2, #1
 80151ae:	f1a3 0304 	sub.w	r3, r3, #4
 80151b2:	dc5d      	bgt.n	8015270 <__kernel_rem_pio2f+0x4a0>
 80151b4:	ab30      	add	r3, sp, #192	@ 0xc0
 80151b6:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80150d4 <__kernel_rem_pio2f+0x304>
 80151ba:	440b      	add	r3, r1
 80151bc:	2c01      	cmp	r4, #1
 80151be:	dc67      	bgt.n	8015290 <__kernel_rem_pio2f+0x4c0>
 80151c0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80151c4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80151c8:	2e00      	cmp	r6, #0
 80151ca:	d167      	bne.n	801529c <__kernel_rem_pio2f+0x4cc>
 80151cc:	edc7 6a00 	vstr	s13, [r7]
 80151d0:	ed87 7a01 	vstr	s14, [r7, #4]
 80151d4:	edc7 7a02 	vstr	s15, [r7, #8]
 80151d8:	e7d4      	b.n	8015184 <__kernel_rem_pio2f+0x3b4>
 80151da:	ab30      	add	r3, sp, #192	@ 0xc0
 80151dc:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80150d4 <__kernel_rem_pio2f+0x304>
 80151e0:	440b      	add	r3, r1
 80151e2:	4622      	mov	r2, r4
 80151e4:	2a00      	cmp	r2, #0
 80151e6:	da24      	bge.n	8015232 <__kernel_rem_pio2f+0x462>
 80151e8:	b34e      	cbz	r6, 801523e <__kernel_rem_pio2f+0x46e>
 80151ea:	eef1 7a47 	vneg.f32	s15, s14
 80151ee:	edc7 7a00 	vstr	s15, [r7]
 80151f2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80151f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80151fa:	aa31      	add	r2, sp, #196	@ 0xc4
 80151fc:	2301      	movs	r3, #1
 80151fe:	429c      	cmp	r4, r3
 8015200:	da20      	bge.n	8015244 <__kernel_rem_pio2f+0x474>
 8015202:	b10e      	cbz	r6, 8015208 <__kernel_rem_pio2f+0x438>
 8015204:	eef1 7a67 	vneg.f32	s15, s15
 8015208:	edc7 7a01 	vstr	s15, [r7, #4]
 801520c:	e7ba      	b.n	8015184 <__kernel_rem_pio2f+0x3b4>
 801520e:	ab30      	add	r3, sp, #192	@ 0xc0
 8015210:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80150d4 <__kernel_rem_pio2f+0x304>
 8015214:	440b      	add	r3, r1
 8015216:	2c00      	cmp	r4, #0
 8015218:	da05      	bge.n	8015226 <__kernel_rem_pio2f+0x456>
 801521a:	b10e      	cbz	r6, 8015220 <__kernel_rem_pio2f+0x450>
 801521c:	eef1 7a67 	vneg.f32	s15, s15
 8015220:	edc7 7a00 	vstr	s15, [r7]
 8015224:	e7ae      	b.n	8015184 <__kernel_rem_pio2f+0x3b4>
 8015226:	ed33 7a01 	vldmdb	r3!, {s14}
 801522a:	3c01      	subs	r4, #1
 801522c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015230:	e7f1      	b.n	8015216 <__kernel_rem_pio2f+0x446>
 8015232:	ed73 7a01 	vldmdb	r3!, {s15}
 8015236:	3a01      	subs	r2, #1
 8015238:	ee37 7a27 	vadd.f32	s14, s14, s15
 801523c:	e7d2      	b.n	80151e4 <__kernel_rem_pio2f+0x414>
 801523e:	eef0 7a47 	vmov.f32	s15, s14
 8015242:	e7d4      	b.n	80151ee <__kernel_rem_pio2f+0x41e>
 8015244:	ecb2 7a01 	vldmia	r2!, {s14}
 8015248:	3301      	adds	r3, #1
 801524a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801524e:	e7d6      	b.n	80151fe <__kernel_rem_pio2f+0x42e>
 8015250:	edd2 7a00 	vldr	s15, [r2]
 8015254:	edd2 6a01 	vldr	s13, [r2, #4]
 8015258:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801525c:	3801      	subs	r0, #1
 801525e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015262:	ed82 7a00 	vstr	s14, [r2]
 8015266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801526a:	edc2 7a01 	vstr	s15, [r2, #4]
 801526e:	e798      	b.n	80151a2 <__kernel_rem_pio2f+0x3d2>
 8015270:	edd3 7a00 	vldr	s15, [r3]
 8015274:	edd3 6a01 	vldr	s13, [r3, #4]
 8015278:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801527c:	3a01      	subs	r2, #1
 801527e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015282:	ed83 7a00 	vstr	s14, [r3]
 8015286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801528a:	edc3 7a01 	vstr	s15, [r3, #4]
 801528e:	e78d      	b.n	80151ac <__kernel_rem_pio2f+0x3dc>
 8015290:	ed33 7a01 	vldmdb	r3!, {s14}
 8015294:	3c01      	subs	r4, #1
 8015296:	ee77 7a87 	vadd.f32	s15, s15, s14
 801529a:	e78f      	b.n	80151bc <__kernel_rem_pio2f+0x3ec>
 801529c:	eef1 6a66 	vneg.f32	s13, s13
 80152a0:	eeb1 7a47 	vneg.f32	s14, s14
 80152a4:	edc7 6a00 	vstr	s13, [r7]
 80152a8:	ed87 7a01 	vstr	s14, [r7, #4]
 80152ac:	eef1 7a67 	vneg.f32	s15, s15
 80152b0:	e790      	b.n	80151d4 <__kernel_rem_pio2f+0x404>
 80152b2:	bf00      	nop

080152b4 <scalbnf>:
 80152b4:	ee10 3a10 	vmov	r3, s0
 80152b8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80152bc:	d02b      	beq.n	8015316 <scalbnf+0x62>
 80152be:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80152c2:	d302      	bcc.n	80152ca <scalbnf+0x16>
 80152c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80152c8:	4770      	bx	lr
 80152ca:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80152ce:	d123      	bne.n	8015318 <scalbnf+0x64>
 80152d0:	4b24      	ldr	r3, [pc, #144]	@ (8015364 <scalbnf+0xb0>)
 80152d2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8015368 <scalbnf+0xb4>
 80152d6:	4298      	cmp	r0, r3
 80152d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80152dc:	db17      	blt.n	801530e <scalbnf+0x5a>
 80152de:	ee10 3a10 	vmov	r3, s0
 80152e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80152e6:	3a19      	subs	r2, #25
 80152e8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80152ec:	4288      	cmp	r0, r1
 80152ee:	dd15      	ble.n	801531c <scalbnf+0x68>
 80152f0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801536c <scalbnf+0xb8>
 80152f4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8015370 <scalbnf+0xbc>
 80152f8:	ee10 3a10 	vmov	r3, s0
 80152fc:	eeb0 7a67 	vmov.f32	s14, s15
 8015300:	2b00      	cmp	r3, #0
 8015302:	bfb8      	it	lt
 8015304:	eef0 7a66 	vmovlt.f32	s15, s13
 8015308:	ee27 0a87 	vmul.f32	s0, s15, s14
 801530c:	4770      	bx	lr
 801530e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8015374 <scalbnf+0xc0>
 8015312:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015316:	4770      	bx	lr
 8015318:	0dd2      	lsrs	r2, r2, #23
 801531a:	e7e5      	b.n	80152e8 <scalbnf+0x34>
 801531c:	4410      	add	r0, r2
 801531e:	28fe      	cmp	r0, #254	@ 0xfe
 8015320:	dce6      	bgt.n	80152f0 <scalbnf+0x3c>
 8015322:	2800      	cmp	r0, #0
 8015324:	dd06      	ble.n	8015334 <scalbnf+0x80>
 8015326:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801532a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801532e:	ee00 3a10 	vmov	s0, r3
 8015332:	4770      	bx	lr
 8015334:	f110 0f16 	cmn.w	r0, #22
 8015338:	da09      	bge.n	801534e <scalbnf+0x9a>
 801533a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8015374 <scalbnf+0xc0>
 801533e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8015378 <scalbnf+0xc4>
 8015342:	ee10 3a10 	vmov	r3, s0
 8015346:	eeb0 7a67 	vmov.f32	s14, s15
 801534a:	2b00      	cmp	r3, #0
 801534c:	e7d9      	b.n	8015302 <scalbnf+0x4e>
 801534e:	3019      	adds	r0, #25
 8015350:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015354:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8015358:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801537c <scalbnf+0xc8>
 801535c:	ee07 3a90 	vmov	s15, r3
 8015360:	e7d7      	b.n	8015312 <scalbnf+0x5e>
 8015362:	bf00      	nop
 8015364:	ffff3cb0 	.word	0xffff3cb0
 8015368:	4c000000 	.word	0x4c000000
 801536c:	7149f2ca 	.word	0x7149f2ca
 8015370:	f149f2ca 	.word	0xf149f2ca
 8015374:	0da24260 	.word	0x0da24260
 8015378:	8da24260 	.word	0x8da24260
 801537c:	33000000 	.word	0x33000000

08015380 <floorf>:
 8015380:	ee10 3a10 	vmov	r3, s0
 8015384:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015388:	3a7f      	subs	r2, #127	@ 0x7f
 801538a:	2a16      	cmp	r2, #22
 801538c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8015390:	dc2b      	bgt.n	80153ea <floorf+0x6a>
 8015392:	2a00      	cmp	r2, #0
 8015394:	da12      	bge.n	80153bc <floorf+0x3c>
 8015396:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80153fc <floorf+0x7c>
 801539a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801539e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80153a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153a6:	dd06      	ble.n	80153b6 <floorf+0x36>
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	da24      	bge.n	80153f6 <floorf+0x76>
 80153ac:	2900      	cmp	r1, #0
 80153ae:	4b14      	ldr	r3, [pc, #80]	@ (8015400 <floorf+0x80>)
 80153b0:	bf08      	it	eq
 80153b2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80153b6:	ee00 3a10 	vmov	s0, r3
 80153ba:	4770      	bx	lr
 80153bc:	4911      	ldr	r1, [pc, #68]	@ (8015404 <floorf+0x84>)
 80153be:	4111      	asrs	r1, r2
 80153c0:	420b      	tst	r3, r1
 80153c2:	d0fa      	beq.n	80153ba <floorf+0x3a>
 80153c4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80153fc <floorf+0x7c>
 80153c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80153cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80153d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153d4:	ddef      	ble.n	80153b6 <floorf+0x36>
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	bfbe      	ittt	lt
 80153da:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80153de:	fa40 f202 	asrlt.w	r2, r0, r2
 80153e2:	189b      	addlt	r3, r3, r2
 80153e4:	ea23 0301 	bic.w	r3, r3, r1
 80153e8:	e7e5      	b.n	80153b6 <floorf+0x36>
 80153ea:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80153ee:	d3e4      	bcc.n	80153ba <floorf+0x3a>
 80153f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80153f4:	4770      	bx	lr
 80153f6:	2300      	movs	r3, #0
 80153f8:	e7dd      	b.n	80153b6 <floorf+0x36>
 80153fa:	bf00      	nop
 80153fc:	7149f2ca 	.word	0x7149f2ca
 8015400:	bf800000 	.word	0xbf800000
 8015404:	007fffff 	.word	0x007fffff

08015408 <_init>:
 8015408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801540a:	bf00      	nop
 801540c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801540e:	bc08      	pop	{r3}
 8015410:	469e      	mov	lr, r3
 8015412:	4770      	bx	lr

08015414 <_fini>:
 8015414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015416:	bf00      	nop
 8015418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801541a:	bc08      	pop	{r3}
 801541c:	469e      	mov	lr, r3
 801541e:	4770      	bx	lr
